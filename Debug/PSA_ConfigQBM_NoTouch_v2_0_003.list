
PSA_ConfigQBM_NoTouch_v2_0_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a260  0800a260  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a268  0800a268  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000015f0  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00002000  20001660  20001660  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033ba3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059ee  00000000  00000000  00053c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002718  00000000  00000000  00059638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024f8  00000000  00000000  0005bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000076ba  00000000  00000000  0005e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000301cd  00000000  00000000  00065902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00127c01  00000000  00000000  00095acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bd6d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a8bc  00000000  00000000  001bd724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a1b4 	.word	0x0800a1b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800a1b4 	.word	0x0800a1b4

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fd5e 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f83c 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fd58 	bl	8000fb8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000508:	f000 f9a8 	bl	800085c <MX_CRC_Init>
  MX_DMA2D_Init();
 800050c:	f000 f9ba 	bl	8000884 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000510:	f000 f9ea 	bl	80008e8 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000514:	f000 fd00 	bl	8000f18 <MX_FMC_Init>
  MX_LTDC_Init();
 8000518:	f000 fb5c 	bl	8000bd4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800051c:	f000 fbd8 	bl	8000cd0 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8000520:	f000 fae2 	bl	8000ae8 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000524:	f000 f8f2 	bl	800070c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000528:	f000 f944 	bl	80007b4 <MX_CAN2_Init>
  MX_SPI2_Init();
 800052c:	f000 fc1c 	bl	8000d68 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000530:	f000 f898 	bl	8000664 <MX_ADC1_Init>
  MX_IWDG_Init();
 8000534:	f000 fb34 	bl	8000ba0 <MX_IWDG_Init>
  MX_TIM2_Init();
 8000538:	f000 fc4c 	bl	8000dd4 <MX_TIM2_Init>
  MX_I2C2_Init();
 800053c:	f000 fb02 	bl	8000b44 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000540:	f000 fc96 	bl	8000e70 <MX_USART6_UART_Init>
  MX_SDIO_SD_Init();
 8000544:	f000 fbf0 	bl	8000d28 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000548:	f009 f924 	bl	8009794 <MX_FATFS_Init>
  MX_DMA_Init();
 800054c:	f000 fcbc 	bl	8000ec8 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  PSA.B1_IncomingAirPressure.Value = 710;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <main+0x78>)
 8000552:	f240 22c6 	movw	r2, #710	; 0x2c6
 8000556:	879a      	strh	r2, [r3, #60]	; 0x3c
  PSA.Mode.Ready = 1;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <main+0x78>)
 800055a:	2201      	movs	r2, #1
 800055c:	701a      	strb	r2, [r3, #0]
//
//	fm_init(ID);
//	fm_write(ID);
//	f_mount(NULL, (TCHAR const*)SDPath, 0);
//  fm_test_all();
  HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);	/* Illumina un led */
 800055e:	2108      	movs	r1, #8
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0x7c>)
 8000562:	f004 fb28 	bl	8004bb6 <HAL_GPIO_TogglePin>
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x80>)
 8000568:	f004 fcc6 	bl	8004ef8 <HAL_IWDG_Refresh>
 800056c:	e7fb      	b.n	8000566 <main+0x6e>
 800056e:	bf00      	nop
 8000570:	200010f0 	.word	0x200010f0
 8000574:	40022800 	.word	0x40022800
 8000578:	20000860 	.word	0x20000860

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fe0a 	bl	800a1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <SystemClock_Config+0xe0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a2c      	ldr	r2, [pc, #176]	; (800065c <SystemClock_Config+0xe0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <SystemClock_Config+0xe0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <SystemClock_Config+0xe4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a26      	ldr	r2, [pc, #152]	; (8000660 <SystemClock_Config+0xe4>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <SystemClock_Config+0xe4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005d8:	2309      	movs	r3, #9
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f4:	23b4      	movs	r3, #180	; 0xb4
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000600:	2306      	movs	r3, #6
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fd6b 	bl	80060e4 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000614:	f000 fe4c 	bl	80012b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000618:	f004 ffe6 	bl	80055e8 <HAL_PWREx_EnableOverDrive>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 fe45 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f005 f8e1 	bl	800580c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000650:	f000 fe2e 	bl	80012b0 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_ADC1_Init+0x98>)
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <MX_ADC1_Init+0x9c>)
 800067a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_ADC1_Init+0x98>)
 800067e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_ADC1_Init+0x98>)
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <MX_ADC1_Init+0xa0>)
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_ADC1_Init+0x98>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_ADC1_Init+0x98>)
 80006c6:	f001 fcdf 	bl	8002088 <HAL_ADC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 fdee 	bl	80012b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_ADC1_Init+0xa4>)
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0x98>)
 80006e6:	f001 fd13 	bl	8002110 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f0:	f000 fdde 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000b98 	.word	0x20000b98
 8000700:	40012000 	.word	0x40012000
 8000704:	0f000001 	.word	0x0f000001
 8000708:	10000012 	.word	0x10000012

0800070c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000714:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <MX_CAN1_Init+0xa4>)
 8000716:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 250;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_CAN1_Init+0xa0>)
 800071a:	22fa      	movs	r2, #250	; 0xfa
 800071c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_CAN1_Init+0xa0>)
 800072c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000730:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_CAN1_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_CAN1_Init+0xa0>)
 800074c:	2200      	movs	r2, #0
 800074e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_CAN1_Init+0xa0>)
 8000758:	2200      	movs	r2, #0
 800075a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_CAN1_Init+0xa0>)
 800075e:	f001 ff05 	bl	800256c <HAL_CAN_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 fda2 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN1_Filter = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2228      	movs	r2, #40	; 0x28
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f009 fd16 	bl	800a1a4 <memset>

  CAN1_Filter.FilterActivation = CAN_FILTER_ENABLE;		/* To enable/disable the filter */
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  CAN1_Filter.FilterBank = 9;							/* You can assign any filterbanks from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank */
 800077c:	2309      	movs	r3, #9
 800077e:	617b      	str	r3, [r7, #20]
  CAN1_Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  CAN1_Filter.FilterIdHigh = 0x0000 << 5;				/* */
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  CAN1_Filter.FilterIdLow = 0x0000;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  CAN1_Filter.FilterMode = CAN_FILTERMODE_IDMASK;		/* If all the 1 matched with the sended ID. The message will be not filter out */
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  CAN1_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  CAN1_Filter.SlaveStartFilterBank = 14; 				/* FilterBank from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank*/
 8000794:	230e      	movs	r3, #14
 8000796:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN1_Filter);
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_CAN1_Init+0xa0>)
 800079e:	f001 ffe1 	bl	8002764 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20001008 	.word	0x20001008
 80007b0:	40006400 	.word	0x40006400

080007b4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007bc:	4a26      	ldr	r2, [pc, #152]	; (8000858 <MX_CAN2_Init+0xa4>)
 80007be:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 40;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007d4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80007d8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_CAN2_Init+0xa0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_CAN2_Init+0xa0>)
 8000800:	2200      	movs	r2, #0
 8000802:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_CAN2_Init+0xa0>)
 8000806:	f001 feb1 	bl	800256c <HAL_CAN_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 fd4e 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef CAN2_Filter = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2228      	movs	r2, #40	; 0x28
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f009 fcc2 	bl	800a1a4 <memset>
  CAN2_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  CAN2_Filter.FilterBank = 18;
 8000824:	2312      	movs	r3, #18
 8000826:	617b      	str	r3, [r7, #20]
  CAN2_Filter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  CAN2_Filter.FilterIdHigh = 0x701 << 5;
 800082c:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000830:	603b      	str	r3, [r7, #0]
  CAN2_Filter.FilterIdLow = 0x0000;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  CAN2_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  CAN2_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  CAN2_Filter.SlaveStartFilterBank = 14;
 800083e:	230e      	movs	r3, #14
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &CAN2_Filter);
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_CAN2_Init+0xa0>)
 8000848:	f001 ff8c 	bl	8002764 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000be0 	.word	0x20000be0
 8000858:	40006800 	.word	0x40006800

0800085c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_CRC_Init+0x20>)
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <MX_CRC_Init+0x24>)
 8000864:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_CRC_Init+0x20>)
 8000868:	f002 fc80 	bl	800316c <HAL_CRC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000872:	f000 fd1d 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000086c 	.word	0x2000086c
 8000880:	40023000 	.word	0x40023000

08000884 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <MX_DMA2D_Init+0x60>)
 800088c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008ba:	f003 f811 	bl	80038e0 <HAL_DMA2D_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008c4:	f000 fcf4 	bl	80012b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008c8:	2101      	movs	r1, #1
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_DMA2D_Init+0x5c>)
 80008cc:	f003 f962 	bl	8003b94 <HAL_DMA2D_ConfigLayer>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008d6:	f000 fceb 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000f80 	.word	0x20000f80
 80008e4:	4002b000 	.word	0x4002b000

080008e8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0aa      	sub	sp, #168	; 0xa8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008fe:	2224      	movs	r2, #36	; 0x24
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f009 fc4e 	bl	800a1a4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000908:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800091a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091e:	2234      	movs	r2, #52	; 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f009 fc3e 	bl	800a1a4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	222c      	movs	r2, #44	; 0x2c
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f009 fc38 	bl	800a1a4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000934:	4b6a      	ldr	r3, [pc, #424]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000936:	4a6b      	ldr	r2, [pc, #428]	; (8000ae4 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000938:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800093a:	4b69      	ldr	r3, [pc, #420]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000940:	4b67      	ldr	r3, [pc, #412]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000942:	2204      	movs	r2, #4
 8000944:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000946:	4b66      	ldr	r3, [pc, #408]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 800094c:	237d      	movs	r3, #125	; 0x7d
 800094e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800095e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000962:	4619      	mov	r1, r3
 8000964:	485e      	ldr	r0, [pc, #376]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000966:	f003 f9a7 	bl	8003cb8 <HAL_DSI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 fc9e 	bl	80012b0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009aa:	4619      	mov	r1, r3
 80009ac:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009ae:	f003 fe31 	bl	8004614 <HAL_DSI_ConfigHostTimeouts>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80009b8:	f000 fc7a 	bl	80012b0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80009bc:	231c      	movs	r3, #28
 80009be:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009c0:	2321      	movs	r3, #33	; 0x21
 80009c2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80009c4:	230f      	movs	r3, #15
 80009c6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80009c8:	2319      	movs	r3, #25
 80009ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009d8:	4619      	mov	r1, r3
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009dc:	f003 fdb0 	bl	8004540 <HAL_DSI_ConfigPhyTimer>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80009e6:	f000 fc63 	bl	80012b0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009ea:	2104      	movs	r1, #4
 80009ec:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009ee:	f003 fd7f 	bl	80044f0 <HAL_DSI_ConfigFlowControl>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80009f8:	f000 fc5a 	bl	80012b0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a00:	4837      	ldr	r0, [pc, #220]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a02:	f003 fecd 	bl	80047a0 <HAL_DSI_SetLowPowerRXFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000a0c:	f000 fc50 	bl	80012b0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a14:	f003 fa6a 	bl	8003eec <HAL_DSI_ConfigErrorMonitor>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000a1e:	f000 fc47 	bl	80012b0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a5c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a62:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a68:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a76:	f003 fcdd 	bl	8004434 <HAL_DSI_ConfigCommand>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a80:	f000 fc16 	bl	80012b0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000a8c:	23c8      	movs	r3, #200	; 0xc8
 8000a8e:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a90:	2310      	movs	r3, #16
 8000a92:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ab6:	f003 fbe5 	bl	8004284 <HAL_DSI_ConfigAdaptedCommandMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000ac0:	f000 fbf6 	bl	80012b0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ac8:	f003 fbb4 	bl	8004234 <HAL_DSI_SetGenericVCID>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000ad2:	f000 fbed 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	37a8      	adds	r7, #168	; 0xa8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000ad0 	.word	0x20000ad0
 8000ae4:	40016c00 	.word	0x40016c00

08000ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_I2C1_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_I2C1_Init+0x58>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_I2C1_Init+0x50>)
 8000b26:	f004 f861 	bl	8004bec <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 fbbe 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000080c 	.word	0x2000080c
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	00061a80 	.word	0x00061a80

08000b44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <MX_I2C2_Init+0x58>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b50:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b54:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_I2C2_Init+0x54>)
 8000b84:	f004 f832 	bl	8004bec <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000b8e:	f000 fb8f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000a7c 	.word	0x20000a7c
 8000b9c:	40005800 	.word	0x40005800

08000ba0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_IWDG_Init+0x2c>)
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <MX_IWDG_Init+0x30>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_IWDG_Init+0x2c>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1999;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_IWDG_Init+0x2c>)
 8000bb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000bb6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_IWDG_Init+0x2c>)
 8000bba:	f004 f95b 	bl	8004e74 <HAL_IWDG_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000bc4:	f000 fb74 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000860 	.word	0x20000860
 8000bd0:	40003000 	.word	0x40003000

08000bd4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2234      	movs	r2, #52	; 0x34
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 fadf 	bl	800a1a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000be8:	4a38      	ldr	r2, [pc, #224]	; (8000ccc <MX_LTDC_Init+0xf8>)
 8000bea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bf2:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c1e:	22ca      	movs	r2, #202	; 0xca
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c24:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c2c:	22cb      	movs	r2, #203	; 0xcb
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c32:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c50:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000c52:	f004 f961 	bl	8004f18 <HAL_LTDC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 fb28 	bl	80012b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000c64:	23c8      	movs	r3, #200	; 0xc8
 8000c66:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000c6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c70:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c72:	2302      	movs	r3, #2
 8000c74:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c84:	2305      	movs	r3, #5
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c88:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000c8e:	23c8      	movs	r3, #200	; 0xc8
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000c92:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_LTDC_Init+0xf4>)
 8000cb2:	f004 fac3 	bl	800523c <HAL_LTDC_ConfigLayer>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000cbc:	f000 faf8 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000af0 	.word	0x20000af0
 8000ccc:	40016800 	.word	0x40016800

08000cd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <MX_QUADSPI_Init+0x54>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000cee:	221b      	movs	r2, #27
 8000cf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_QUADSPI_Init+0x50>)
 8000d0e:	f004 fcbb 	bl	8005688 <HAL_QSPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d18:	f000 faca 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200010a0 	.word	0x200010a0
 8000d24:	a0001000 	.word	0xa0001000

08000d28 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <MX_SDIO_SD_Init+0x3c>)
 8000d30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <MX_SDIO_SD_Init+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000eac 	.word	0x20000eac
 8000d64:	40012c00 	.word	0x40012c00

08000d68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <MX_SPI2_Init+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000db4:	220a      	movs	r2, #10
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_SPI2_Init+0x64>)
 8000dba:	f006 ff64 	bl	8007c86 <HAL_SPI_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dc4:	f000 fa74 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000598 	.word	0x20000598
 8000dd0:	40003800 	.word	0x40003800

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 -1;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000dfa:	f242 3227 	movw	r2, #8999	; 0x2327
 8000dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e08:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e1c:	f006 ffbc 	bl	8007d98 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e26:	f000 fa43 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e38:	f007 f976 	bl	8008128 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e42:	f000 fa35 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_TIM2_Init+0x98>)
 8000e54:	f007 fb92 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e5e:	f000 fa27 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000fc0 	.word	0x20000fc0

08000e70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <MX_USART6_UART_Init+0x54>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART6_UART_Init+0x50>)
 8000eac:	f007 fbf6 	bl	800869c <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 f9fb 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000f3c 	.word	0x20000f3c
 8000ec4:	40011400 	.word	0x40011400

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	203b      	movs	r0, #59	; 0x3b
 8000ef0:	f002 f912 	bl	8003118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ef4:	203b      	movs	r0, #59	; 0x3b
 8000ef6:	f002 f92b 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	2045      	movs	r0, #69	; 0x45
 8000f00:	f002 f90a 	bl	8003118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f04:	2045      	movs	r0, #69	; 0x45
 8000f06:	f002 f923 	bl	8003150 <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f32:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <MX_FMC_Init+0x9c>)
 8000f34:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f56:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f5a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f84:	2307      	movs	r3, #7
 8000f86:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_FMC_Init+0x98>)
 8000f9a:	f006 fe40 	bl	8007c1e <HAL_SDRAM_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fa4:	f000 f984 	bl	80012b0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20001044 	.word	0x20001044
 8000fb4:	a0000140 	.word	0xa0000140

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b090      	sub	sp, #64	; 0x40
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <MX_GPIO_Init+0x258>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a8e      	ldr	r2, [pc, #568]	; (8001210 <MX_GPIO_Init+0x258>)
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <MX_GPIO_Init+0x258>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
 8000fee:	4b88      	ldr	r3, [pc, #544]	; (8001210 <MX_GPIO_Init+0x258>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a87      	ldr	r2, [pc, #540]	; (8001210 <MX_GPIO_Init+0x258>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b85      	ldr	r3, [pc, #532]	; (8001210 <MX_GPIO_Init+0x258>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <MX_GPIO_Init+0x258>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a80      	ldr	r2, [pc, #512]	; (8001210 <MX_GPIO_Init+0x258>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <MX_GPIO_Init+0x258>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <MX_GPIO_Init+0x258>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a79      	ldr	r2, [pc, #484]	; (8001210 <MX_GPIO_Init+0x258>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <MX_GPIO_Init+0x258>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <MX_GPIO_Init+0x258>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <MX_GPIO_Init+0x258>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <MX_GPIO_Init+0x258>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <MX_GPIO_Init+0x258>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <MX_GPIO_Init+0x258>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <MX_GPIO_Init+0x258>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <MX_GPIO_Init+0x258>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a64      	ldr	r2, [pc, #400]	; (8001210 <MX_GPIO_Init+0x258>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <MX_GPIO_Init+0x258>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <MX_GPIO_Init+0x258>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <MX_GPIO_Init+0x258>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <MX_GPIO_Init+0x258>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <MX_GPIO_Init+0x258>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a56      	ldr	r2, [pc, #344]	; (8001210 <MX_GPIO_Init+0x258>)
 80010b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <MX_GPIO_Init+0x258>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <MX_GPIO_Init+0x258>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <MX_GPIO_Init+0x258>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <MX_GPIO_Init+0x258>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <MX_GPIO_Init+0x258>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a48      	ldr	r2, [pc, #288]	; (8001210 <MX_GPIO_Init+0x258>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <MX_GPIO_Init+0x258>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2108      	movs	r1, #8
 8001106:	4843      	ldr	r0, [pc, #268]	; (8001214 <MX_GPIO_Init+0x25c>)
 8001108:	f003 fd3c 	bl	8004b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2110      	movs	r1, #16
 8001110:	4841      	ldr	r0, [pc, #260]	; (8001218 <MX_GPIO_Init+0x260>)
 8001112:	f003 fd37 	bl	8004b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	4840      	ldr	r0, [pc, #256]	; (800121c <MX_GPIO_Init+0x264>)
 800111c:	f003 fd32 	bl	8004b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	21c0      	movs	r1, #192	; 0xc0
 8001124:	483e      	ldr	r0, [pc, #248]	; (8001220 <MX_GPIO_Init+0x268>)
 8001126:	f003 fd2d 	bl	8004b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_blue_Pin */
  GPIO_InitStruct.Pin = LED_blue_Pin;
 800112a:	2308      	movs	r3, #8
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800112e:	2311      	movs	r3, #17
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_blue_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	4619      	mov	r1, r3
 8001140:	4834      	ldr	r0, [pc, #208]	; (8001214 <MX_GPIO_Init+0x25c>)
 8001142:	f003 fb5b 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001146:	2304      	movs	r3, #4
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	4832      	ldr	r0, [pc, #200]	; (8001224 <MX_GPIO_Init+0x26c>)
 800115a:	f003 fb4f 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800115e:	2306      	movs	r3, #6
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_GPIO_Init+0x260>)
 8001172:	f003 fb43 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001176:	2310      	movs	r3, #16
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <MX_GPIO_Init+0x260>)
 800118e:	f003 fb35 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001192:	2310      	movs	r3, #16
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	481c      	ldr	r0, [pc, #112]	; (800121c <MX_GPIO_Init+0x264>)
 80011aa:	f003 fb27 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011b2:	2311      	movs	r3, #17
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0x268>)
 80011c6:	f003 fb19 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80011ca:	23e0      	movs	r3, #224	; 0xe0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011da:	2305      	movs	r3, #5
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0x260>)
 80011e6:	f003 fb09 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <MX_GPIO_Init+0x268>)
 8001202:	f003 fafb 	bl	80047fc <HAL_GPIO_Init>

}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40022800 	.word	0x40022800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020800 	.word	0x40020800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40021800 	.word	0x40021800

08001228 <HAL_CAN_RxFifo1MsgPendingCallback>:

	DateTime_setTimeString(&today, NULL);
	DateTime_setTimeString(&today, ":");
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	PSA.CAN_2.State = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	f107 0214 	add.w	r2, r7, #20
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 fb72 	bl	8002924 <HAL_CAN_GetRxMessage>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001246:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if(!PSA.CAN_2.State)
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800124c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d113      	bne.n	800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
	{
		if((RxHeader.StdId == 0x701) && (RxHeader.DLC == 1))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f240 7201 	movw	r2, #1793	; 0x701
 800125a:	4293      	cmp	r3, r2
 800125c:	d10e      	bne.n	800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10b      	bne.n	800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		{
			/* Valve are working -> Refresh Valve Timer */
			HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
 8001264:	2108      	movs	r1, #8
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8001268:	f003 fca5 	bl	8004bb6 <HAL_GPIO_TogglePin>
			PSA.ReceiveValveMessage.Timer = PSA.ReceiveValveMessage.Refresh;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800126e:	89da      	ldrh	r2, [r3, #14]
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001272:	819a      	strh	r2, [r3, #12]
			PSA.CAN_2.ReceiveAliveMessage = RxData[0];
 8001274:	7b3a      	ldrb	r2, [r7, #12]
 8001276:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001278:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
	}
}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200010f0 	.word	0x200010f0
 8001288:	40022800 	.word	0x40022800

0800128c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129e:	f000 feaf 	bl	8002000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40001000 	.word	0x40001000

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_MspInit+0x54>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_MspInit+0x54>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_MspInit+0x54>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_MspInit+0x54>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	210f      	movs	r1, #15
 80012fe:	f06f 0001 	mvn.w	r0, #1
 8001302:	f001 ff09 	bl	8003118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_ADC_MspInit+0x3c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10d      	bne.n	8001342 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_ADC_MspInit+0x40>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_ADC_MspInit+0x40>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0x40>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40012000 	.word	0x40012000
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <HAL_CAN_MspInit+0x14c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d13e      	bne.n	80013f8 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800137a:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 8001382:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001384:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10d      	bne.n	80013a8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_CAN_MspInit+0x154>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_CAN_MspInit+0x154>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a3e      	ldr	r2, [pc, #248]	; (80014ac <HAL_CAN_MspInit+0x154>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <HAL_CAN_MspInit+0x154>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80013c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013d6:	2309      	movs	r3, #9
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4833      	ldr	r0, [pc, #204]	; (80014b0 <HAL_CAN_MspInit+0x158>)
 80013e2:	f003 fa0b 	bl	80047fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2014      	movs	r0, #20
 80013ec:	f001 fe94 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f001 fead 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013f6:	e050      	b.n	800149a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2d      	ldr	r2, [pc, #180]	; (80014b4 <HAL_CAN_MspInit+0x15c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d14b      	bne.n	800149a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_CAN_MspInit+0x154>)
 800140c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 8001426:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_CAN_MspInit+0x150>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d10d      	bne.n	800144c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_CAN_MspInit+0x154>)
 800143a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <HAL_CAN_MspInit+0x154>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_CAN_MspInit+0x154>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001468:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800147a:	2309      	movs	r3, #9
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_CAN_MspInit+0x160>)
 8001486:	f003 f9b9 	bl	80047fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2041      	movs	r0, #65	; 0x41
 8001490:	f001 fe42 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001494:	2041      	movs	r0, #65	; 0x41
 8001496:	f001 fe5b 	bl	8003150 <HAL_NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40006400 	.word	0x40006400
 80014a8:	2000008c 	.word	0x2000008c
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40006800 	.word	0x40006800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_CRC_MspInit+0x3c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10d      	bne.n	80014ea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_CRC_MspInit+0x40>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_CRC_MspInit+0x40>)
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_CRC_MspInit+0x40>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023000 	.word	0x40023000
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_DMA2D_MspInit+0x48>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_DMA2D_MspInit+0x4c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_DMA2D_MspInit+0x4c>)
 800151c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_DMA2D_MspInit+0x4c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	205a      	movs	r0, #90	; 0x5a
 8001534:	f001 fdf0 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001538:	205a      	movs	r0, #90	; 0x5a
 800153a:	f001 fe09 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	4002b000 	.word	0x4002b000
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_DSI_MspInit+0x94>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d133      	bne.n	80015da <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 800157c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 8001598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_DSI_MspInit+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015aa:	2304      	movs	r3, #4
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80015ba:	230d      	movs	r3, #13
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_DSI_MspInit+0x9c>)
 80015c6:	f003 f919 	bl	80047fc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	205c      	movs	r0, #92	; 0x5c
 80015d0:	f001 fda2 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80015d4:	205c      	movs	r0, #92	; 0x5c
 80015d6:	f001 fdbb 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40016c00 	.word	0x40016c00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40022400 	.word	0x40022400

080015f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <HAL_I2C_MspInit+0xe8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12d      	bne.n	800166e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_I2C_MspInit+0xec>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a30      	ldr	r2, [pc, #192]	; (80016dc <HAL_I2C_MspInit+0xec>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_I2C_MspInit+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800162e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001634:	2312      	movs	r3, #18
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001638:	2301      	movs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001640:	2304      	movs	r3, #4
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4825      	ldr	r0, [pc, #148]	; (80016e0 <HAL_I2C_MspInit+0xf0>)
 800164c:	f003 f8d6 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_I2C_MspInit+0xec>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_I2C_MspInit+0xec>)
 800165a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_I2C_MspInit+0xec>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800166c:	e030      	b.n	80016d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_I2C_MspInit+0xf4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d12b      	bne.n	80016d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_I2C_MspInit+0xec>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_I2C_MspInit+0xec>)
 8001682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_I2C_MspInit+0xec>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001694:	2330      	movs	r3, #48	; 0x30
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001698:	2312      	movs	r3, #18
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016a4:	2304      	movs	r3, #4
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	480e      	ldr	r0, [pc, #56]	; (80016e8 <HAL_I2C_MspInit+0xf8>)
 80016b0:	f003 f8a4 	bl	80047fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_I2C_MspInit+0xec>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_I2C_MspInit+0xec>)
 80016be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_I2C_MspInit+0xec>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3730      	adds	r7, #48	; 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40005400 	.word	0x40005400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40005800 	.word	0x40005800
 80016e8:	40021c00 	.word	0x40021c00

080016ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b092      	sub	sp, #72	; 0x48
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	223c      	movs	r2, #60	; 0x3c
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f008 fd51 	bl	800a1a4 <memset>
  if(hltdc->Instance==LTDC)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_LTDC_MspInit+0x78>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d127      	bne.n	800175c <HAL_LTDC_MspInit+0x70>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800170c:	2308      	movs	r3, #8
 800170e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001710:	2332      	movs	r3, #50	; 0x32
 8001712:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4618      	mov	r0, r3
 8001722:	f004 faa1 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 800172c:	f7ff fdc0 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_LTDC_MspInit+0x7c>)
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_LTDC_MspInit+0x7c>)
 800173a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800173e:	6453      	str	r3, [r2, #68]	; 0x44
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_LTDC_MspInit+0x7c>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2105      	movs	r1, #5
 8001750:	2058      	movs	r0, #88	; 0x58
 8001752:	f001 fce1 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001756:	2058      	movs	r0, #88	; 0x58
 8001758:	f001 fcfa 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	3748      	adds	r7, #72	; 0x48
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40016800 	.word	0x40016800
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a31      	ldr	r2, [pc, #196]	; (8001850 <HAL_QSPI_MspInit+0xe4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d15b      	bne.n	8001846 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6393      	str	r3, [r2, #56]	; 0x38
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_QSPI_MspInit+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e2:	2340      	movs	r3, #64	; 0x40
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017f2:	230a      	movs	r3, #10
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4816      	ldr	r0, [pc, #88]	; (8001858 <HAL_QSPI_MspInit+0xec>)
 80017fe:	f002 fffd 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001802:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001814:	2309      	movs	r3, #9
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <HAL_QSPI_MspInit+0xf0>)
 8001820:	f002 ffec 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001824:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001836:	230a      	movs	r3, #10
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <HAL_QSPI_MspInit+0xf0>)
 8001842:	f002 ffdb 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	a0001000 	.word	0xa0001000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020400 	.word	0x40020400
 800185c:	40021400 	.word	0x40021400

08001860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09a      	sub	sp, #104	; 0x68
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	223c      	movs	r2, #60	; 0x3c
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f008 fc8f 	bl	800a1a4 <memset>
  if(hsd->Instance==SDIO)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a79      	ldr	r2, [pc, #484]	; (8001a70 <HAL_SD_MspInit+0x210>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 80eb 	bne.w	8001a68 <HAL_SD_MspInit+0x208>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 8001892:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001896:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001898:	2300      	movs	r3, #0
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800189c:	2300      	movs	r3, #0
 800189e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 f9df 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80018b0:	f7ff fcfe 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a5f      	ldr	r2, [pc, #380]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_SD_MspInit+0x214>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800191a:	230c      	movs	r3, #12
 800191c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001922:	4619      	mov	r1, r3
 8001924:	4854      	ldr	r0, [pc, #336]	; (8001a78 <HAL_SD_MspInit+0x218>)
 8001926:	f002 ff69 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800192a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800192e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001934:	2301      	movs	r3, #1
 8001936:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800193c:	230c      	movs	r3, #12
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001944:	4619      	mov	r1, r3
 8001946:	484c      	ldr	r0, [pc, #304]	; (8001a78 <HAL_SD_MspInit+0x218>)
 8001948:	f002 ff58 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800194c:	2304      	movs	r3, #4
 800194e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800195c:	230c      	movs	r3, #12
 800195e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001964:	4619      	mov	r1, r3
 8001966:	4845      	ldr	r0, [pc, #276]	; (8001a7c <HAL_SD_MspInit+0x21c>)
 8001968:	f002 ff48 	bl	80047fc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800196c:	4b44      	ldr	r3, [pc, #272]	; (8001a80 <HAL_SD_MspInit+0x220>)
 800196e:	4a45      	ldr	r2, [pc, #276]	; (8001a84 <HAL_SD_MspInit+0x224>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_SD_MspInit+0x220>)
 8001974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001978:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <HAL_SD_MspInit+0x220>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_SD_MspInit+0x220>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <HAL_SD_MspInit+0x220>)
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <HAL_SD_MspInit+0x220>)
 8001990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001994:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_SD_MspInit+0x220>)
 8001998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019a0:	2220      	movs	r2, #32
 80019a2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019aa:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019b2:	2203      	movs	r2, #3
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80019c6:	482e      	ldr	r0, [pc, #184]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019c8:	f001 fbec 	bl	80031a4 <HAL_DMA_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_SD_MspInit+0x176>
    {
      Error_Handler();
 80019d2:	f7ff fc6d 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
 80019dc:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_SD_MspInit+0x220>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_SD_MspInit+0x228>)
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <HAL_SD_MspInit+0x22c>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <HAL_SD_MspInit+0x228>)
 80019ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_SD_MspInit+0x228>)
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_SD_MspInit+0x228>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_SD_MspInit+0x228>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a0a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a16:	2220      	movs	r2, #32
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a3e:	f001 fbb1 	bl	80031a4 <HAL_DMA_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_SD_MspInit+0x1ec>
    {
      Error_Handler();
 8001a48:	f7ff fc32 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a50:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_SD_MspInit+0x228>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2105      	movs	r1, #5
 8001a5c:	2031      	movs	r0, #49	; 0x31
 8001a5e:	f001 fb5b 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001a62:	2031      	movs	r0, #49	; 0x31
 8001a64:	f001 fb74 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3768      	adds	r7, #104	; 0x68
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	20000534 	.word	0x20000534
 8001a84:	40026458 	.word	0x40026458
 8001a88:	20000e20 	.word	0x20000e20
 8001a8c:	400264a0 	.word	0x400264a0

08001a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_SPI_MspInit+0xc0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d14a      	bne.n	8001b48 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_SPI_MspInit+0xc4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b06:	2308      	movs	r3, #8
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b16:	2305      	movs	r3, #5
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HAL_SPI_MspInit+0xc8>)
 8001b22:	f002 fe6b 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <HAL_SPI_MspInit+0xcc>)
 8001b44:	f002 fe5a 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40003800 	.word	0x40003800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40020400 	.word	0x40020400

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d115      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_TIM_Base_MspInit+0x48>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_TIM_Base_MspInit+0x48>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x48>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2105      	movs	r1, #5
 8001b92:	201c      	movs	r0, #28
 8001b94:	f001 fac0 	bl	8003118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b98:	201c      	movs	r0, #28
 8001b9a:	f001 fad9 	bl	8003150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12c      	bne.n	8001c28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001c06:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0x8c>)
 8001c24:	f002 fdea 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021800 	.word	0x40021800

08001c3c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c50:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <HAL_FMC_MspInit+0x128>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 8081 	bne.w	8001d5c <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <HAL_FMC_MspInit+0x128>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_FMC_MspInit+0x12c>)
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <HAL_FMC_MspInit+0x12c>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6393      	str	r3, [r2, #56]	; 0x38
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_FMC_MspInit+0x12c>)
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001c7c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c80:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4835      	ldr	r0, [pc, #212]	; (8001d6c <HAL_FMC_MspInit+0x130>)
 8001c98:	f002 fdb0 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001c9c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001ca0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cae:	230c      	movs	r3, #12
 8001cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <HAL_FMC_MspInit+0x134>)
 8001cb8:	f002 fda0 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001cbc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001cc0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4827      	ldr	r0, [pc, #156]	; (8001d74 <HAL_FMC_MspInit+0x138>)
 8001cd8:	f002 fd90 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001cdc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001ce0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4820      	ldr	r0, [pc, #128]	; (8001d78 <HAL_FMC_MspInit+0x13c>)
 8001cf8:	f002 fd80 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d00:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d0e:	230c      	movs	r3, #12
 8001d10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4819      	ldr	r0, [pc, #100]	; (8001d7c <HAL_FMC_MspInit+0x140>)
 8001d18:	f002 fd70 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8001d1c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001d20:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4812      	ldr	r0, [pc, #72]	; (8001d80 <HAL_FMC_MspInit+0x144>)
 8001d38:	f002 fd60 	bl	80047fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2;
 8001d3c:	230d      	movs	r3, #13
 8001d3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <HAL_FMC_MspInit+0x148>)
 8001d56:	f002 fd51 	bl	80047fc <HAL_GPIO_Init>
 8001d5a:	e000      	b.n	8001d5e <HAL_FMC_MspInit+0x122>
    return;
 8001d5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000090 	.word	0x20000090
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021c00 	.word	0x40021c00
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d90:	f7ff ff54 	bl	8001c3c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	2036      	movs	r0, #54	; 0x36
 8001db2:	f001 f9b1 	bl	8003118 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db6:	2036      	movs	r0, #54	; 0x36
 8001db8:	f001 f9ca 	bl	8003150 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6413      	str	r3, [r2, #64]	; 0x40
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_InitTick+0xa4>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd8:	f107 0210 	add.w	r2, r7, #16
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 ff0e 	bl	8005c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001de8:	f003 fee4 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8001dec:	4603      	mov	r3, r0
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_InitTick+0xa8>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_InitTick+0xac>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_InitTick+0xb0>)
 8001e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_InitTick+0xac>)
 8001e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_InitTick+0xac>)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_InitTick+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_InitTick+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <HAL_InitTick+0xac>)
 8001e22:	f005 ffb9 	bl	8007d98 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_InitTick+0xac>)
 8001e2e:	f006 f803 	bl	8007e38 <HAL_TIM_Base_Start_IT>
 8001e32:	4603      	mov	r3, r0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	200011a8 	.word	0x200011a8
 8001e4c:	40001000 	.word	0x40001000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <CAN1_RX0_IRQHandler+0x10>)
 8001e82:	f000 fe61 	bl	8002b48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20001008 	.word	0x20001008

08001e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM2_IRQHandler+0x10>)
 8001e96:	f006 f83f 	bl	8007f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000fc0 	.word	0x20000fc0

08001ea4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <SDIO_IRQHandler+0x10>)
 8001eaa:	f004 fe0f 	bl	8006acc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000eac 	.word	0x20000eac

08001eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM6_DAC_IRQHandler+0x10>)
 8001ebe:	f006 f82b 	bl	8007f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200011a8 	.word	0x200011a8

08001ecc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA2_Stream3_IRQHandler+0x10>)
 8001ed2:	f001 fa8f 	bl	80033f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000534 	.word	0x20000534

08001ee0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <CAN2_RX1_IRQHandler+0x10>)
 8001ee6:	f000 fe2f 	bl	8002b48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000be0 	.word	0x20000be0

08001ef4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA2_Stream6_IRQHandler+0x10>)
 8001efa:	f001 fa7b 	bl	80033f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000e20 	.word	0x20000e20

08001f08 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <LTDC_IRQHandler+0x10>)
 8001f0e:	f003 f8d3 	bl	80050b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000af0 	.word	0x20000af0

08001f1c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA2D_IRQHandler+0x10>)
 8001f22:	f001 fd26 	bl	8003972 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000f80 	.word	0x20000f80

08001f30 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DSI_IRQHandler+0x10>)
 8001f36:	f002 f896 	bl	8004066 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000ad0 	.word	0x20000ad0

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ffd7 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f008 f8e1 	bl	800a15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7fe faad 	bl	80004f8 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fac:	0800a270 	.word	0x0800a270
  ldr r2, =_sbss
 8001fb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fb4:	20001660 	.word	0x20001660

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f001 f88c 	bl	8003102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff fed6 	bl	8001d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff f964 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	200011f0 	.word	0x200011f0

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200011f0 	.word	0x200011f0

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e033      	b.n	8002106 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff f934 	bl	8001314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ce:	f023 0302 	bic.w	r3, r3, #2
 80020d2:	f043 0202 	orr.w	r2, r3, #2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f94a 	bl	8002374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e113      	b.n	8002354 <HAL_ADC_ConfigChannel+0x244>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d925      	bls.n	8002188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	3b1e      	subs	r3, #30
 800217c:	409a      	lsls	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e022      	b.n	80021ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6919      	ldr	r1, [r3, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	409a      	lsls	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d824      	bhi.n	8002220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b05      	subs	r3, #5
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b05      	subs	r3, #5
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
 800221e:	e04c      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b23      	subs	r3, #35	; 0x23
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b23      	subs	r3, #35	; 0x23
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
 8002270:	e023      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b41      	subs	r3, #65	; 0x41
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	; 0x41
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_ADC_ConfigChannel+0x250>)
 80022bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b11      	cmp	r3, #17
 8002302:	d122      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_ADC_ConfigChannel+0x25c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_ADC_ConfigChannel+0x260>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	40012000 	.word	0x40012000
 8002368:	10000012 	.word	0x10000012
 800236c:	20000000 	.word	0x20000000
 8002370:	431bde83 	.word	0x431bde83

08002374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237c:	4b79      	ldr	r3, [pc, #484]	; (8002564 <ADC_Init+0x1f0>)
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	4a58      	ldr	r2, [pc, #352]	; (8002568 <ADC_Init+0x1f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800241a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e00f      	b.n	8002472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0202 	bic.w	r2, r2, #2
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
 800248c:	005a      	lsls	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	3b01      	subs	r3, #1
 80024cc:	035a      	lsls	r2, r3, #13
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e007      	b.n	80024e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	3b01      	subs	r3, #1
 8002504:	051a      	lsls	r2, r3, #20
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800251c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800252a:	025a      	lsls	r2, r3, #9
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	029a      	lsls	r2, r3, #10
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40012300 	.word	0x40012300
 8002568:	0f000001 	.word	0x0f000001

0800256c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0ed      	b.n	800275a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fee4 	bl	8001358 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a0:	f7ff fd42 	bl	8002028 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a6:	e012      	b.n	80025ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025a8:	f7ff fd3e 	bl	8002028 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b0a      	cmp	r3, #10
 80025b4:	d90b      	bls.n	80025ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2205      	movs	r2, #5
 80025c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0c5      	b.n	800275a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0e5      	beq.n	80025a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0202 	bic.w	r2, r2, #2
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ec:	f7ff fd1c 	bl	8002028 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025f2:	e012      	b.n	800261a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f4:	f7ff fd18 	bl	8002028 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b0a      	cmp	r3, #10
 8002600:	d90b      	bls.n	800261a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2205      	movs	r2, #5
 8002612:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e09f      	b.n	800275a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e5      	bne.n	80025f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7e1b      	ldrb	r3, [r3, #24]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e007      	b.n	8002652 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7e5b      	ldrb	r3, [r3, #25]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e007      	b.n	800267c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e9b      	ldrb	r3, [r3, #26]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0220 	orr.w	r2, r2, #32
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e007      	b.n	80026a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0220 	bic.w	r2, r2, #32
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7edb      	ldrb	r3, [r3, #27]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d108      	bne.n	80026c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0210 	bic.w	r2, r2, #16
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e007      	b.n	80026d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0210 	orr.w	r2, r2, #16
 80026ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7f1b      	ldrb	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e007      	b.n	80026fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0208 	bic.w	r2, r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7f5b      	ldrb	r3, [r3, #29]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0204 	orr.w	r2, r2, #4
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e007      	b.n	8002724 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d003      	beq.n	800278a <HAL_CAN_ConfigFilter+0x26>
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 80be 	bne.w	8002906 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800278a:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_CAN_ConfigFilter+0x1bc>)
 800278c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	431a      	orrs	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2201      	movs	r2, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d123      	bne.n	8002834 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800280e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3248      	adds	r2, #72	; 0x48
 8002814:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002828:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800282a:	6979      	ldr	r1, [r7, #20]
 800282c:	3348      	adds	r3, #72	; 0x48
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d122      	bne.n	8002882 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	431a      	orrs	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800285c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	3248      	adds	r2, #72	; 0x48
 8002862:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002876:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002878:	6979      	ldr	r1, [r7, #20]
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800289c:	e007      	b.n	80028ae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	401a      	ands	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028c8:	e007      	b.n	80028da <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028f8:	f023 0201 	bic.w	r2, r3, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e006      	b.n	8002914 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40006400 	.word	0x40006400

08002924 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d003      	beq.n	8002948 <HAL_CAN_GetRxMessage+0x24>
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	2b02      	cmp	r3, #2
 8002944:	f040 80f3 	bne.w	8002b2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10e      	bne.n	800296c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0e7      	b.n	8002b3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0d8      	b.n	8002b3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	331b      	adds	r3, #27
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0204 	and.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	331b      	adds	r3, #27
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0d5b      	lsrs	r3, r3, #21
 80029b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e00b      	b.n	80029da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	331b      	adds	r3, #27
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	331b      	adds	r3, #27
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0202 	and.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	331b      	adds	r3, #27
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	331b      	adds	r3, #27
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	3304      	adds	r3, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	331b      	adds	r3, #27
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0a1a      	lsrs	r2, r3, #8
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0c1a      	lsrs	r2, r3, #16
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e1a      	lsrs	r2, r3, #24
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3303      	adds	r3, #3
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0a1a      	lsrs	r2, r3, #8
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3305      	adds	r3, #5
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0c1a      	lsrs	r2, r3, #16
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3306      	adds	r3, #6
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e1a      	lsrs	r2, r3, #24
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	3307      	adds	r3, #7
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	60da      	str	r2, [r3, #12]
 8002b18:	e007      	b.n	8002b2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e006      	b.n	8002b3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	; 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07c      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f983 	bl	8002eb6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bb0:	e016      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e00c      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	e002      	b.n	8002be0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f989 	bl	8002ef2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d024      	beq.n	8002c34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f963 	bl	8002eca <HAL_CAN_TxMailbox1CompleteCallback>
 8002c04:	e016      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	e00c      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	e002      	b.n	8002c34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f969 	bl	8002f06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d024      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f943 	bl	8002ede <HAL_CAN_TxMailbox2CompleteCallback>
 8002c58:	e016      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	e00c      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	e002      	b.n	8002c88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f949 	bl	8002f1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00c      	beq.n	8002cac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f93a 	bl	8002f42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f921 	bl	8002f2e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f912 	bl	8002f56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fa6c 	bl	8001228 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8fc 	bl	8002f6a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8f5 	bl	8002f7e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d07b      	beq.n	8002e96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d072      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d043      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03e      	beq.n	8002e8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e16:	2b60      	cmp	r3, #96	; 0x60
 8002e18:	d02b      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x32a>
 8002e1a:	2b60      	cmp	r3, #96	; 0x60
 8002e1c:	d82e      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e1e:	2b50      	cmp	r3, #80	; 0x50
 8002e20:	d022      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x320>
 8002e22:	2b50      	cmp	r3, #80	; 0x50
 8002e24:	d82a      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d019      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x316>
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d826      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e2e:	2b30      	cmp	r3, #48	; 0x30
 8002e30:	d010      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x30c>
 8002e32:	2b30      	cmp	r3, #48	; 0x30
 8002e34:	d822      	bhi.n	8002e7c <HAL_CAN_IRQHandler+0x334>
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d002      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x2f8>
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d005      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e3e:	e01d      	b.n	8002e7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e48:	e019      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e52:	e014      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e5c:	e00f      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e66:	e00a      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e70:	e005      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7a:	e000      	b.n	8002e7e <HAL_CAN_IRQHandler+0x336>
            break;
 8002e7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2204      	movs	r2, #4
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f872 	bl	8002f92 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fda:	4a04      	ldr	r2, [pc, #16]	; (8002fec <__NVIC_SetPriorityGrouping+0x44>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	60d3      	str	r3, [r2, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f003 0307 	and.w	r3, r3, #7
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	2b00      	cmp	r3, #0
 800301c:	db0b      	blt.n	8003036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <__NVIC_EnableIRQ+0x38>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2001      	movs	r0, #1
 800302e:	fa00 f202 	lsl.w	r2, r0, r2
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff4c 	bl	8002fa8 <__NVIC_SetPriorityGrouping>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312a:	f7ff ff61 	bl	8002ff0 <__NVIC_GetPriorityGrouping>
 800312e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f7ff ffb1 	bl	800309c <NVIC_EncodePriority>
 800313a:	4602      	mov	r2, r0
 800313c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff80 	bl	8003048 <__NVIC_SetPriority>
}
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff54 	bl	800300c <__NVIC_EnableIRQ>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e00e      	b.n	800319c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	795b      	ldrb	r3, [r3, #5]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f994 	bl	80014bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7fe ff3a 	bl	8002028 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e099      	b.n	80032f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e0:	e00f      	b.n	8003202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e2:	f7fe ff21 	bl	8002028 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d908      	bls.n	8003202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2203      	movs	r2, #3
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e078      	b.n	80032f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e8      	bne.n	80031e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_DMA_Init+0x158>)
 800321c:	4013      	ands	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4313      	orrs	r3, r2
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b04      	cmp	r3, #4
 8003294:	d117      	bne.n	80032c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fa9d 	bl	80037e8 <DMA_CheckFifoParam>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032c2:	2301      	movs	r3, #1
 80032c4:	e016      	b.n	80032f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa54 	bl	800377c <DMA_CalcBaseAndBitshift>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	f010803f 	.word	0xf010803f

08003300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Start_IT+0x26>
 8003322:	2302      	movs	r3, #2
 8003324:	e040      	b.n	80033a8 <HAL_DMA_Start_IT+0xa8>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d12f      	bne.n	800339a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9e6 	bl	8003720 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	223f      	movs	r2, #63	; 0x3f
 800335a:	409a      	lsls	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0216 	orr.w	r2, r2, #22
 800336e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0208 	orr.w	r2, r2, #8
 8003386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e005      	b.n	80033a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e00c      	b.n	80033e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2205      	movs	r2, #5
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_DMA_IRQHandler+0x258>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a92      	ldr	r2, [pc, #584]	; (8003650 <HAL_DMA_IRQHandler+0x25c>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0a9b      	lsrs	r3, r3, #10
 800340c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2208      	movs	r2, #8
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01a      	beq.n	8003460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2208      	movs	r2, #8
 800344e:	409a      	lsls	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f043 0201 	orr.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2201      	movs	r2, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2201      	movs	r2, #1
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	2204      	movs	r2, #4
 800349c:	409a      	lsls	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d012      	beq.n	80034cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00b      	beq.n	80034cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2204      	movs	r2, #4
 80034ba:	409a      	lsls	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0204 	orr.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	2210      	movs	r2, #16
 80034d2:	409a      	lsls	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d043      	beq.n	8003564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03c      	beq.n	8003564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2210      	movs	r2, #16
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d018      	beq.n	8003536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d024      	beq.n	8003564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e01f      	b.n	8003564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
 8003534:	e016      	b.n	8003564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0208 	bic.w	r2, r2, #8
 8003552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2220      	movs	r2, #32
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 808e 	beq.w	8003692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8086 	beq.w	8003692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	2220      	movs	r2, #32
 800358c:	409a      	lsls	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b05      	cmp	r3, #5
 800359c:	d136      	bne.n	800360c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0216 	bic.w	r2, r2, #22
 80035ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <HAL_DMA_IRQHandler+0x1da>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0208 	bic.w	r2, r2, #8
 80035dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	223f      	movs	r2, #63	; 0x3f
 80035e4:	409a      	lsls	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d07d      	beq.n	80036fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
        }
        return;
 800360a:	e078      	b.n	80036fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01c      	beq.n	8003654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	2b00      	cmp	r3, #0
 800362e:	d030      	beq.n	8003692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e02b      	b.n	8003692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e022      	b.n	8003692 <HAL_DMA_IRQHandler+0x29e>
 800364c:	20000000 	.word	0x20000000
 8003650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0210 	bic.w	r2, r2, #16
 8003670:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	2b00      	cmp	r3, #0
 8003698:	d032      	beq.n	8003700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2205      	movs	r2, #5
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d307      	bcc.n	80036da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f2      	bne.n	80036be <HAL_DMA_IRQHandler+0x2ca>
 80036d8:	e000      	b.n	80036dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e000      	b.n	8003700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036fe:	bf00      	nop
    }
  }
}
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop

08003708 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800373c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b40      	cmp	r3, #64	; 0x40
 800374c:	d108      	bne.n	8003760 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800375e:	e007      	b.n	8003770 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3b10      	subs	r3, #16
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <DMA_CalcBaseAndBitshift+0x64>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003796:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d909      	bls.n	80037be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	1d1a      	adds	r2, r3, #4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	659a      	str	r2, [r3, #88]	; 0x58
 80037bc:	e007      	b.n	80037ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	aaaaaaab 	.word	0xaaaaaaab
 80037e4:	0800a1e4 	.word	0x0800a1e4

080037e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d11f      	bne.n	8003842 <DMA_CheckFifoParam+0x5a>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d856      	bhi.n	80038b6 <DMA_CheckFifoParam+0xce>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <DMA_CheckFifoParam+0x28>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003833 	.word	0x08003833
 8003818:	08003821 	.word	0x08003821
 800381c:	080038b7 	.word	0x080038b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d046      	beq.n	80038ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003830:	e043      	b.n	80038ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800383a:	d140      	bne.n	80038be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e03d      	b.n	80038be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	d121      	bne.n	8003890 <DMA_CheckFifoParam+0xa8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d837      	bhi.n	80038c2 <DMA_CheckFifoParam+0xda>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <DMA_CheckFifoParam+0x70>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	08003869 	.word	0x08003869
 800385c:	0800386f 	.word	0x0800386f
 8003860:	08003869 	.word	0x08003869
 8003864:	08003881 	.word	0x08003881
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	e030      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d025      	beq.n	80038c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387e:	e022      	b.n	80038c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003888:	d11f      	bne.n	80038ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800388e:	e01c      	b.n	80038ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d903      	bls.n	800389e <DMA_CheckFifoParam+0xb6>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d003      	beq.n	80038a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800389c:	e018      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      break;
 80038a2:	e015      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00e      	beq.n	80038ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e00b      	b.n	80038ce <DMA_CheckFifoParam+0xe6>
      break;
 80038b6:	bf00      	nop
 80038b8:	e00a      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e008      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e006      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e004      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ce:	bf00      	nop
    }
  } 
  
  return status; 
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03b      	b.n	800396a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fdfa 	bl	8001500 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	f023 0107 	bic.w	r1, r3, #7
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800394a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d1      	ldr	r1, [r2, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	430b      	orrs	r3, r1
 8003958:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d026      	beq.n	80039e2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d021      	beq.n	80039e2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ac:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2204      	movs	r2, #4
 80039c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d026      	beq.n	8003a3a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d021      	beq.n	8003a3a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d026      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d021      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2208      	movs	r2, #8
 8003a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2204      	movs	r2, #4
 8003a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f853 	bl	8003b6a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d024      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01f      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2202      	movs	r2, #2
 8003aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01f      	beq.n	8003b62 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01a      	beq.n	8003b62 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f80e 	bl	8003b7e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA2D_ConfigLayer+0x20>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e079      	b.n	8003ca8 <HAL_DMA2D_ConfigLayer+0x114>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	3318      	adds	r3, #24
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003bde:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003be0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b0a      	cmp	r3, #10
 8003be8:	d003      	beq.n	8003bf2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	d107      	bne.n	8003c02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e005      	b.n	8003c0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d120      	bne.n	8003c56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	ea02 0103 	and.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b0a      	cmp	r3, #10
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA2D_ConfigLayer+0xb2>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d127      	bne.n	8003c96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
 8003c54:	e01f      	b.n	8003c96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	ea02 0103 	and.w	r1, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b0a      	cmp	r3, #10
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA2D_ConfigLayer+0xf4>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b09      	cmp	r3, #9
 8003c86:	d106      	bne.n	8003c96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	ff03000f 	.word	0xff03000f

08003cb8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e108      	b.n	8003ede <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7c5b      	ldrb	r3, [r3, #17]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fd fc3a 	bl	8001550 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003cf6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0a:	f7fe f98d 	bl	8002028 <HAL_GetTick>
 8003d0e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d10:	e009      	b.n	8003d26 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d12:	f7fe f989 	bl	8002028 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d20:	d901      	bls.n	8003d26 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0db      	b.n	8003ede <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ed      	beq.n	8003d12 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003d46:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003d4a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	009a      	lsls	r2, r3, #2
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	02db      	lsls	r3, r3, #11
 8003d62:	431a      	orrs	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d9e:	f7fe f943 	bl	8002028 <HAL_GetTick>
 8003da2:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003da4:	e009      	b.n	8003dba <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003da6:	f7fe f93f 	bl	8002028 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db4:	d901      	bls.n	8003dba <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e091      	b.n	8003ede <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ed      	beq.n	8003da6 <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0206 	orr.w	r2, r2, #6
 8003dda:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0203 	bic.w	r2, r2, #3
 8003dee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0203 	bic.w	r2, r2, #3
 8003e1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e44:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_DSI_Init+0x1ae>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	e000      	b.n	8003e68 <HAL_DSI_Init+0x1b0>
 8003e66:	2301      	movs	r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <HAL_DSI_Init+0x230>)
 8003e6e:	fb02 f203 	mul.w	r2, r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e9e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	003d0900 	.word	0x003d0900

08003eec <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7c1b      	ldrb	r3, [r3, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0ab      	b.n	800405a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003f3c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003f40:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003f5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0202 	orr.w	r2, r2, #2
 8003f9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 020c 	orr.w	r2, r2, #12
 8003fb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0210 	orr.w	r2, r2, #16
 8003fd6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0220 	orr.w	r2, r2, #32
 8003ff4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004012:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004030:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800404e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00f      	beq.n	800409e <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8ad 	bl	80041f8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00f      	beq.n	80040ce <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f89f 	bl	800420c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 808c 	beq.w	80041f0 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040e0:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040f8:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f043 0202 	orr.w	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f043 0204 	orr.w	r2, r3, #4
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f043 0208 	orr.w	r2, r3, #8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f818 	bl	8004220 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	7c1b      	ldrb	r3, [r3, #16]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_DSI_SetGenericVCID+0x16>
 8004246:	2302      	movs	r3, #2
 8004248:	e016      	b.n	8004278 <HAL_DSI_SetGenericVCID+0x44>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0203 	bic.w	r2, r2, #3
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7c1b      	ldrb	r3, [r3, #16]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004296:	2302      	movs	r3, #2
 8004298:	e0c5      	b.n	8004426 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0203 	bic.w	r2, r2, #3
 80042e6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0207 	bic.w	r2, r2, #7
 8004308:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6959      	ldr	r1, [r3, #20]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	431a      	orrs	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 020f 	bic.w	r2, r2, #15
 8004336:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 020e 	bic.w	r2, r2, #14
 800435a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	005a      	lsls	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80043a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	431a      	orrs	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0202 	orr.w	r2, r2, #2
 800441a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7c1b      	ldrb	r3, [r3, #16]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_DSI_ConfigCommand+0x16>
 8004446:	2302      	movs	r3, #2
 8004448:	e049      	b.n	80044de <HAL_DSI_ConfigCommand+0xaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_DSI_ConfigCommand+0xb8>)
 800445c:	400b      	ands	r3, r1
 800445e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800446e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004474:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800447a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004480:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004486:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800448c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004492:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004498:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800449e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80044a4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80044aa:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0202 	bic.w	r2, r2, #2
 80044c2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	fef080ff 	.word	0xfef080ff

080044f0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7c1b      	ldrb	r3, [r3, #16]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_DSI_ConfigFlowControl+0x16>
 8004502:	2302      	movs	r3, #2
 8004504:	e016      	b.n	8004534 <HAL_DSI_ConfigFlowControl+0x44>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 021f 	bic.w	r2, r2, #31
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7c1b      	ldrb	r3, [r3, #16]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_DSI_ConfigPhyTimer+0x16>
 8004552:	2302      	movs	r3, #2
 8004554:	e058      	b.n	8004608 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4293      	cmp	r3, r2
 8004566:	bf38      	it	cc
 8004568:	4613      	movcc	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800457c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	041a      	lsls	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80045aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80045e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	021a      	lsls	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7c1b      	ldrb	r3, [r3, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_DSI_ConfigHostTimeouts+0x16>
 8004626:	2302      	movs	r3, #2
 8004628:	e0b4      	b.n	8004794 <HAL_DSI_ConfigHostTimeouts+0x180>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800463e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b292      	uxth	r2, r2
 8004660:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7c1b      	ldrb	r3, [r3, #16]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01b      	b.n	80047ee <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80047cc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	065a      	lsls	r2, r3, #25
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e177      	b.n	8004b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 8166 	bne.w	8004b02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d130      	bne.n	80048b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	2201      	movs	r2, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0201 	and.w	r2, r3, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d017      	beq.n	80048ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d123      	bne.n	8004940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	220f      	movs	r2, #15
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80c0 	beq.w	8004b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b66      	ldr	r3, [pc, #408]	; (8004b20 <HAL_GPIO_Init+0x324>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a65      	ldr	r2, [pc, #404]	; (8004b20 <HAL_GPIO_Init+0x324>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b63      	ldr	r3, [pc, #396]	; (8004b20 <HAL_GPIO_Init+0x324>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499e:	4a61      	ldr	r2, [pc, #388]	; (8004b24 <HAL_GPIO_Init+0x328>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a58      	ldr	r2, [pc, #352]	; (8004b28 <HAL_GPIO_Init+0x32c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d037      	beq.n	8004a3a <HAL_GPIO_Init+0x23e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_GPIO_Init+0x330>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_GPIO_Init+0x23a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a56      	ldr	r2, [pc, #344]	; (8004b30 <HAL_GPIO_Init+0x334>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d02b      	beq.n	8004a32 <HAL_GPIO_Init+0x236>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_GPIO_Init+0x338>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d025      	beq.n	8004a2e <HAL_GPIO_Init+0x232>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a54      	ldr	r2, [pc, #336]	; (8004b38 <HAL_GPIO_Init+0x33c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <HAL_GPIO_Init+0x22e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a53      	ldr	r2, [pc, #332]	; (8004b3c <HAL_GPIO_Init+0x340>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d019      	beq.n	8004a26 <HAL_GPIO_Init+0x22a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <HAL_GPIO_Init+0x344>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a51      	ldr	r2, [pc, #324]	; (8004b44 <HAL_GPIO_Init+0x348>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00d      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a50      	ldr	r2, [pc, #320]	; (8004b48 <HAL_GPIO_Init+0x34c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4f      	ldr	r2, [pc, #316]	; (8004b4c <HAL_GPIO_Init+0x350>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <HAL_GPIO_Init+0x21a>
 8004a12:	2309      	movs	r3, #9
 8004a14:	e012      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a16:	230a      	movs	r3, #10
 8004a18:	e010      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	e00e      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a1e:	2307      	movs	r3, #7
 8004a20:	e00c      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e00a      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x240>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f002 0203 	and.w	r2, r2, #3
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4935      	ldr	r1, [pc, #212]	; (8004b24 <HAL_GPIO_Init+0x328>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a7e:	4a34      	ldr	r2, [pc, #208]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aa8:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aae:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004afc:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <HAL_GPIO_Init+0x354>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	f67f ae84 	bls.w	8004818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020c00 	.word	0x40020c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40021400 	.word	0x40021400
 8004b40:	40021800 	.word	0x40021800
 8004b44:	40021c00 	.word	0x40021c00
 8004b48:	40022000 	.word	0x40022000
 8004b4c:	40022400 	.word	0x40022400
 8004b50:	40013c00 	.word	0x40013c00

08004b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
 8004b70:	e001      	b.n	8004b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
 8004b90:	4613      	mov	r3, r2
 8004b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b94:	787b      	ldrb	r3, [r7, #1]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9a:	887a      	ldrh	r2, [r7, #2]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ba0:	e003      	b.n	8004baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ba2:	887b      	ldrh	r3, [r7, #2]
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	619a      	str	r2, [r3, #24]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bc8:	887a      	ldrh	r2, [r7, #2]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	041a      	lsls	r2, r3, #16
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43d9      	mvns	r1, r3
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	619a      	str	r2, [r3, #24]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e12b      	b.n	8004e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fcec 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c50:	f000 ffb0 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8004c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4a81      	ldr	r2, [pc, #516]	; (8004e60 <HAL_I2C_Init+0x274>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d807      	bhi.n	8004c70 <HAL_I2C_Init+0x84>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a80      	ldr	r2, [pc, #512]	; (8004e64 <HAL_I2C_Init+0x278>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e006      	b.n	8004c7e <HAL_I2C_Init+0x92>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a7d      	ldr	r2, [pc, #500]	; (8004e68 <HAL_I2C_Init+0x27c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bf94      	ite	ls
 8004c78:	2301      	movls	r3, #1
 8004c7a:	2300      	movhi	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0e7      	b.n	8004e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a78      	ldr	r2, [pc, #480]	; (8004e6c <HAL_I2C_Init+0x280>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0c9b      	lsrs	r3, r3, #18
 8004c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	; (8004e60 <HAL_I2C_Init+0x274>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d802      	bhi.n	8004cc0 <HAL_I2C_Init+0xd4>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	e009      	b.n	8004cd4 <HAL_I2C_Init+0xe8>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	4a69      	ldr	r2, [pc, #420]	; (8004e70 <HAL_I2C_Init+0x284>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	495c      	ldr	r1, [pc, #368]	; (8004e60 <HAL_I2C_Init+0x274>)
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d819      	bhi.n	8004d28 <HAL_I2C_Init+0x13c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1e59      	subs	r1, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d08:	400b      	ands	r3, r1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_I2C_Init+0x138>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e59      	subs	r1, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	e051      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d24:	2304      	movs	r3, #4
 8004d26:	e04f      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d111      	bne.n	8004d54 <HAL_I2C_Init+0x168>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e012      	b.n	8004d7a <HAL_I2C_Init+0x18e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	0099      	lsls	r1, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Init+0x196>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e022      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_I2C_Init+0x1bc>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e58      	subs	r0, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	440b      	add	r3, r1
 8004d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da6:	e00f      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	0099      	lsls	r1, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6809      	ldr	r1, [r1, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6911      	ldr	r1, [r2, #16]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68d2      	ldr	r2, [r2, #12]
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	000186a0 	.word	0x000186a0
 8004e64:	001e847f 	.word	0x001e847f
 8004e68:	003d08ff 	.word	0x003d08ff
 8004e6c:	431bde83 	.word	0x431bde83
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e034      	b.n	8004ef0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f245 5255 	movw	r2, #21845	; 0x5555
 8004e98:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6852      	ldr	r2, [r2, #4]
 8004ea2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6892      	ldr	r2, [r2, #8]
 8004eac:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004eae:	f7fd f8bb 	bl	8002028 <HAL_GetTick>
 8004eb2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004eb4:	e00f      	b.n	8004ed6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004eb6:	f7fd f8b7 	bl	8002028 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b31      	cmp	r3, #49	; 0x31
 8004ec2:	d908      	bls.n	8004ed6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e00c      	b.n	8004ef0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e8      	bne.n	8004eb6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004f08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0bf      	b.n	80050aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc fbd4 	bl	80016ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6999      	ldr	r1, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6899      	ldr	r1, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b4a      	ldr	r3, [pc, #296]	; (80050b4 <HAL_LTDC_Init+0x19c>)
 8004f8c:	400b      	ands	r3, r1
 8004f8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68d9      	ldr	r1, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_LTDC_Init+0x19c>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68d9      	ldr	r1, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6919      	ldr	r1, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b33      	ldr	r3, [pc, #204]	; (80050b4 <HAL_LTDC_Init+0x19c>)
 8004fe8:	400b      	ands	r3, r1
 8004fea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6959      	ldr	r1, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_LTDC_Init+0x19c>)
 8005016:	400b      	ands	r3, r1
 8005018:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6959      	ldr	r1, [r3, #20]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0206 	orr.w	r2, r2, #6
 8005086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	f000f800 	.word	0xf000f800

080050b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d023      	beq.n	8005122 <HAL_LTDC_IRQHandler+0x6a>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01e      	beq.n	8005122 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2204      	movs	r2, #4
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f86f 	bl	8005200 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d023      	beq.n	8005174 <HAL_LTDC_IRQHandler+0xbc>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01e      	beq.n	8005174 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0202 	bic.w	r2, r2, #2
 8005144:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2202      	movs	r2, #2
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005154:	f043 0202 	orr.w	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2204      	movs	r2, #4
 8005162:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f846 	bl	8005200 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01b      	beq.n	80051b6 <HAL_LTDC_IRQHandler+0xfe>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f82f 	bl	8005214 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01b      	beq.n	80051f8 <HAL_LTDC_IRQHandler+0x140>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0208 	bic.w	r2, r2, #8
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2208      	movs	r2, #8
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f818 	bl	8005228 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800523c:	b5b0      	push	{r4, r5, r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_LTDC_ConfigLayer+0x1a>
 8005252:	2302      	movs	r3, #2
 8005254:	e02c      	b.n	80052b0 <HAL_LTDC_ConfigLayer+0x74>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2134      	movs	r1, #52	; 0x34
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800527e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f811 	bl	80052b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bdb0      	pop	{r4, r5, r7, pc}

080052b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d4:	4413      	add	r3, r2
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	01db      	lsls	r3, r3, #7
 80052e4:	4413      	add	r3, r2
 80052e6:	3384      	adds	r3, #132	; 0x84
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	4611      	mov	r1, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	01d2      	lsls	r2, r2, #7
 80052f4:	440a      	add	r2, r1
 80052f6:	3284      	adds	r2, #132	; 0x84
 80052f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530e:	4413      	add	r3, r2
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	01db      	lsls	r3, r3, #7
 800531c:	440b      	add	r3, r1
 800531e:	3384      	adds	r3, #132	; 0x84
 8005320:	4619      	mov	r1, r3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005336:	4413      	add	r3, r2
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	01db      	lsls	r3, r3, #7
 8005346:	4413      	add	r3, r2
 8005348:	3384      	adds	r3, #132	; 0x84
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	4611      	mov	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	01d2      	lsls	r2, r2, #7
 8005356:	440a      	add	r2, r1
 8005358:	3284      	adds	r2, #132	; 0x84
 800535a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800535e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536e:	4413      	add	r3, r2
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	440b      	add	r3, r1
 800537e:	3384      	adds	r3, #132	; 0x84
 8005380:	4619      	mov	r1, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4313      	orrs	r3, r2
 8005386:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	01db      	lsls	r3, r3, #7
 8005392:	4413      	add	r3, r2
 8005394:	3384      	adds	r3, #132	; 0x84
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4611      	mov	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	01d2      	lsls	r2, r2, #7
 80053a2:	440a      	add	r2, r1
 80053a4:	3284      	adds	r2, #132	; 0x84
 80053a6:	f023 0307 	bic.w	r3, r3, #7
 80053aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	01db      	lsls	r3, r3, #7
 80053b6:	4413      	add	r3, r2
 80053b8:	3384      	adds	r3, #132	; 0x84
 80053ba:	461a      	mov	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	01db      	lsls	r3, r3, #7
 80053e8:	4413      	add	r3, r2
 80053ea:	3384      	adds	r3, #132	; 0x84
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	01db      	lsls	r3, r3, #7
 80053f8:	4413      	add	r3, r2
 80053fa:	3384      	adds	r3, #132	; 0x84
 80053fc:	461a      	mov	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005408:	461a      	mov	r2, r3
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	431a      	orrs	r2, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	01db      	lsls	r3, r3, #7
 800541c:	440b      	add	r3, r1
 800541e:	3384      	adds	r3, #132	; 0x84
 8005420:	4619      	mov	r1, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	4413      	add	r3, r2
 8005434:	3384      	adds	r3, #132	; 0x84
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	4611      	mov	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	01d2      	lsls	r2, r2, #7
 8005442:	440a      	add	r2, r1
 8005444:	3284      	adds	r2, #132	; 0x84
 8005446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800544a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	01db      	lsls	r3, r3, #7
 8005456:	4413      	add	r3, r2
 8005458:	3384      	adds	r3, #132	; 0x84
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	01db      	lsls	r3, r3, #7
 800546c:	4413      	add	r3, r2
 800546e:	3384      	adds	r3, #132	; 0x84
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	4611      	mov	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	01d2      	lsls	r2, r2, #7
 800547c:	440a      	add	r2, r1
 800547e:	3284      	adds	r2, #132	; 0x84
 8005480:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	6809      	ldr	r1, [r1, #0]
 8005496:	4608      	mov	r0, r1
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	01c9      	lsls	r1, r1, #7
 800549c:	4401      	add	r1, r0
 800549e:	3184      	adds	r1, #132	; 0x84
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	4413      	add	r3, r2
 80054b0:	3384      	adds	r3, #132	; 0x84
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	01db      	lsls	r3, r3, #7
 80054be:	4413      	add	r3, r2
 80054c0:	3384      	adds	r3, #132	; 0x84
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	01db      	lsls	r3, r3, #7
 80054d2:	4413      	add	r3, r2
 80054d4:	3384      	adds	r3, #132	; 0x84
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80054e6:	2304      	movs	r3, #4
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e01b      	b.n	8005524 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d102      	bne.n	80054fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80054f4:	2303      	movs	r3, #3
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e014      	b.n	8005524 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d00b      	beq.n	800551a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005506:	2b02      	cmp	r3, #2
 8005508:	d007      	beq.n	800551a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800550e:	2b03      	cmp	r3, #3
 8005510:	d003      	beq.n	800551a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005516:	2b07      	cmp	r3, #7
 8005518:	d102      	bne.n	8005520 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800551a:	2302      	movs	r3, #2
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	e001      	b.n	8005524 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	01db      	lsls	r3, r3, #7
 800552e:	4413      	add	r3, r2
 8005530:	3384      	adds	r3, #132	; 0x84
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	4611      	mov	r1, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	01d2      	lsls	r2, r2, #7
 800553e:	440a      	add	r2, r1
 8005540:	3284      	adds	r2, #132	; 0x84
 8005542:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	041a      	lsls	r2, r3, #16
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	1acb      	subs	r3, r1, r3
 800555e:	69f9      	ldr	r1, [r7, #28]
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	3303      	adds	r3, #3
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6809      	ldr	r1, [r1, #0]
 800556a:	4608      	mov	r0, r1
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	01c9      	lsls	r1, r1, #7
 8005570:	4401      	add	r1, r0
 8005572:	3184      	adds	r1, #132	; 0x84
 8005574:	4313      	orrs	r3, r2
 8005576:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	01db      	lsls	r3, r3, #7
 8005582:	4413      	add	r3, r2
 8005584:	3384      	adds	r3, #132	; 0x84
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4611      	mov	r1, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	01d2      	lsls	r2, r2, #7
 8005592:	440a      	add	r2, r1
 8005594:	3284      	adds	r2, #132	; 0x84
 8005596:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	461a      	mov	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	4413      	add	r3, r2
 80055c2:	3384      	adds	r3, #132	; 0x84
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	4611      	mov	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	01d2      	lsls	r2, r2, #7
 80055d0:	440a      	add	r2, r1
 80055d2:	3284      	adds	r2, #132	; 0x84
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6013      	str	r3, [r2, #0]
}
 80055da:	bf00      	nop
 80055dc:	3724      	adds	r7, #36	; 0x24
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_PWREx_EnableOverDrive+0x90>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_PWREx_EnableOverDrive+0x90>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	6413      	str	r3, [r2, #64]	; 0x40
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_PWREx_EnableOverDrive+0x90>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_PWREx_EnableOverDrive+0x94>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005614:	f7fc fd08 	bl	8002028 <HAL_GetTick>
 8005618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800561a:	e009      	b.n	8005630 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800561c:	f7fc fd04 	bl	8002028 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800562a:	d901      	bls.n	8005630 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e01f      	b.n	8005670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_PWREx_EnableOverDrive+0x98>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d1ee      	bne.n	800561c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005644:	f7fc fcf0 	bl	8002028 <HAL_GetTick>
 8005648:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800564a:	e009      	b.n	8005660 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800564c:	f7fc fcec 	bl	8002028 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565a:	d901      	bls.n	8005660 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e007      	b.n	8005670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <HAL_PWREx_EnableOverDrive+0x98>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800566c:	d1ee      	bne.n	800564c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40023800 	.word	0x40023800
 800567c:	420e0040 	.word	0x420e0040
 8005680:	40007000 	.word	0x40007000
 8005684:	420e0044 	.word	0x420e0044

08005688 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005690:	f7fc fcca 	bl	8002028 <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e069      	b.n	8005774 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fc f859 	bl	800176c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80056ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f85e 	bl	8005780 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	021a      	lsls	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2120      	movs	r1, #32
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f856 	bl	800579c <QSPI_WaitFlagStateUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80056f4:	7afb      	ldrb	r3, [r7, #11]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d137      	bne.n	800576a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6852      	ldr	r2, [r2, #4]
 800570c:	0611      	lsls	r1, r2, #24
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68d2      	ldr	r2, [r2, #12]
 8005712:	4311      	orrs	r1, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	69d2      	ldr	r2, [r2, #28]
 8005718:	4311      	orrs	r1, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6a12      	ldr	r2, [r2, #32]
 800571e:	4311      	orrs	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	430b      	orrs	r3, r1
 8005726:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_QSPI_Init+0xf4>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6912      	ldr	r2, [r2, #16]
 8005736:	0411      	lsls	r1, r2, #16
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6952      	ldr	r2, [r2, #20]
 800573c:	4311      	orrs	r1, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6992      	ldr	r2, [r2, #24]
 8005742:	4311      	orrs	r1, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	430b      	orrs	r3, r1
 800574a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005772:	7afb      	ldrb	r3, [r7, #11]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	ffe0f8fe 	.word	0xffe0f8fe

08005780 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80057ac:	e01a      	b.n	80057e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d016      	beq.n	80057e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fc fc37 	bl	8002028 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2204      	movs	r2, #4
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e00e      	b.n	8005802 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf14      	ite	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	2300      	moveq	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d1d6      	bne.n	80057ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0cc      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005820:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90c      	bls.n	8005848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b63      	ldr	r3, [pc, #396]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0b8      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005860:	4b59      	ldr	r3, [pc, #356]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a58      	ldr	r2, [pc, #352]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800586a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005878:	4b53      	ldr	r3, [pc, #332]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a52      	ldr	r2, [pc, #328]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b50      	ldr	r3, [pc, #320]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	494d      	ldr	r1, [pc, #308]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d044      	beq.n	800592c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	4b47      	ldr	r3, [pc, #284]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d119      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e07f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d003      	beq.n	80058ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d107      	bne.n	80058da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ca:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e06f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058da:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e067      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ea:	4b37      	ldr	r3, [pc, #220]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4934      	ldr	r1, [pc, #208]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058fc:	f7fc fb94 	bl	8002028 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	e00a      	b.n	800591a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005904:	f7fc fb90 	bl	8002028 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e04f      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591a:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 020c 	and.w	r2, r3, #12
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	429a      	cmp	r2, r3
 800592a:	d1eb      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d20c      	bcs.n	8005954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e032      	b.n	80059ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4916      	ldr	r1, [pc, #88]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	490e      	ldr	r1, [pc, #56]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005992:	f000 f821 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005996:	4602      	mov	r2, r0
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	490a      	ldr	r1, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x1c0>)
 80059a4:	5ccb      	ldrb	r3, [r1, r3]
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x1c8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fc f9f2 	bl	8001d9c <HAL_InitTick>

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023c00 	.word	0x40023c00
 80059c8:	40023800 	.word	0x40023800
 80059cc:	0800a1cc 	.word	0x0800a1cc
 80059d0:	20000000 	.word	0x20000000
 80059d4:	20000004 	.word	0x20000004

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	2300      	movs	r3, #0
 80059ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f0:	4b67      	ldr	r3, [pc, #412]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d00d      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x40>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	f200 80bd 	bhi.w	8005b7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x34>
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a0a:	e0b7      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a0c:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a0e:	60bb      	str	r3, [r7, #8]
       break;
 8005a10:	e0b7      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a12:	4b61      	ldr	r3, [pc, #388]	; (8005b98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a14:	60bb      	str	r3, [r7, #8]
      break;
 8005a16:	e0b4      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a18:	4b5d      	ldr	r3, [pc, #372]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a22:	4b5b      	ldr	r3, [pc, #364]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d04d      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b58      	ldr	r3, [pc, #352]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a3e:	f04f 0100 	mov.w	r1, #0
 8005a42:	ea02 0800 	and.w	r8, r2, r0
 8005a46:	ea03 0901 	and.w	r9, r3, r1
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	f04f 0300 	mov.w	r3, #0
 8005a56:	014b      	lsls	r3, r1, #5
 8005a58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a5c:	0142      	lsls	r2, r0, #5
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4619      	mov	r1, r3
 8005a62:	ebb0 0008 	subs.w	r0, r0, r8
 8005a66:	eb61 0109 	sbc.w	r1, r1, r9
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	018b      	lsls	r3, r1, #6
 8005a74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a78:	0182      	lsls	r2, r0, #6
 8005a7a:	1a12      	subs	r2, r2, r0
 8005a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8005a80:	f04f 0000 	mov.w	r0, #0
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	00d9      	lsls	r1, r3, #3
 8005a8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a8e:	00d0      	lsls	r0, r2, #3
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	eb12 0208 	adds.w	r2, r2, r8
 8005a98:	eb43 0309 	adc.w	r3, r3, r9
 8005a9c:	f04f 0000 	mov.w	r0, #0
 8005aa0:	f04f 0100 	mov.w	r1, #0
 8005aa4:	0259      	lsls	r1, r3, #9
 8005aa6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005aaa:	0250      	lsls	r0, r2, #9
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	f7fa fba0 	bl	8000200 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e04a      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	099b      	lsrs	r3, r3, #6
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	ea02 0400 	and.w	r4, r2, r0
 8005ae2:	ea03 0501 	and.w	r5, r3, r1
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	014b      	lsls	r3, r1, #5
 8005af4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005af8:	0142      	lsls	r2, r0, #5
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	1b00      	subs	r0, r0, r4
 8005b00:	eb61 0105 	sbc.w	r1, r1, r5
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	018b      	lsls	r3, r1, #6
 8005b0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b12:	0182      	lsls	r2, r0, #6
 8005b14:	1a12      	subs	r2, r2, r0
 8005b16:	eb63 0301 	sbc.w	r3, r3, r1
 8005b1a:	f04f 0000 	mov.w	r0, #0
 8005b1e:	f04f 0100 	mov.w	r1, #0
 8005b22:	00d9      	lsls	r1, r3, #3
 8005b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b28:	00d0      	lsls	r0, r2, #3
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	1912      	adds	r2, r2, r4
 8005b30:	eb45 0303 	adc.w	r3, r5, r3
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	0299      	lsls	r1, r3, #10
 8005b3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b42:	0290      	lsls	r0, r2, #10
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f7fa fb54 	bl	8000200 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	60bb      	str	r3, [r7, #8]
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b7e:	60bb      	str	r3, [r7, #8]
      break;
 8005b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b82:	68bb      	ldr	r3, [r7, #8]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	007a1200 	.word	0x007a1200

08005b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bb8:	f7ff fff0 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	0a9b      	lsrs	r3, r3, #10
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	0800a1dc 	.word	0x0800a1dc

08005bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005be0:	f7ff ffdc 	bl	8005b9c <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	0b5b      	lsrs	r3, r3, #13
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4903      	ldr	r1, [pc, #12]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	0800a1dc 	.word	0x0800a1dc

08005c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	220f      	movs	r2, #15
 8005c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0203 	and.w	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c38:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_RCC_GetClockConfig+0x5c>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <HAL_RCC_GetClockConfig+0x60>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	601a      	str	r2, [r3, #0]
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40023c00 	.word	0x40023c00

08005c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c90:	4b66      	ldr	r3, [pc, #408]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c96:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	4963      	ldr	r1, [pc, #396]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005cb2:	4b5e      	ldr	r3, [pc, #376]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	495a      	ldr	r1, [pc, #360]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d075      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc f999 	bl	8002028 <HAL_GetTick>
 8005cf6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cfa:	f7fc f995 	bl	8002028 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e1dc      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0c:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	019a      	lsls	r2, r3, #6
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	071b      	lsls	r3, r3, #28
 8005d30:	493e      	ldr	r1, [pc, #248]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01f      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d44:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d4a:	0f1b      	lsrs	r3, r3, #28
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	019a      	lsls	r2, r3, #6
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	071b      	lsls	r3, r3, #28
 8005d64:	4931      	ldr	r1, [pc, #196]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d6c:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d72:	f023 021f 	bic.w	r2, r3, #31
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	492b      	ldr	r1, [pc, #172]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	019a      	lsls	r2, r3, #6
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	071b      	lsls	r3, r3, #28
 8005da4:	4921      	ldr	r1, [pc, #132]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dac:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005db2:	f7fc f939 	bl	8002028 <HAL_GetTick>
 8005db6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005db8:	e008      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dba:	f7fc f935 	bl	8002028 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e17c      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d112      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80ce 	beq.w	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e06:	f040 80c8 	bne.w	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e10:	f7fc f90a 	bl	8002028 <HAL_GetTick>
 8005e14:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e16:	e00f      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e18:	f7fc f906 	bl	8002028 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d908      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e14d      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	42470068 	.word	0x42470068
 8005e34:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e38:	4ba5      	ldr	r3, [pc, #660]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e44:	d0e8      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02e      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005e52:	4b9f      	ldr	r3, [pc, #636]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e64:	4b9a      	ldr	r3, [pc, #616]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	0f1b      	lsrs	r3, r3, #28
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	019a      	lsls	r2, r3, #6
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	071b      	lsls	r3, r3, #28
 8005e8e:	4990      	ldr	r1, [pc, #576]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e96:	4b8e      	ldr	r3, [pc, #568]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4989      	ldr	r1, [pc, #548]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02c      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ebc:	4b84      	ldr	r3, [pc, #528]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ece:	4b80      	ldr	r3, [pc, #512]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	0e1b      	lsrs	r3, r3, #24
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	019a      	lsls	r2, r3, #6
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	431a      	orrs	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	071b      	lsls	r3, r3, #28
 8005ef8:	4975      	ldr	r1, [pc, #468]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f00:	4b73      	ldr	r3, [pc, #460]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	4970      	ldr	r1, [pc, #448]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d024      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2a:	d11f      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f2c:	4b68      	ldr	r3, [pc, #416]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	0e1b      	lsrs	r3, r3, #24
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f3a:	4b65      	ldr	r3, [pc, #404]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	0f1b      	lsrs	r3, r3, #28
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	019a      	lsls	r2, r3, #6
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	3b01      	subs	r3, #1
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	061b      	lsls	r3, r3, #24
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	071b      	lsls	r3, r3, #28
 8005f64:	495a      	ldr	r1, [pc, #360]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f6c:	4b59      	ldr	r3, [pc, #356]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f72:	f7fc f859 	bl	8002028 <HAL_GetTick>
 8005f76:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f7a:	f7fc f855 	bl	8002028 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e09c      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8c:	4b50      	ldr	r3, [pc, #320]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f98:	d1ef      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8083 	beq.w	80060ae <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	4b48      	ldr	r3, [pc, #288]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	4a47      	ldr	r2, [pc, #284]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb8:	4b45      	ldr	r3, [pc, #276]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fc4:	4b44      	ldr	r3, [pc, #272]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a43      	ldr	r2, [pc, #268]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fd0:	f7fc f82a 	bl	8002028 <HAL_GetTick>
 8005fd4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fd8:	f7fc f826 	bl	8002028 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e06d      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fea:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ff6:	4b36      	ldr	r3, [pc, #216]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d02f      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	429a      	cmp	r2, r3
 8006012:	d028      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006014:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800601e:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800602a:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006030:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d114      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800603c:	f7fb fff4 	bl	8002028 <HAL_GetTick>
 8006040:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006042:	e00a      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fb fff0 	bl	8002028 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e035      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0ee      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006072:	d10d      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	4911      	ldr	r1, [pc, #68]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
 800608e:	e005      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006096:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800609a:	6093      	str	r3, [r2, #8]
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800609e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a8:	4909      	ldr	r1, [pc, #36]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80060c2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800
 80060d4:	42470070 	.word	0x42470070
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42470e40 	.word	0x42470e40
 80060e0:	424711e0 	.word	0x424711e0

080060e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e270      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d075      	beq.n	80061ee <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006102:	4ba3      	ldr	r3, [pc, #652]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b04      	cmp	r3, #4
 800610c:	d00c      	beq.n	8006128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4ba0      	ldr	r3, [pc, #640]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006116:	2b08      	cmp	r3, #8
 8006118:	d112      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800611a:	4b9d      	ldr	r3, [pc, #628]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006126:	d10b      	bne.n	8006140 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	4b99      	ldr	r3, [pc, #612]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05b      	beq.n	80061ec <HAL_RCC_OscConfig+0x108>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d157      	bne.n	80061ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e24b      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006148:	d106      	bne.n	8006158 <HAL_RCC_OscConfig+0x74>
 800614a:	4b91      	ldr	r3, [pc, #580]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a90      	ldr	r2, [pc, #576]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e01d      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006160:	d10c      	bne.n	800617c <HAL_RCC_OscConfig+0x98>
 8006162:	4b8b      	ldr	r3, [pc, #556]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a8a      	ldr	r2, [pc, #552]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4b88      	ldr	r3, [pc, #544]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a87      	ldr	r2, [pc, #540]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e00b      	b.n	8006194 <HAL_RCC_OscConfig+0xb0>
 800617c:	4b84      	ldr	r3, [pc, #528]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a83      	ldr	r2, [pc, #524]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	4b81      	ldr	r3, [pc, #516]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a80      	ldr	r2, [pc, #512]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 800618e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fb ff44 	bl	8002028 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a4:	f7fb ff40 	bl	8002028 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b64      	cmp	r3, #100	; 0x64
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e210      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061b6:	4b76      	ldr	r3, [pc, #472]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0xc0>
 80061c2:	e014      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fb ff30 	bl	8002028 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fb ff2c 	bl	8002028 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b64      	cmp	r3, #100	; 0x64
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e1fc      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061de:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0xe8>
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d063      	beq.n	80062c2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061fa:	4b65      	ldr	r3, [pc, #404]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b62      	ldr	r3, [pc, #392]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800620e:	2b08      	cmp	r3, #8
 8006210:	d11c      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006212:	4b5f      	ldr	r3, [pc, #380]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d116      	bne.n	800624c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	4b5c      	ldr	r3, [pc, #368]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d001      	beq.n	8006236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e1d0      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006236:	4b56      	ldr	r3, [pc, #344]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4952      	ldr	r1, [pc, #328]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006246:	4313      	orrs	r3, r2
 8006248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	e03a      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006254:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCC_OscConfig+0x2b0>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fb fee5 	bl	8002028 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006262:	f7fb fee1 	bl	8002028 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1b1      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006274:	4b46      	ldr	r3, [pc, #280]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006280:	4b43      	ldr	r3, [pc, #268]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4940      	ldr	r1, [pc, #256]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006290:	4313      	orrs	r3, r2
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	e015      	b.n	80062c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006296:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <HAL_RCC_OscConfig+0x2b0>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fb fec4 	bl	8002028 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062a4:	f7fb fec0 	bl	8002028 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e190      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d030      	beq.n	8006330 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062d6:	4b30      	ldr	r3, [pc, #192]	; (8006398 <HAL_RCC_OscConfig+0x2b4>)
 80062d8:	2201      	movs	r2, #1
 80062da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fb fea4 	bl	8002028 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e4:	f7fb fea0 	bl	8002028 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e170      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062f6:	4b26      	ldr	r3, [pc, #152]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x200>
 8006302:	e015      	b.n	8006330 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006304:	4b24      	ldr	r3, [pc, #144]	; (8006398 <HAL_RCC_OscConfig+0x2b4>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fb fe8d 	bl	8002028 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006312:	f7fb fe89 	bl	8002028 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e159      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f0      	bne.n	8006312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a0 	beq.w	800647e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006342:	4b13      	ldr	r3, [pc, #76]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635c:	6413      	str	r3, [r2, #64]	; 0x40
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_RCC_OscConfig+0x2b8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d121      	bne.n	80063be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b08      	ldr	r3, [pc, #32]	; (800639c <HAL_RCC_OscConfig+0x2b8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a07      	ldr	r2, [pc, #28]	; (800639c <HAL_RCC_OscConfig+0x2b8>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006386:	f7fb fe4f 	bl	8002028 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	e011      	b.n	80063b2 <HAL_RCC_OscConfig+0x2ce>
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
 8006394:	42470000 	.word	0x42470000
 8006398:	42470e80 	.word	0x42470e80
 800639c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a0:	f7fb fe42 	bl	8002028 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e112      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b2:	4b8b      	ldr	r3, [pc, #556]	; (80065e0 <HAL_RCC_OscConfig+0x4fc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d106      	bne.n	80063d4 <HAL_RCC_OscConfig+0x2f0>
 80063c6:	4b87      	ldr	r3, [pc, #540]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	4a86      	ldr	r2, [pc, #536]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063cc:	f043 0301 	orr.w	r3, r3, #1
 80063d0:	6713      	str	r3, [r2, #112]	; 0x70
 80063d2:	e01c      	b.n	800640e <HAL_RCC_OscConfig+0x32a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b05      	cmp	r3, #5
 80063da:	d10c      	bne.n	80063f6 <HAL_RCC_OscConfig+0x312>
 80063dc:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	4a80      	ldr	r2, [pc, #512]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	6713      	str	r3, [r2, #112]	; 0x70
 80063e8:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ec:	4a7d      	ldr	r2, [pc, #500]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063ee:	f043 0301 	orr.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	; 0x70
 80063f4:	e00b      	b.n	800640e <HAL_RCC_OscConfig+0x32a>
 80063f6:	4b7b      	ldr	r3, [pc, #492]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a7a      	ldr	r2, [pc, #488]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	4b78      	ldr	r3, [pc, #480]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a77      	ldr	r2, [pc, #476]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d015      	beq.n	8006442 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006416:	f7fb fe07 	bl	8002028 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800641c:	e00a      	b.n	8006434 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800641e:	f7fb fe03 	bl	8002028 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f241 3288 	movw	r2, #5000	; 0x1388
 800642c:	4293      	cmp	r3, r2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e0d1      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006434:	4b6b      	ldr	r3, [pc, #428]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0ee      	beq.n	800641e <HAL_RCC_OscConfig+0x33a>
 8006440:	e014      	b.n	800646c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fb fdf1 	bl	8002028 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006448:	e00a      	b.n	8006460 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800644a:	f7fb fded 	bl	8002028 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	; 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e0bb      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006460:	4b60      	ldr	r3, [pc, #384]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1ee      	bne.n	800644a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006472:	4b5c      	ldr	r3, [pc, #368]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80a7 	beq.w	80065d6 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006488:	4b56      	ldr	r3, [pc, #344]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 030c 	and.w	r3, r3, #12
 8006490:	2b08      	cmp	r3, #8
 8006492:	d060      	beq.n	8006556 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d145      	bne.n	8006528 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800649c:	4b52      	ldr	r3, [pc, #328]	; (80065e8 <HAL_RCC_OscConfig+0x504>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a2:	f7fb fdc1 	bl	8002028 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064aa:	f7fb fdbd 	bl	8002028 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e08d      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064bc:	4b49      	ldr	r3, [pc, #292]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	019b      	lsls	r3, r3, #6
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	3b01      	subs	r3, #1
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	061b      	lsls	r3, r3, #24
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	071b      	lsls	r3, r3, #28
 80064f4:	493b      	ldr	r1, [pc, #236]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064fa:	4b3b      	ldr	r3, [pc, #236]	; (80065e8 <HAL_RCC_OscConfig+0x504>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fb fd92 	bl	8002028 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006508:	f7fb fd8e 	bl	8002028 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e05e      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651a:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x424>
 8006526:	e056      	b.n	80065d6 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006528:	4b2f      	ldr	r3, [pc, #188]	; (80065e8 <HAL_RCC_OscConfig+0x504>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fb fd7b 	bl	8002028 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006536:	f7fb fd77 	bl	8002028 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e047      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006548:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <HAL_RCC_OscConfig+0x452>
 8006554:	e03f      	b.n	80065d6 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e03a      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006562:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <HAL_RCC_OscConfig+0x500>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d030      	beq.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d129      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d122      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006592:	4013      	ands	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006598:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800659a:	4293      	cmp	r3, r2
 800659c:	d119      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	3b01      	subs	r3, #1
 80065ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10f      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d107      	bne.n	80065d2 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40007000 	.word	0x40007000
 80065e4:	40023800 	.word	0x40023800
 80065e8:	42470060 	.word	0x42470060

080065ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e022      	b.n	8006644 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb f925 	bl	8001860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2203      	movs	r2, #3
 800661a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f814 	bl	800664c <HAL_SD_InitCard>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e00a      	b.n	8006644 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b08e      	sub	sp, #56	; 0x38
 8006650:	af04      	add	r7, sp, #16
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006668:	2376      	movs	r3, #118	; 0x76
 800666a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681d      	ldr	r5, [r3, #0]
 8006670:	466c      	mov	r4, sp
 8006672:	f107 0314 	add.w	r3, r7, #20
 8006676:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800667a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006684:	4628      	mov	r0, r5
 8006686:	f002 fb11 	bl	8008cac <SDIO_Init>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e04c      	b.n	8006736 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <HAL_SD_InitCard+0xf4>)
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f002 fb49 	bl	8008d3e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80066ac:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_SD_InitCard+0xf4>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 ffee 	bl	8007694 <SD_PowerON>
 80066b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e02e      	b.n	8006736 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 ff0f 	bl	80074fc <SD_InitCard>
 80066de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e01b      	b.n	8006736 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006706:	4618      	mov	r0, r3
 8006708:	f002 fbac 	bl	8008e64 <SDMMC_CmdBlockLength>
 800670c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <HAL_SD_InitCard+0xf8>)
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3728      	adds	r7, #40	; 0x28
 800673a:	46bd      	mov	sp, r7
 800673c:	bdb0      	pop	{r4, r5, r7, pc}
 800673e:	bf00      	nop
 8006740:	422580a0 	.word	0x422580a0
 8006744:	004005ff 	.word	0x004005ff

08006748 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08c      	sub	sp, #48	; 0x30
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0be      	b.n	80068ee <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	f040 80b7 	bne.w	80068ec <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	429a      	cmp	r2, r3
 8006790:	d907      	bls.n	80067a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0a5      	b.n	80068ee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80067c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4a4c      	ldr	r2, [pc, #304]	; (80068f8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80067c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a4b      	ldr	r2, [pc, #300]	; (80068fc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80067d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2200      	movs	r2, #0
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3380      	adds	r3, #128	; 0x80
 8006808:	4619      	mov	r1, r3
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	f7fc fd75 	bl	8003300 <HAL_DMA_Start_IT>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a33      	ldr	r2, [pc, #204]	; (8006900 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e050      	b.n	80068ee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	2b01      	cmp	r3, #1
 8006858:	d002      	beq.n	8006860 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	025b      	lsls	r3, r3, #9
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	025b      	lsls	r3, r3, #9
 800686a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800686c:	2390      	movs	r3, #144	; 0x90
 800686e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006870:	2302      	movs	r3, #2
 8006872:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006874:	2300      	movs	r3, #0
 8006876:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006878:	2301      	movs	r3, #1
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f107 0210 	add.w	r2, r7, #16
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f002 fac0 	bl	8008e0c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d90a      	bls.n	80068a8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2282      	movs	r2, #130	; 0x82
 8006896:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 fb24 	bl	8008eec <SDMMC_CmdReadMultiBlock>
 80068a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068a6:	e009      	b.n	80068bc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2281      	movs	r2, #129	; 0x81
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b4:	4618      	mov	r0, r3
 80068b6:	f002 faf7 	bl	8008ea8 <SDMMC_CmdReadSingleBlock>
 80068ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e002      	b.n	80068ee <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
  }
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3730      	adds	r7, #48	; 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	0800730b 	.word	0x0800730b
 80068fc:	0800737d 	.word	0x0800737d
 8006900:	004005ff 	.word	0x004005ff
 8006904:	4225858c 	.word	0x4225858c

08006908 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08c      	sub	sp, #48	; 0x30
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0c1      	b.n	8006ab4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 80ba 	bne.w	8006ab2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	429a      	cmp	r2, r3
 8006950:	d907      	bls.n	8006962 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0a8      	b.n	8006ab4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2203      	movs	r2, #3
 8006966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 021a 	orr.w	r2, r2, #26
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	4a4d      	ldr	r2, [pc, #308]	; (8006abc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8006988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698e:	4a4c      	ldr	r2, [pc, #304]	; (8006ac0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8006990:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	2200      	movs	r2, #0
 8006998:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d002      	beq.n	80069a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	025b      	lsls	r3, r3, #9
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d90a      	bls.n	80069c4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22a0      	movs	r2, #160	; 0xa0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ba:	4618      	mov	r0, r3
 80069bc:	f002 fada 	bl	8008f74 <SDMMC_CmdWriteMultiBlock>
 80069c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80069c2:	e009      	b.n	80069d8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2290      	movs	r2, #144	; 0x90
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d0:	4618      	mov	r0, r3
 80069d2:	f002 faad 	bl	8008f30 <SDMMC_CmdWriteSingleBlock>
 80069d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d012      	beq.n	8006a04 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a38      	ldr	r2, [pc, #224]	; (8006ac4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e057      	b.n	8006ab4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006a04:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	2240      	movs	r2, #64	; 0x40
 8006a10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3380      	adds	r3, #128	; 0x80
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	025b      	lsls	r3, r3, #9
 8006a40:	089b      	lsrs	r3, r3, #2
 8006a42:	f7fc fc5d 	bl	8003300 <HAL_DMA_Start_IT>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01a      	beq.n	8006a82 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 021a 	bic.w	r2, r2, #26
 8006a5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e018      	b.n	8006ab4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a82:	f04f 33ff 	mov.w	r3, #4294967295
 8006a86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a8e:	2390      	movs	r3, #144	; 0x90
 8006a90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f107 0210 	add.w	r2, r7, #16
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f002 f9af 	bl	8008e0c <SDIO_ConfigData>

      return HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e000      	b.n	8006ab4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
  }
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3730      	adds	r7, #48	; 0x30
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	080072e1 	.word	0x080072e1
 8006ac0:	0800737d 	.word	0x0800737d
 8006ac4:	004005ff 	.word	0x004005ff
 8006ac8:	4225858c 	.word	0x4225858c

08006acc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <HAL_SD_IRQHandler+0x2e>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 ffed 	bl	8007ad2 <SD_Read_IT>
 8006af8:	e155      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 808f 	beq.w	8006c28 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006b22:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006b26:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0201 	bic.w	r2, r2, #1
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d039      	beq.n	8006bb6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_SD_IRQHandler+0x8a>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f002 fa2c 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 8006b60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d008      	beq.n	8006b7a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f91f 	bl	8006db8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_SD_IRQHandler+0xda>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 fe92 	bl	80098d0 <HAL_SD_RxCpltCallback>
 8006bac:	e0fb      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f002 fe84 	bl	80098bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bb4:	e0f7      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80f2 	beq.w	8006da6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d011      	beq.n	8006bf0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f002 f9f1 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 8006bd6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8e4 	bl	8006db8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 80d5 	bne.w	8006da6 <HAL_SD_IRQHandler+0x2da>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 80cf 	bne.w	8006da6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0208 	bic.w	r2, r2, #8
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 fe4b 	bl	80098bc <HAL_SD_TxCpltCallback>
}
 8006c26:	e0be      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_SD_IRQHandler+0x17c>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ff97 	bl	8007b74 <SD_Write_IT>
 8006c46:	e0ae      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80a7 	beq.w	8006da6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f043 0202 	orr.w	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	f043 0208 	orr.w	r2, r3, #8
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	f043 0210 	orr.w	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006cd8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 f96a 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f855 	bl	8006db8 <HAL_SD_ErrorCallback>
}
 8006d0e:	e04a      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d045      	beq.n	8006da6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <HAL_SD_IRQHandler+0x262>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d011      	beq.n	8006d52 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <HAL_SD_IRQHandler+0x2e4>)
 8006d34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fc fb38 	bl	80033b0 <HAL_DMA_Abort_IT>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d02f      	beq.n	8006da6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fb68 	bl	8007420 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006d50:	e029      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_SD_IRQHandler+0x29a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <HAL_SD_IRQHandler+0x2e8>)
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc fb1c 	bl	80033b0 <HAL_DMA_Abort_IT>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fb83 	bl	800748e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006d88:	e00d      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f002 fd82 	bl	80098a8 <HAL_SD_AbortCallback>
}
 8006da4:	e7ff      	b.n	8006da6 <HAL_SD_IRQHandler+0x2da>
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08007421 	.word	0x08007421
 8006db4:	0800748f 	.word	0x0800748f

08006db8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dda:	0f9b      	lsrs	r3, r3, #30
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de6:	0e9b      	lsrs	r3, r3, #26
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df8:	0e1b      	lsrs	r3, r3, #24
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e2c:	0d1b      	lsrs	r3, r3, #20
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e38:	0c1b      	lsrs	r3, r3, #16
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e4a:	0bdb      	lsrs	r3, r3, #15
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e5c:	0b9b      	lsrs	r3, r3, #14
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e6e:	0b5b      	lsrs	r3, r3, #13
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	0b1b      	lsrs	r3, r3, #12
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2200      	movs	r2, #0
 8006e92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d163      	bne.n	8006f64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea0:	009a      	lsls	r2, r3, #2
 8006ea2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006eac:	0f92      	lsrs	r2, r2, #30
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb8:	0edb      	lsrs	r3, r3, #27
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eca:	0e1b      	lsrs	r3, r3, #24
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0307 	and.w	r3, r3, #7
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006edc:	0d5b      	lsrs	r3, r3, #21
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eee:	0c9b      	lsrs	r3, r3, #18
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f00:	0bdb      	lsrs	r3, r3, #15
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	7e1b      	ldrb	r3, [r3, #24]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	3302      	adds	r3, #2
 8006f24:	2201      	movs	r2, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f2e:	fb02 f203 	mul.w	r2, r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	7a1b      	ldrb	r3, [r3, #8]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	2201      	movs	r2, #1
 8006f42:	409a      	lsls	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006f50:	0a52      	lsrs	r2, r2, #9
 8006f52:	fb02 f203 	mul.w	r2, r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f60:	661a      	str	r2, [r3, #96]	; 0x60
 8006f62:	e031      	b.n	8006fc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d11d      	bne.n	8006fa8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	3301      	adds	r3, #1
 8006f88:	029a      	lsls	r2, r3, #10
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	661a      	str	r2, [r3, #96]	; 0x60
 8006fa6:	e00f      	b.n	8006fc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a58      	ldr	r2, [pc, #352]	; (8007110 <HAL_SD_GetCardCSD+0x344>)
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e09d      	b.n	8007104 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fcc:	0b9b      	lsrs	r3, r3, #14
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	09db      	lsrs	r3, r3, #7
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	0fdb      	lsrs	r3, r3, #31
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	0f5b      	lsrs	r3, r3, #29
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	b2da      	uxtb	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	0e9b      	lsrs	r3, r3, #26
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	b2da      	uxtb	r2, r3
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	0d9b      	lsrs	r3, r3, #22
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	b2da      	uxtb	r2, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	0d5b      	lsrs	r3, r3, #21
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	0bdb      	lsrs	r3, r3, #15
 8007074:	b2db      	uxtb	r3, r3
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	0b9b      	lsrs	r3, r3, #14
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	0b5b      	lsrs	r3, r3, #13
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ae:	0b1b      	lsrs	r3, r3, #12
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	0a9b      	lsrs	r3, r3, #10
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	004005ff 	.word	0x004005ff

08007114 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800716c:	b5b0      	push	{r4, r5, r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af04      	add	r7, sp, #16
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2203      	movs	r2, #3
 8007180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	2b03      	cmp	r3, #3
 800718a:	d02e      	beq.n	80071ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007192:	d106      	bne.n	80071a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
 80071a0:	e029      	b.n	80071f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a8:	d10a      	bne.n	80071c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fb28 	bl	8007800 <SD_WideBus_Enable>
 80071b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
 80071be:	e01a      	b.n	80071f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb65 	bl	8007896 <SD_WideBus_Disable>
 80071cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38
 80071da:	e00c      	b.n	80071f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
 80071e8:	e005      	b.n	80071f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a26      	ldr	r2, [pc, #152]	; (800729c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007214:	e01f      	b.n	8007256 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681d      	ldr	r5, [r3, #0]
 800723c:	466c      	mov	r4, sp
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800724a:	f107 0308 	add.w	r3, r7, #8
 800724e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007250:	4628      	mov	r0, r5
 8007252:	f001 fd2b 	bl	8008cac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fe00 	bl	8008e64 <SDMMC_CmdBlockLength>
 8007264:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00c      	beq.n	8007286 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0a      	ldr	r2, [pc, #40]	; (800729c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800728e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007292:	4618      	mov	r0, r3
 8007294:	3728      	adds	r7, #40	; 0x28
 8007296:	46bd      	mov	sp, r7
 8007298:	bdb0      	pop	{r4, r5, r7, pc}
 800729a:	bf00      	nop
 800729c:	004005ff 	.word	0x004005ff

080072a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80072ac:	f107 030c 	add.w	r3, r7, #12
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa7c 	bl	80077b0 <SD_SendStatus>
 80072b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	0a5b      	lsrs	r3, r3, #9
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80072d6:	693b      	ldr	r3, [r7, #16]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	2b82      	cmp	r3, #130	; 0x82
 800731e:	d111      	bne.n	8007344 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f001 fe47 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 800732a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fd3a 	bl	8006db8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0208 	bic.w	r2, r2, #8
 8007352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f240 523a 	movw	r2, #1338	; 0x53a
 800735c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f002 faaf 	bl	80098d0 <HAL_SD_RxCpltCallback>
#endif
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fc f9bc 	bl	8003708 <HAL_DMA_GetError>
 8007390:	4603      	mov	r3, r0
 8007392:	2b02      	cmp	r3, #2
 8007394:	d03e      	beq.n	8007414 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d002      	beq.n	80073b2 <SD_DMAError+0x36>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d12d      	bne.n	800740e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a19      	ldr	r2, [pc, #100]	; (800741c <SD_DMAError+0xa0>)
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80073c8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80073d6:	6978      	ldr	r0, [r7, #20]
 80073d8:	f7ff ff62 	bl	80072a0 <HAL_SD_GetCardState>
 80073dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d002      	beq.n	80073ea <SD_DMAError+0x6e>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	d10a      	bne.n	8007400 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fde2 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 80073f4:	4602      	mov	r2, r0
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	431a      	orrs	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f7ff fcd2 	bl	8006db8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007414:	bf00      	nop
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	004005ff 	.word	0x004005ff

08007420 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f240 523a 	movw	r2, #1338	; 0x53a
 8007436:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff ff31 	bl	80072a0 <HAL_SD_GetCardState>
 800743e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b06      	cmp	r3, #6
 8007452:	d002      	beq.n	800745a <SD_DMATxAbort+0x3a>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b05      	cmp	r3, #5
 8007458:	d10a      	bne.n	8007470 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fdaa 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	431a      	orrs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f002 fa15 	bl	80098a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800747e:	e002      	b.n	8007486 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fc99 	bl	8006db8 <HAL_SD_ErrorCallback>
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff fefa 	bl	80072a0 <HAL_SD_GetCardState>
 80074ac:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b06      	cmp	r3, #6
 80074c0:	d002      	beq.n	80074c8 <SD_DMARxAbort+0x3a>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d10a      	bne.n	80074de <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fd73 	bl	8008fb8 <SDMMC_CmdStopTransfer>
 80074d2:	4602      	mov	r2, r0
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	431a      	orrs	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f002 f9de 	bl	80098a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80074ec:	e002      	b.n	80074f4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fc62 	bl	8006db8 <HAL_SD_ErrorCallback>
}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074fc:	b5b0      	push	{r4, r5, r7, lr}
 80074fe:	b094      	sub	sp, #80	; 0x50
 8007500:	af04      	add	r7, sp, #16
 8007502:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007504:	2301      	movs	r3, #1
 8007506:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fc25 	bl	8008d5c <SDIO_GetPowerState>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007518:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800751c:	e0b6      	b.n	800768c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	2b03      	cmp	r3, #3
 8007524:	d02f      	beq.n	8007586 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fe4e 	bl	80091cc <SDMMC_CmdSendCID>
 8007530:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <SD_InitCard+0x40>
    {
      return errorstate;
 8007538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753a:	e0a7      	b.n	800768c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f001 fc4f 	bl	8008de6 <SDIO_GetResponse>
 8007548:	4602      	mov	r2, r0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2104      	movs	r1, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fc46 	bl	8008de6 <SDIO_GetResponse>
 800755a:	4602      	mov	r2, r0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2108      	movs	r1, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f001 fc3d 	bl	8008de6 <SDIO_GetResponse>
 800756c:	4602      	mov	r2, r0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	210c      	movs	r1, #12
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fc34 	bl	8008de6 <SDIO_GetResponse>
 800757e:	4602      	mov	r2, r0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758a:	2b03      	cmp	r3, #3
 800758c:	d00d      	beq.n	80075aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f107 020e 	add.w	r2, r7, #14
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f001 fe54 	bl	8009246 <SDMMC_CmdSetRelAdd>
 800759e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <SD_InitCard+0xae>
    {
      return errorstate;
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	e070      	b.n	800768c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d036      	beq.n	8007620 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075b2:	89fb      	ldrh	r3, [r7, #14]
 80075b4:	461a      	mov	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f001 fe1e 	bl	8009208 <SDMMC_CmdSendCSD>
 80075cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80075d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d6:	e059      	b.n	800768c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2100      	movs	r1, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fc01 	bl	8008de6 <SDIO_GetResponse>
 80075e4:	4602      	mov	r2, r0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2104      	movs	r1, #4
 80075f0:	4618      	mov	r0, r3
 80075f2:	f001 fbf8 	bl	8008de6 <SDIO_GetResponse>
 80075f6:	4602      	mov	r2, r0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2108      	movs	r1, #8
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fbef 	bl	8008de6 <SDIO_GetResponse>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	210c      	movs	r1, #12
 8007614:	4618      	mov	r0, r3
 8007616:	f001 fbe6 	bl	8008de6 <SDIO_GetResponse>
 800761a:	4602      	mov	r2, r0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2104      	movs	r1, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fbdd 	bl	8008de6 <SDIO_GetResponse>
 800762c:	4603      	mov	r3, r0
 800762e:	0d1a      	lsrs	r2, r3, #20
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007634:	f107 0310 	add.w	r3, r7, #16
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fbc6 	bl	8006dcc <HAL_SD_GetCardCSD>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800764a:	e01f      	b.n	800768c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007654:	041b      	lsls	r3, r3, #16
 8007656:	461a      	mov	r2, r3
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	4608      	mov	r0, r1
 800765e:	f001 fccd 	bl	8008ffc <SDMMC_CmdSelDesel>
 8007662:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <SD_InitCard+0x172>
  {
    return errorstate;
 800766a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766c:	e00e      	b.n	800768c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	466c      	mov	r4, sp
 8007676:	f103 0210 	add.w	r2, r3, #16
 800767a:	ca07      	ldmia	r2, {r0, r1, r2}
 800767c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007680:	3304      	adds	r3, #4
 8007682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007684:	4628      	mov	r0, r5
 8007686:	f001 fb11 	bl	8008cac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3740      	adds	r7, #64	; 0x40
 8007690:	46bd      	mov	sp, r7
 8007692:	bdb0      	pop	{r4, r5, r7, pc}

08007694 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 fcc8 	bl	8009042 <SDMMC_CmdGoIdleState>
 80076b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <SD_PowerON+0x2a>
  {
    return errorstate;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	e072      	b.n	80077a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fcdb 	bl	800907e <SDMMC_CmdOperCond>
 80076c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fcb1 	bl	8009042 <SDMMC_CmdGoIdleState>
 80076e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	e05b      	b.n	80077a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d137      	bne.n	800776a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fcdb 	bl	80090bc <SDMMC_CmdAppCommand>
 8007706:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d02d      	beq.n	800776a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800770e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007712:	e047      	b.n	80077a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fcce 	bl	80090bc <SDMMC_CmdAppCommand>
 8007720:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <SD_PowerON+0x98>
    {
      return errorstate;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	e03b      	b.n	80077a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	491e      	ldr	r1, [pc, #120]	; (80077ac <SD_PowerON+0x118>)
 8007732:	4618      	mov	r0, r3
 8007734:	f001 fce4 	bl	8009100 <SDMMC_CmdAppOperCommand>
 8007738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007744:	e02e      	b.n	80077a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fb4a 	bl	8008de6 <SDIO_GetResponse>
 8007752:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	0fdb      	lsrs	r3, r3, #31
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <SD_PowerON+0xcc>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <SD_PowerON+0xce>
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]

    count++;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3301      	adds	r3, #1
 8007768:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007770:	4293      	cmp	r3, r2
 8007772:	d802      	bhi.n	800777a <SD_PowerON+0xe6>
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0cc      	beq.n	8007714 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007780:	4293      	cmp	r3, r2
 8007782:	d902      	bls.n	800778a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007788:	e00c      	b.n	80077a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	645a      	str	r2, [r3, #68]	; 0x44
 800779a:	e002      	b.n	80077a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	c1100000 	.word	0xc1100000

080077b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80077c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077c4:	e018      	b.n	80077f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f001 fd58 	bl	8009288 <SDMMC_CmdSendStatus>
 80077d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	e009      	b.n	80077f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fafb 	bl	8008de6 <SDIO_GetResponse>
 80077f0:	4602      	mov	r2, r0
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	2300      	movs	r3, #0
 800780e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f001 fae5 	bl	8008de6 <SDIO_GetResponse>
 800781c:	4603      	mov	r3, r0
 800781e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007826:	d102      	bne.n	800782e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800782c:	e02f      	b.n	800788e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800782e:	f107 030c 	add.w	r3, r7, #12
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f879 	bl	800792c <SD_FindSCR>
 800783a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	e023      	b.n	800788e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f001 fc2d 	bl	80090bc <SDMMC_CmdAppCommand>
 8007862:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	e00f      	b.n	800788e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2102      	movs	r1, #2
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fc66 	bl	8009146 <SDMMC_CmdBusWidth>
 800787a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	e003      	b.n	800788e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007886:	2300      	movs	r3, #0
 8007888:	e001      	b.n	800788e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800788a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	2300      	movs	r3, #0
 80078a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2100      	movs	r1, #0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 fa9a 	bl	8008de6 <SDIO_GetResponse>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078bc:	d102      	bne.n	80078c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078c2:	e02f      	b.n	8007924 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078c4:	f107 030c 	add.w	r3, r7, #12
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f82e 	bl	800792c <SD_FindSCR>
 80078d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	e023      	b.n	8007924 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01c      	beq.n	8007920 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ee:	041b      	lsls	r3, r3, #16
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f001 fbe2 	bl	80090bc <SDMMC_CmdAppCommand>
 80078f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	e00f      	b.n	8007924 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2100      	movs	r1, #0
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fc1b 	bl	8009146 <SDMMC_CmdBusWidth>
 8007910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	e003      	b.n	8007924 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800791c:	2300      	movs	r3, #0
 800791e:	e001      	b.n	8007924 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007920:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b08f      	sub	sp, #60	; 0x3c
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007936:	f7fa fb77 	bl	8002028 <HAL_GetTick>
 800793a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007940:	2300      	movs	r3, #0
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2108      	movs	r1, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fa86 	bl	8008e64 <SDMMC_CmdBlockLength>
 8007958:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	e0b2      	b.n	8007aca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f001 fba3 	bl	80090bc <SDMMC_CmdAppCommand>
 8007976:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <SD_FindSCR+0x56>
  {
    return errorstate;
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	e0a3      	b.n	8007aca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295
 8007986:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007988:	2308      	movs	r3, #8
 800798a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800798c:	2330      	movs	r3, #48	; 0x30
 800798e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007990:	2302      	movs	r3, #2
 8007992:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007998:	2301      	movs	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f107 0210 	add.w	r2, r7, #16
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fa30 	bl	8008e0c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 fbea 	bl	800918a <SDMMC_CmdSendSCR>
 80079b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d02a      	beq.n	8007a14 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	e083      	b.n	8007aca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00f      	beq.n	80079f0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	f107 0208 	add.w	r2, r7, #8
 80079dc:	18d4      	adds	r4, r2, r3
 80079de:	4608      	mov	r0, r1
 80079e0:	f001 f98f 	bl	8008d02 <SDIO_ReadFIFO>
 80079e4:	4603      	mov	r3, r0
 80079e6:	6023      	str	r3, [r4, #0]
      index++;
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ea:	3301      	adds	r3, #1
 80079ec:	637b      	str	r3, [r7, #52]	; 0x34
 80079ee:	e006      	b.n	80079fe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d012      	beq.n	8007a24 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079fe:	f7fa fb13 	bl	8002028 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d102      	bne.n	8007a14 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a12:	e05a      	b.n	8007aca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0cf      	beq.n	80079c2 <SD_FindSCR+0x96>
 8007a22:	e000      	b.n	8007a26 <SD_FindSCR+0xfa>
      break;
 8007a24:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2208      	movs	r2, #8
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	e044      	b.n	8007aca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2202      	movs	r2, #2
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a56:	2302      	movs	r3, #2
 8007a58:	e037      	b.n	8007aca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a70:	2320      	movs	r3, #32
 8007a72:	e02a      	b.n	8007aca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	061a      	lsls	r2, r3, #24
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	0e1b      	lsrs	r3, r3, #24
 8007a9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	601a      	str	r2, [r3, #0]
    scr++;
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	061a      	lsls	r2, r3, #24
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ab2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007abc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0e1b      	lsrs	r3, r3, #24
 8007ac2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	373c      	adds	r7, #60	; 0x3c
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd90      	pop	{r4, r7, pc}

08007ad2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ade:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d03f      	beq.n	8007b6c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e033      	b.n	8007b5a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f903 	bl	8008d02 <SDIO_ReadFIFO>
 8007afc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	0e1b      	lsrs	r3, r3, #24
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3301      	adds	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b07      	cmp	r3, #7
 8007b5e:	d9c8      	bls.n	8007af2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d043      	beq.n	8007c16 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e037      	b.n	8007c04 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	021a      	lsls	r2, r3, #8
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	041a      	lsls	r2, r3, #16
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	061a      	lsls	r2, r3, #24
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f107 0208 	add.w	r2, r7, #8
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f88f 	bl	8008d1c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	3301      	adds	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2b07      	cmp	r3, #7
 8007c08:	d9c4      	bls.n	8007b94 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007c16:	bf00      	nop
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e025      	b.n	8007c7e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa f89e 	bl	8001d88 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 ff32 	bl	8008ac8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	f000 ff9d 	bl	8008bae <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e07b      	b.n	8007d90 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d108      	bne.n	8007cb2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca8:	d009      	beq.n	8007cbe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	61da      	str	r2, [r3, #28]
 8007cb0:	e005      	b.n	8007cbe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7f9 fed9 	bl	8001a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	ea42 0103 	orr.w	r1, r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	f003 0104 	and.w	r1, r3, #4
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	f003 0210 	and.w	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e041      	b.n	8007e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 fece 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	f000 fa96 	bl	8008308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d001      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e04e      	b.n	8007eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a23      	ldr	r2, [pc, #140]	; (8007efc <HAL_TIM_Base_Start_IT+0xc4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d022      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d01d      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d018      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a1e      	ldr	r2, [pc, #120]	; (8007f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d013      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00e      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d009      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d004      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x80>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d111      	bne.n	8007edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b06      	cmp	r3, #6
 8007ec8:	d010      	beq.n	8007eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eda:	e007      	b.n	8007eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40000400 	.word	0x40000400
 8007f04:	40000800 	.word	0x40000800
 8007f08:	40000c00 	.word	0x40000c00
 8007f0c:	40010400 	.word	0x40010400
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40001800 	.word	0x40001800

08007f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d122      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d11b      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0202 	mvn.w	r2, #2
 8007f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f9b5 	bl	80082ca <HAL_TIM_IC_CaptureCallback>
 8007f60:	e005      	b.n	8007f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9a7 	bl	80082b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9b8 	bl	80082de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d122      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d11b      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0204 	mvn.w	r2, #4
 8007f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f98b 	bl	80082ca <HAL_TIM_IC_CaptureCallback>
 8007fb4:	e005      	b.n	8007fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f97d 	bl	80082b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f98e 	bl	80082de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0208 	mvn.w	r2, #8
 8007fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f961 	bl	80082ca <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f953 	bl	80082b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f964 	bl	80082de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0310 	and.w	r3, r3, #16
 8008026:	2b10      	cmp	r3, #16
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b10      	cmp	r3, #16
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0210 	mvn.w	r2, #16
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2208      	movs	r2, #8
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f937 	bl	80082ca <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f929 	bl	80082b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f93a 	bl	80082de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b01      	cmp	r3, #1
 800807c:	d10e      	bne.n	800809c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b01      	cmp	r3, #1
 800808a:	d107      	bne.n	800809c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0201 	mvn.w	r2, #1
 8008094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7f9 f8f8 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a6:	2b80      	cmp	r3, #128	; 0x80
 80080a8:	d10e      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d107      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fae0 	bl	8008688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8ff 	bl	80082f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b20      	cmp	r3, #32
 8008100:	d10e      	bne.n	8008120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b20      	cmp	r3, #32
 800810e:	d107      	bne.n	8008120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0220 	mvn.w	r2, #32
 8008118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 faaa 	bl	8008674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_TIM_ConfigClockSource+0x1c>
 8008140:	2302      	movs	r3, #2
 8008142:	e0b4      	b.n	80082ae <HAL_TIM_ConfigClockSource+0x186>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817c:	d03e      	beq.n	80081fc <HAL_TIM_ConfigClockSource+0xd4>
 800817e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008182:	f200 8087 	bhi.w	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 8008186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818a:	f000 8086 	beq.w	800829a <HAL_TIM_ConfigClockSource+0x172>
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d87f      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 8008194:	2b70      	cmp	r3, #112	; 0x70
 8008196:	d01a      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0xa6>
 8008198:	2b70      	cmp	r3, #112	; 0x70
 800819a:	d87b      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 800819c:	2b60      	cmp	r3, #96	; 0x60
 800819e:	d050      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0x11a>
 80081a0:	2b60      	cmp	r3, #96	; 0x60
 80081a2:	d877      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 80081a4:	2b50      	cmp	r3, #80	; 0x50
 80081a6:	d03c      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0xfa>
 80081a8:	2b50      	cmp	r3, #80	; 0x50
 80081aa:	d873      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d058      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0x13a>
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d86f      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 80081b4:	2b30      	cmp	r3, #48	; 0x30
 80081b6:	d064      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x15a>
 80081b8:	2b30      	cmp	r3, #48	; 0x30
 80081ba:	d86b      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d060      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x15a>
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d867      	bhi.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d05c      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x15a>
 80081c8:	2b10      	cmp	r3, #16
 80081ca:	d05a      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x15a>
 80081cc:	e062      	b.n	8008294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6899      	ldr	r1, [r3, #8]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f000 f9ad 	bl	800853c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	609a      	str	r2, [r3, #8]
      break;
 80081fa:	e04f      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	6899      	ldr	r1, [r3, #8]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f000 f996 	bl	800853c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800821e:	609a      	str	r2, [r3, #8]
      break;
 8008220:	e03c      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6859      	ldr	r1, [r3, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	461a      	mov	r2, r3
 8008230:	f000 f90a 	bl	8008448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2150      	movs	r1, #80	; 0x50
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f963 	bl	8008506 <TIM_ITRx_SetConfig>
      break;
 8008240:	e02c      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	6859      	ldr	r1, [r3, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	461a      	mov	r2, r3
 8008250:	f000 f929 	bl	80084a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2160      	movs	r1, #96	; 0x60
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f953 	bl	8008506 <TIM_ITRx_SetConfig>
      break;
 8008260:	e01c      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	461a      	mov	r2, r3
 8008270:	f000 f8ea 	bl	8008448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2140      	movs	r1, #64	; 0x40
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f943 	bl	8008506 <TIM_ITRx_SetConfig>
      break;
 8008280:	e00c      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f000 f93a 	bl	8008506 <TIM_ITRx_SetConfig>
      break;
 8008292:	e003      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
      break;
 8008298:	e000      	b.n	800829c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800829a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a40      	ldr	r2, [pc, #256]	; (800841c <TIM_Base_SetConfig+0x114>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d013      	beq.n	8008348 <TIM_Base_SetConfig+0x40>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d00f      	beq.n	8008348 <TIM_Base_SetConfig+0x40>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a3d      	ldr	r2, [pc, #244]	; (8008420 <TIM_Base_SetConfig+0x118>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00b      	beq.n	8008348 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a3c      	ldr	r2, [pc, #240]	; (8008424 <TIM_Base_SetConfig+0x11c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d007      	beq.n	8008348 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3b      	ldr	r2, [pc, #236]	; (8008428 <TIM_Base_SetConfig+0x120>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3a      	ldr	r2, [pc, #232]	; (800842c <TIM_Base_SetConfig+0x124>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d108      	bne.n	800835a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2f      	ldr	r2, [pc, #188]	; (800841c <TIM_Base_SetConfig+0x114>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d02b      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008368:	d027      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2c      	ldr	r2, [pc, #176]	; (8008420 <TIM_Base_SetConfig+0x118>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d023      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a2b      	ldr	r2, [pc, #172]	; (8008424 <TIM_Base_SetConfig+0x11c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d01f      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2a      	ldr	r2, [pc, #168]	; (8008428 <TIM_Base_SetConfig+0x120>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01b      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a29      	ldr	r2, [pc, #164]	; (800842c <TIM_Base_SetConfig+0x124>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d017      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a28      	ldr	r2, [pc, #160]	; (8008430 <TIM_Base_SetConfig+0x128>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a27      	ldr	r2, [pc, #156]	; (8008434 <TIM_Base_SetConfig+0x12c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00f      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a26      	ldr	r2, [pc, #152]	; (8008438 <TIM_Base_SetConfig+0x130>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00b      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a25      	ldr	r2, [pc, #148]	; (800843c <TIM_Base_SetConfig+0x134>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d007      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a24      	ldr	r2, [pc, #144]	; (8008440 <TIM_Base_SetConfig+0x138>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a23      	ldr	r2, [pc, #140]	; (8008444 <TIM_Base_SetConfig+0x13c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d108      	bne.n	80083cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a0a      	ldr	r2, [pc, #40]	; (800841c <TIM_Base_SetConfig+0x114>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_Base_SetConfig+0xf8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a0c      	ldr	r2, [pc, #48]	; (800842c <TIM_Base_SetConfig+0x124>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d103      	bne.n	8008408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	691a      	ldr	r2, [r3, #16]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	615a      	str	r2, [r3, #20]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40010000 	.word	0x40010000
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40010400 	.word	0x40010400
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800
 800843c:	40001800 	.word	0x40001800
 8008440:	40001c00 	.word	0x40001c00
 8008444:	40002000 	.word	0x40002000

08008448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f023 0201 	bic.w	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f023 030a 	bic.w	r3, r3, #10
 8008484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b087      	sub	sp, #28
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f023 0210 	bic.w	r2, r3, #16
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	031b      	lsls	r3, r3, #12
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	621a      	str	r2, [r3, #32]
}
 80084fa:	bf00      	nop
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	f043 0307 	orr.w	r3, r3, #7
 8008528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	609a      	str	r2, [r3, #8]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	021a      	lsls	r2, r3, #8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	431a      	orrs	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4313      	orrs	r3, r2
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e05a      	b.n	800864a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a21      	ldr	r2, [pc, #132]	; (8008658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d022      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e0:	d01d      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a1d      	ldr	r2, [pc, #116]	; (800865c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d018      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d013      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a1a      	ldr	r2, [pc, #104]	; (8008664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00e      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a18      	ldr	r2, [pc, #96]	; (8008668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d009      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a17      	ldr	r2, [pc, #92]	; (800866c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d004      	beq.n	800861e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a15      	ldr	r2, [pc, #84]	; (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d10c      	bne.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4313      	orrs	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40010000 	.word	0x40010000
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00
 8008668:	40010400 	.word	0x40010400
 800866c:	40014000 	.word	0x40014000
 8008670:	40001800 	.word	0x40001800

08008674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e03f      	b.n	800872e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7f9 fa72 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2224      	movs	r2, #36	; 0x24
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f829 	bl	8008738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	b09f      	sub	sp, #124	; 0x7c
 800873e:	af00      	add	r7, sp, #0
 8008740:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800874c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874e:	68d9      	ldr	r1, [r3, #12]
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	ea40 0301 	orr.w	r3, r0, r1
 8008758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	431a      	orrs	r2, r3
 8008764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	431a      	orrs	r2, r3
 800876a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	4313      	orrs	r3, r2
 8008770:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800877c:	f021 010c 	bic.w	r1, r1, #12
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008786:	430b      	orrs	r3, r1
 8008788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	6999      	ldr	r1, [r3, #24]
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	ea40 0301 	orr.w	r3, r0, r1
 80087a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4bc5      	ldr	r3, [pc, #788]	; (8008abc <UART_SetConfig+0x384>)
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d004      	beq.n	80087b6 <UART_SetConfig+0x7e>
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4bc3      	ldr	r3, [pc, #780]	; (8008ac0 <UART_SetConfig+0x388>)
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d103      	bne.n	80087be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087b6:	f7fd fa11 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 80087ba:	6778      	str	r0, [r7, #116]	; 0x74
 80087bc:	e002      	b.n	80087c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087be:	f7fd f9f9 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80087c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087cc:	f040 80b6 	bne.w	800893c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d2:	461c      	mov	r4, r3
 80087d4:	f04f 0500 	mov.w	r5, #0
 80087d8:	4622      	mov	r2, r4
 80087da:	462b      	mov	r3, r5
 80087dc:	1891      	adds	r1, r2, r2
 80087de:	6439      	str	r1, [r7, #64]	; 0x40
 80087e0:	415b      	adcs	r3, r3
 80087e2:	647b      	str	r3, [r7, #68]	; 0x44
 80087e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087e8:	1912      	adds	r2, r2, r4
 80087ea:	eb45 0303 	adc.w	r3, r5, r3
 80087ee:	f04f 0000 	mov.w	r0, #0
 80087f2:	f04f 0100 	mov.w	r1, #0
 80087f6:	00d9      	lsls	r1, r3, #3
 80087f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087fc:	00d0      	lsls	r0, r2, #3
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	1911      	adds	r1, r2, r4
 8008804:	6639      	str	r1, [r7, #96]	; 0x60
 8008806:	416b      	adcs	r3, r5
 8008808:	667b      	str	r3, [r7, #100]	; 0x64
 800880a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	461a      	mov	r2, r3
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	1891      	adds	r1, r2, r2
 8008816:	63b9      	str	r1, [r7, #56]	; 0x38
 8008818:	415b      	adcs	r3, r3
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800881c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008820:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008824:	f7f7 fcec 	bl	8000200 <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4ba5      	ldr	r3, [pc, #660]	; (8008ac4 <UART_SetConfig+0x38c>)
 800882e:	fba3 2302 	umull	r2, r3, r3, r2
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	011e      	lsls	r6, r3, #4
 8008836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008838:	461c      	mov	r4, r3
 800883a:	f04f 0500 	mov.w	r5, #0
 800883e:	4622      	mov	r2, r4
 8008840:	462b      	mov	r3, r5
 8008842:	1891      	adds	r1, r2, r2
 8008844:	6339      	str	r1, [r7, #48]	; 0x30
 8008846:	415b      	adcs	r3, r3
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
 800884a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800884e:	1912      	adds	r2, r2, r4
 8008850:	eb45 0303 	adc.w	r3, r5, r3
 8008854:	f04f 0000 	mov.w	r0, #0
 8008858:	f04f 0100 	mov.w	r1, #0
 800885c:	00d9      	lsls	r1, r3, #3
 800885e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008862:	00d0      	lsls	r0, r2, #3
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	1911      	adds	r1, r2, r4
 800886a:	65b9      	str	r1, [r7, #88]	; 0x58
 800886c:	416b      	adcs	r3, r5
 800886e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	461a      	mov	r2, r3
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	1891      	adds	r1, r2, r2
 800887c:	62b9      	str	r1, [r7, #40]	; 0x28
 800887e:	415b      	adcs	r3, r3
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008886:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800888a:	f7f7 fcb9 	bl	8000200 <__aeabi_uldivmod>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4b8c      	ldr	r3, [pc, #560]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008894:	fba3 1302 	umull	r1, r3, r3, r2
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	2164      	movs	r1, #100	; 0x64
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	3332      	adds	r3, #50	; 0x32
 80088a6:	4a87      	ldr	r2, [pc, #540]	; (8008ac4 <UART_SetConfig+0x38c>)
 80088a8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b4:	441e      	add	r6, r3
 80088b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088b8:	4618      	mov	r0, r3
 80088ba:	f04f 0100 	mov.w	r1, #0
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	1894      	adds	r4, r2, r2
 80088c4:	623c      	str	r4, [r7, #32]
 80088c6:	415b      	adcs	r3, r3
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
 80088ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088ce:	1812      	adds	r2, r2, r0
 80088d0:	eb41 0303 	adc.w	r3, r1, r3
 80088d4:	f04f 0400 	mov.w	r4, #0
 80088d8:	f04f 0500 	mov.w	r5, #0
 80088dc:	00dd      	lsls	r5, r3, #3
 80088de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088e2:	00d4      	lsls	r4, r2, #3
 80088e4:	4622      	mov	r2, r4
 80088e6:	462b      	mov	r3, r5
 80088e8:	1814      	adds	r4, r2, r0
 80088ea:	653c      	str	r4, [r7, #80]	; 0x50
 80088ec:	414b      	adcs	r3, r1
 80088ee:	657b      	str	r3, [r7, #84]	; 0x54
 80088f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	461a      	mov	r2, r3
 80088f6:	f04f 0300 	mov.w	r3, #0
 80088fa:	1891      	adds	r1, r2, r2
 80088fc:	61b9      	str	r1, [r7, #24]
 80088fe:	415b      	adcs	r3, r3
 8008900:	61fb      	str	r3, [r7, #28]
 8008902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008906:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800890a:	f7f7 fc79 	bl	8000200 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4b6c      	ldr	r3, [pc, #432]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008914:	fba3 1302 	umull	r1, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	2164      	movs	r1, #100	; 0x64
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	3332      	adds	r3, #50	; 0x32
 8008926:	4a67      	ldr	r2, [pc, #412]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	f003 0207 	and.w	r2, r3, #7
 8008932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4432      	add	r2, r6
 8008938:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800893a:	e0b9      	b.n	8008ab0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800893c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893e:	461c      	mov	r4, r3
 8008940:	f04f 0500 	mov.w	r5, #0
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	1891      	adds	r1, r2, r2
 800894a:	6139      	str	r1, [r7, #16]
 800894c:	415b      	adcs	r3, r3
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008954:	1912      	adds	r2, r2, r4
 8008956:	eb45 0303 	adc.w	r3, r5, r3
 800895a:	f04f 0000 	mov.w	r0, #0
 800895e:	f04f 0100 	mov.w	r1, #0
 8008962:	00d9      	lsls	r1, r3, #3
 8008964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008968:	00d0      	lsls	r0, r2, #3
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	eb12 0804 	adds.w	r8, r2, r4
 8008972:	eb43 0905 	adc.w	r9, r3, r5
 8008976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f04f 0100 	mov.w	r1, #0
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	008b      	lsls	r3, r1, #2
 800898a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800898e:	0082      	lsls	r2, r0, #2
 8008990:	4640      	mov	r0, r8
 8008992:	4649      	mov	r1, r9
 8008994:	f7f7 fc34 	bl	8000200 <__aeabi_uldivmod>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <UART_SetConfig+0x38c>)
 800899e:	fba3 2302 	umull	r2, r3, r3, r2
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	011e      	lsls	r6, r3, #4
 80089a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089a8:	4618      	mov	r0, r3
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	1894      	adds	r4, r2, r2
 80089b4:	60bc      	str	r4, [r7, #8]
 80089b6:	415b      	adcs	r3, r3
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089be:	1812      	adds	r2, r2, r0
 80089c0:	eb41 0303 	adc.w	r3, r1, r3
 80089c4:	f04f 0400 	mov.w	r4, #0
 80089c8:	f04f 0500 	mov.w	r5, #0
 80089cc:	00dd      	lsls	r5, r3, #3
 80089ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089d2:	00d4      	lsls	r4, r2, #3
 80089d4:	4622      	mov	r2, r4
 80089d6:	462b      	mov	r3, r5
 80089d8:	1814      	adds	r4, r2, r0
 80089da:	64bc      	str	r4, [r7, #72]	; 0x48
 80089dc:	414b      	adcs	r3, r1
 80089de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f04f 0100 	mov.w	r1, #0
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	008b      	lsls	r3, r1, #2
 80089f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089f8:	0082      	lsls	r2, r0, #2
 80089fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089fe:	f7f7 fbff 	bl	8000200 <__aeabi_uldivmod>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008a08:	fba3 1302 	umull	r1, r3, r3, r2
 8008a0c:	095b      	lsrs	r3, r3, #5
 8008a0e:	2164      	movs	r1, #100	; 0x64
 8008a10:	fb01 f303 	mul.w	r3, r1, r3
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	3332      	adds	r3, #50	; 0x32
 8008a1a:	4a2a      	ldr	r2, [pc, #168]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a26:	441e      	add	r6, r3
 8008a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f04f 0100 	mov.w	r1, #0
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	1894      	adds	r4, r2, r2
 8008a36:	603c      	str	r4, [r7, #0]
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	607b      	str	r3, [r7, #4]
 8008a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a40:	1812      	adds	r2, r2, r0
 8008a42:	eb41 0303 	adc.w	r3, r1, r3
 8008a46:	f04f 0400 	mov.w	r4, #0
 8008a4a:	f04f 0500 	mov.w	r5, #0
 8008a4e:	00dd      	lsls	r5, r3, #3
 8008a50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a54:	00d4      	lsls	r4, r2, #3
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	eb12 0a00 	adds.w	sl, r2, r0
 8008a5e:	eb43 0b01 	adc.w	fp, r3, r1
 8008a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	f04f 0200 	mov.w	r2, #0
 8008a70:	f04f 0300 	mov.w	r3, #0
 8008a74:	008b      	lsls	r3, r1, #2
 8008a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a7a:	0082      	lsls	r2, r0, #2
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	4659      	mov	r1, fp
 8008a80:	f7f7 fbbe 	bl	8000200 <__aeabi_uldivmod>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4b0e      	ldr	r3, [pc, #56]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	2164      	movs	r1, #100	; 0x64
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	3332      	adds	r3, #50	; 0x32
 8008a9c:	4a09      	ldr	r2, [pc, #36]	; (8008ac4 <UART_SetConfig+0x38c>)
 8008a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa2:	095b      	lsrs	r3, r3, #5
 8008aa4:	f003 020f 	and.w	r2, r3, #15
 8008aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4432      	add	r2, r6
 8008aae:	609a      	str	r2, [r3, #8]
}
 8008ab0:	bf00      	nop
 8008ab2:	377c      	adds	r7, #124	; 0x7c
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	bf00      	nop
 8008abc:	40011000 	.word	0x40011000
 8008ac0:	40011400 	.word	0x40011400
 8008ac4:	51eb851f 	.word	0x51eb851f

08008ac8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d029      	beq.n	8008b36 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008af2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008afc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008b02:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008b08:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008b0e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008b14:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008b1a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008b20:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008b26:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e034      	b.n	8008ba0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b42:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b4c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008b52:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008b66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008b7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008b80:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008b86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008b8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b087      	sub	sp, #28
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d02e      	beq.n	8008c26 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bd4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008be4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008bee:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008bf8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c02:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008c0c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008c16:	4313      	orrs	r3, r2
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	e03b      	b.n	8008c9e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c36:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c5c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008c6c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008c76:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008c80:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008cac:	b084      	sub	sp, #16
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	f107 001c 	add.w	r0, r7, #28
 8008cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008cc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008cc6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008cca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008cce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008cd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008cd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	b004      	add	sp, #16
 8008d00:	4770      	bx	lr

08008d02 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2203      	movs	r2, #3
 8008d4a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008d4c:	2002      	movs	r0, #2
 8008d4e:	f7f9 f977 	bl	8002040 <HAL_Delay>
  
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0303 	and.w	r3, r3, #3
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d96:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d9c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008da2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008db2:	f023 030f 	bic.w	r3, r3, #15
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	b2db      	uxtb	r3, r3
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3314      	adds	r3, #20
 8008df4:	461a      	mov	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	4413      	add	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
}  
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008e38:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008e3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0

}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e72:	2310      	movs	r3, #16
 8008e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ff74 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	2110      	movs	r1, #16
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa44 	bl	8009324 <SDMMC_GetCmdResp1>
 8008e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008eb6:	2311      	movs	r3, #17
 8008eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eba:	2340      	movs	r3, #64	; 0x40
 8008ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ec8:	f107 0308 	add.w	r3, r7, #8
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ff52 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed8:	2111      	movs	r1, #17
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa22 	bl	8009324 <SDMMC_GetCmdResp1>
 8008ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee2:	69fb      	ldr	r3, [r7, #28]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008efa:	2312      	movs	r3, #18
 8008efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008efe:	2340      	movs	r3, #64	; 0x40
 8008f00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f0c:	f107 0308 	add.w	r3, r7, #8
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ff30 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f1c:	2112      	movs	r1, #18
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa00 	bl	8009324 <SDMMC_GetCmdResp1>
 8008f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f26:	69fb      	ldr	r3, [r7, #28]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f3e:	2318      	movs	r3, #24
 8008f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f50:	f107 0308 	add.w	r3, r7, #8
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff ff0e 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f60:	2118      	movs	r1, #24
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9de 	bl	8009324 <SDMMC_GetCmdResp1>
 8008f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f82:	2319      	movs	r3, #25
 8008f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f86:	2340      	movs	r3, #64	; 0x40
 8008f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f94:	f107 0308 	add.w	r3, r7, #8
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff feec 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa4:	2119      	movs	r1, #25
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9bc 	bl	8009324 <SDMMC_GetCmdResp1>
 8008fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fae:	69fb      	ldr	r3, [r7, #28]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008fc4:	230c      	movs	r3, #12
 8008fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fecb 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008fe2:	4a05      	ldr	r2, [pc, #20]	; (8008ff8 <SDMMC_CmdStopTransfer+0x40>)
 8008fe4:	210c      	movs	r1, #12
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f99c 	bl	8009324 <SDMMC_GetCmdResp1>
 8008fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fee:	69fb      	ldr	r3, [r7, #28]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	05f5e100 	.word	0x05f5e100

08008ffc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	; 0x28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800900c:	2307      	movs	r3, #7
 800900e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009014:	2300      	movs	r3, #0
 8009016:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800901e:	f107 0310 	add.w	r3, r7, #16
 8009022:	4619      	mov	r1, r3
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f7ff fea7 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800902a:	f241 3288 	movw	r2, #5000	; 0x1388
 800902e:	2107      	movs	r1, #7
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f977 	bl	8009324 <SDMMC_GetCmdResp1>
 8009036:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800903a:	4618      	mov	r0, r3
 800903c:	3728      	adds	r7, #40	; 0x28
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b088      	sub	sp, #32
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009052:	2300      	movs	r3, #0
 8009054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800905a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800905e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009060:	f107 0308 	add.w	r3, r7, #8
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fe86 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f92d 	bl	80092cc <SDMMC_GetCmdError>
 8009072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009074:	69fb      	ldr	r3, [r7, #28]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009086:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800908a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800908c:	2308      	movs	r3, #8
 800908e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009094:	2300      	movs	r3, #0
 8009096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800909c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fe67 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fb24 	bl	80096f8 <SDMMC_GetCmdResp7>
 80090b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090b2:	69fb      	ldr	r3, [r7, #28]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090ca:	2337      	movs	r3, #55	; 0x37
 80090cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090ce:	2340      	movs	r3, #64	; 0x40
 80090d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fe48 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80090e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ec:	2137      	movs	r1, #55	; 0x37
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f918 	bl	8009324 <SDMMC_GetCmdResp1>
 80090f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090f6:	69fb      	ldr	r3, [r7, #28]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009116:	2329      	movs	r3, #41	; 0x29
 8009118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800911a:	2340      	movs	r3, #64	; 0x40
 800911c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fe22 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fa2b 	bl	8009590 <SDMMC_GetCmdResp3>
 800913a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800913c:	69fb      	ldr	r3, [r7, #28]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b088      	sub	sp, #32
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009154:	2306      	movs	r3, #6
 8009156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009166:	f107 0308 	add.w	r3, r7, #8
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff fe03 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009172:	f241 3288 	movw	r2, #5000	; 0x1388
 8009176:	2106      	movs	r1, #6
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8d3 	bl	8009324 <SDMMC_GetCmdResp1>
 800917e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009180:	69fb      	ldr	r3, [r7, #28]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3720      	adds	r7, #32
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b088      	sub	sp, #32
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009196:	2333      	movs	r3, #51	; 0x33
 8009198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800919a:	2340      	movs	r3, #64	; 0x40
 800919c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091a8:	f107 0308 	add.w	r3, r7, #8
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff fde2 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	2133      	movs	r1, #51	; 0x33
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f8b2 	bl	8009324 <SDMMC_GetCmdResp1>
 80091c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091c2:	69fb      	ldr	r3, [r7, #28]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3720      	adds	r7, #32
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b088      	sub	sp, #32
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091d8:	2302      	movs	r3, #2
 80091da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80091dc:	23c0      	movs	r3, #192	; 0xc0
 80091de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff fdc1 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f982 	bl	8009500 <SDMMC_GetCmdResp2>
 80091fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091fe:	69fb      	ldr	r3, [r7, #28]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3720      	adds	r7, #32
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009216:	2309      	movs	r3, #9
 8009218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800921a:	23c0      	movs	r3, #192	; 0xc0
 800921c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009226:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009228:	f107 0308 	add.w	r3, r7, #8
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff fda2 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f963 	bl	8009500 <SDMMC_GetCmdResp2>
 800923a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800923c:	69fb      	ldr	r3, [r7, #28]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b088      	sub	sp, #32
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009254:	2303      	movs	r3, #3
 8009256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fd83 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	2103      	movs	r1, #3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9c8 	bl	800960c <SDMMC_GetCmdResp6>
 800927c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800927e:	69fb      	ldr	r3, [r7, #28]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009296:	230d      	movs	r3, #13
 8009298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092a8:	f107 0308 	add.w	r3, r7, #8
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff fd62 	bl	8008d78 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80092b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b8:	210d      	movs	r1, #13
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f832 	bl	8009324 <SDMMC_GetCmdResp1>
 80092c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092c2:	69fb      	ldr	r3, [r7, #28]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3720      	adds	r7, #32
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092d4:	4b11      	ldr	r3, [pc, #68]	; (800931c <SDMMC_GetCmdError+0x50>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a11      	ldr	r2, [pc, #68]	; (8009320 <SDMMC_GetCmdError+0x54>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0a5b      	lsrs	r3, r3, #9
 80092e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	60fa      	str	r2, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092f8:	e009      	b.n	800930e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0f1      	beq.n	80092ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	22c5      	movs	r2, #197	; 0xc5
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	20000000 	.word	0x20000000
 8009320:	10624dd3 	.word	0x10624dd3

08009324 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009332:	4b70      	ldr	r3, [pc, #448]	; (80094f4 <SDMMC_GetCmdResp1+0x1d0>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a70      	ldr	r2, [pc, #448]	; (80094f8 <SDMMC_GetCmdResp1+0x1d4>)
 8009338:	fba2 2303 	umull	r2, r3, r2, r3
 800933c:	0a5a      	lsrs	r2, r3, #9
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	fb02 f303 	mul.w	r3, r2, r3
 8009344:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	1e5a      	subs	r2, r3, #1
 800934a:	61fa      	str	r2, [r7, #28]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009354:	e0c9      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ef      	beq.n	8009346 <SDMMC_GetCmdResp1+0x22>
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1ea      	bne.n	8009346 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2204      	movs	r2, #4
 8009380:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009382:	2304      	movs	r3, #4
 8009384:	e0b1      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009398:	2301      	movs	r3, #1
 800939a:	e0a6      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	22c5      	movs	r2, #197	; 0xc5
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fd12 	bl	8008dcc <SDIO_GetCommandResponse>
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d001      	beq.n	80093b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e099      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80093b6:	2100      	movs	r1, #0
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fd14 	bl	8008de6 <SDIO_GetResponse>
 80093be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4b4e      	ldr	r3, [pc, #312]	; (80094fc <SDMMC_GetCmdResp1+0x1d8>)
 80093c4:	4013      	ands	r3, r2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	e08d      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da02      	bge.n	80093da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80093d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093d8:	e087      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	e080      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093f2:	2380      	movs	r3, #128	; 0x80
 80093f4:	e079      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009404:	e071      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009414:	e069      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009424:	e061      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009434:	e059      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009444:	e051      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009454:	e049      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009464:	e041      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009474:	e039      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009484:	e031      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009490:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009494:	e029      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094a4:	e021      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094b4:	e019      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80094c4:	e011      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80094d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094d4:	e009      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80094e4:	e001      	b.n	80094ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3720      	adds	r7, #32
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000000 	.word	0x20000000
 80094f8:	10624dd3 	.word	0x10624dd3
 80094fc:	fdffe008 	.word	0xfdffe008

08009500 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009508:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <SDMMC_GetCmdResp2+0x88>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1f      	ldr	r2, [pc, #124]	; (800958c <SDMMC_GetCmdResp2+0x8c>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	0a5b      	lsrs	r3, r3, #9
 8009514:	f241 3288 	movw	r2, #5000	; 0x1388
 8009518:	fb02 f303 	mul.w	r3, r2, r3
 800951c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1e5a      	subs	r2, r3, #1
 8009522:	60fa      	str	r2, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d102      	bne.n	800952e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800952c:	e026      	b.n	800957c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0ef      	beq.n	800951e <SDMMC_GetCmdResp2+0x1e>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1ea      	bne.n	800951e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954c:	f003 0304 	and.w	r3, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2204      	movs	r2, #4
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800955a:	2304      	movs	r3, #4
 800955c:	e00e      	b.n	800957c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009570:	2301      	movs	r3, #1
 8009572:	e003      	b.n	800957c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	22c5      	movs	r2, #197	; 0xc5
 8009578:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20000000 	.word	0x20000000
 800958c:	10624dd3 	.word	0x10624dd3

08009590 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009598:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <SDMMC_GetCmdResp3+0x74>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <SDMMC_GetCmdResp3+0x78>)
 800959e:	fba2 2303 	umull	r2, r3, r2, r3
 80095a2:	0a5b      	lsrs	r3, r3, #9
 80095a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a8:	fb02 f303 	mul.w	r3, r2, r3
 80095ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	60fa      	str	r2, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095bc:	e01b      	b.n	80095f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0ef      	beq.n	80095ae <SDMMC_GetCmdResp3+0x1e>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1ea      	bne.n	80095ae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2204      	movs	r2, #4
 80095e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ea:	2304      	movs	r3, #4
 80095ec:	e003      	b.n	80095f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	22c5      	movs	r2, #197	; 0xc5
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000000 	.word	0x20000000
 8009608:	10624dd3 	.word	0x10624dd3

0800960c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	460b      	mov	r3, r1
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800961a:	4b35      	ldr	r3, [pc, #212]	; (80096f0 <SDMMC_GetCmdResp6+0xe4>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a35      	ldr	r2, [pc, #212]	; (80096f4 <SDMMC_GetCmdResp6+0xe8>)
 8009620:	fba2 2303 	umull	r2, r3, r2, r3
 8009624:	0a5b      	lsrs	r3, r3, #9
 8009626:	f241 3288 	movw	r2, #5000	; 0x1388
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	61fa      	str	r2, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800963a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800963e:	e052      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ef      	beq.n	8009630 <SDMMC_GetCmdResp6+0x24>
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1ea      	bne.n	8009630 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	f003 0304 	and.w	r3, r3, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2204      	movs	r2, #4
 800966a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800966c:	2304      	movs	r3, #4
 800966e:	e03a      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009682:	2301      	movs	r3, #1
 8009684:	e02f      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff fba0 	bl	8008dcc <SDIO_GetCommandResponse>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	4293      	cmp	r3, r2
 8009694:	d001      	beq.n	800969a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009696:	2301      	movs	r3, #1
 8009698:	e025      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	22c5      	movs	r2, #197	; 0xc5
 800969e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7ff fb9f 	bl	8008de6 <SDIO_GetResponse>
 80096a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d106      	bne.n	80096c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
 80096c0:	e011      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096d0:	e009      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e0:	e001      	b.n	80096e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000000 	.word	0x20000000
 80096f4:	10624dd3 	.word	0x10624dd3

080096f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009700:	4b22      	ldr	r3, [pc, #136]	; (800978c <SDMMC_GetCmdResp7+0x94>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a22      	ldr	r2, [pc, #136]	; (8009790 <SDMMC_GetCmdResp7+0x98>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	0a5b      	lsrs	r3, r3, #9
 800970c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009710:	fb02 f303 	mul.w	r3, r2, r3
 8009714:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1e5a      	subs	r2, r3, #1
 800971a:	60fa      	str	r2, [r7, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009720:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009724:	e02c      	b.n	8009780 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0ef      	beq.n	8009716 <SDMMC_GetCmdResp7+0x1e>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1ea      	bne.n	8009716 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2204      	movs	r2, #4
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009752:	2304      	movs	r3, #4
 8009754:	e014      	b.n	8009780 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009768:	2301      	movs	r3, #1
 800976a:	e009      	b.n	8009780 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2240      	movs	r2, #64	; 0x40
 800977c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
  
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	20000000 	.word	0x20000000
 8009790:	10624dd3 	.word	0x10624dd3

08009794 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009798:	4904      	ldr	r1, [pc, #16]	; (80097ac <MX_FATFS_Init+0x18>)
 800979a:	4805      	ldr	r0, [pc, #20]	; (80097b0 <MX_FATFS_Init+0x1c>)
 800979c:	f000 faa0 	bl	8009ce0 <FATFS_LinkDriver>
 80097a0:	4603      	mov	r3, r0
 80097a2:	461a      	mov	r2, r3
 80097a4:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <MX_FATFS_Init+0x20>)
 80097a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80097a8:	bf00      	nop
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200011f8 	.word	0x200011f8
 80097b0:	0800a1ec 	.word	0x0800a1ec
 80097b4:	200011f4 	.word	0x200011f4

080097b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80097c2:	f000 f896 	bl	80098f2 <BSP_SD_IsDetected>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e012      	b.n	80097f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80097d0:	480b      	ldr	r0, [pc, #44]	; (8009800 <BSP_SD_Init+0x48>)
 80097d2:	f7fc ff0b 	bl	80065ec <HAL_SD_Init>
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d109      	bne.n	80097f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80097e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097e4:	4806      	ldr	r0, [pc, #24]	; (8009800 <BSP_SD_Init+0x48>)
 80097e6:	f7fd fcc1 	bl	800716c <HAL_SD_ConfigWideBusOperation>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80097f4:	79fb      	ldrb	r3, [r7, #7]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000eac 	.word	0x20000eac

08009804 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	68f9      	ldr	r1, [r7, #12]
 800981a:	4806      	ldr	r0, [pc, #24]	; (8009834 <BSP_SD_ReadBlocks_DMA+0x30>)
 800981c:	f7fc ff94 	bl	8006748 <HAL_SD_ReadBlocks_DMA>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20000eac 	.word	0x20000eac

08009838 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	68f9      	ldr	r1, [r7, #12]
 800984e:	4806      	ldr	r0, [pc, #24]	; (8009868 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009850:	f7fd f85a 	bl	8006908 <HAL_SD_WriteBlocks_DMA>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000eac 	.word	0x20000eac

0800986c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009870:	4805      	ldr	r0, [pc, #20]	; (8009888 <BSP_SD_GetCardState+0x1c>)
 8009872:	f7fd fd15 	bl	80072a0 <HAL_SD_GetCardState>
 8009876:	4603      	mov	r3, r0
 8009878:	2b04      	cmp	r3, #4
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2db      	uxtb	r3, r3
}
 8009882:	4618      	mov	r0, r3
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000eac 	.word	0x20000eac

0800988c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4803      	ldr	r0, [pc, #12]	; (80098a4 <BSP_SD_GetCardInfo+0x18>)
 8009898:	f7fd fc3c 	bl	8007114 <HAL_SD_GetCardInfo>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000eac 	.word	0x20000eac

080098a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80098b0:	f000 f818 	bl	80098e4 <BSP_SD_AbortCallback>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80098c4:	f000 f9a8 	bl	8009c18 <BSP_SD_WriteCpltCallback>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80098d8:	f000 f9aa 	bl	8009c30 <BSP_SD_ReadCpltCallback>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0

}
 80098e8:	bf00      	nop
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098f8:	2301      	movs	r3, #1
 80098fa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80098fc:	f000 f80c 	bl	8009918 <BSP_PlatformIsDetected>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009906:	2300      	movs	r3, #0
 8009908:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	b2db      	uxtb	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800991e:	2301      	movs	r3, #1
 8009920:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009922:	2104      	movs	r1, #4
 8009924:	4806      	ldr	r0, [pc, #24]	; (8009940 <BSP_PlatformIsDetected+0x28>)
 8009926:	f7fb f915 	bl	8004b54 <HAL_GPIO_ReadPin>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009930:	2300      	movs	r3, #0
 8009932:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009934:	79fb      	ldrb	r3, [r7, #7]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	40021800 	.word	0x40021800

08009944 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800994c:	f7f8 fb6c 	bl	8002028 <HAL_GetTick>
 8009950:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009952:	e006      	b.n	8009962 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009954:	f7ff ff8a 	bl	800986c <BSP_SD_GetCardState>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800995e:	2300      	movs	r3, #0
 8009960:	e009      	b.n	8009976 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009962:	f7f8 fb61 	bl	8002028 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d8f0      	bhi.n	8009954 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <SD_CheckStatus+0x38>)
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009990:	f7ff ff6c 	bl	800986c <BSP_SD_GetCardState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d107      	bne.n	80099aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <SD_CheckStatus+0x38>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <SD_CheckStatus+0x38>)
 80099a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <SD_CheckStatus+0x38>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b2db      	uxtb	r3, r3
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20000009 	.word	0x20000009

080099bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80099c6:	f7ff fef7 	bl	80097b8 <BSP_SD_Init>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d107      	bne.n	80099e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7ff ffd4 	bl	8009980 <SD_CheckStatus>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <SD_initialize+0x34>)
 80099de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80099e0:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <SD_initialize+0x34>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b2db      	uxtb	r3, r3
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000009 	.word	0x20000009

080099f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff ffbd 	bl	8009980 <SD_CheckStatus>
 8009a06:	4603      	mov	r3, r0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a24:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a28:	f7ff ff8c 	bl	8009944 <SD_CheckStatusWithTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	da01      	bge.n	8009a36 <SD_read+0x26>
  {
    return res;
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	e03b      	b.n	8009aae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	68b8      	ldr	r0, [r7, #8]
 8009a3c:	f7ff fee2 	bl	8009804 <BSP_SD_ReadBlocks_DMA>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d132      	bne.n	8009aac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009a46:	4b1c      	ldr	r3, [pc, #112]	; (8009ab8 <SD_read+0xa8>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009a4c:	f7f8 faec 	bl	8002028 <HAL_GetTick>
 8009a50:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009a52:	bf00      	nop
 8009a54:	4b18      	ldr	r3, [pc, #96]	; (8009ab8 <SD_read+0xa8>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d108      	bne.n	8009a6e <SD_read+0x5e>
 8009a5c:	f7f8 fae4 	bl	8002028 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d9f2      	bls.n	8009a54 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <SD_read+0xa8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
 8009a7a:	e017      	b.n	8009aac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009a7c:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <SD_read+0xa8>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009a82:	f7f8 fad1 	bl	8002028 <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a88:	e007      	b.n	8009a9a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a8a:	f7ff feef 	bl	800986c <BSP_SD_GetCardState>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <SD_read+0x8a>
          {
            res = RES_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009a98:	e008      	b.n	8009aac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009a9a:	f7f8 fac5 	bl	8002028 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	f247 522f 	movw	r2, #29999	; 0x752f
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d9ee      	bls.n	8009a8a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000098 	.word	0x20000098

08009abc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009ad0:	4b24      	ldr	r3, [pc, #144]	; (8009b64 <SD_write+0xa8>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ad6:	f247 5030 	movw	r0, #30000	; 0x7530
 8009ada:	f7ff ff33 	bl	8009944 <SD_CheckStatusWithTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da01      	bge.n	8009ae8 <SD_write+0x2c>
  {
    return res;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	e038      	b.n	8009b5a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f7ff fea3 	bl	8009838 <BSP_SD_WriteBlocks_DMA>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d12f      	bne.n	8009b58 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009af8:	f7f8 fa96 	bl	8002028 <HAL_GetTick>
 8009afc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009afe:	bf00      	nop
 8009b00:	4b18      	ldr	r3, [pc, #96]	; (8009b64 <SD_write+0xa8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <SD_write+0x5e>
 8009b08:	f7f8 fa8e 	bl	8002028 <HAL_GetTick>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d9f2      	bls.n	8009b00 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009b1a:	4b12      	ldr	r3, [pc, #72]	; (8009b64 <SD_write+0xa8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	75fb      	strb	r3, [r7, #23]
 8009b26:	e017      	b.n	8009b58 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <SD_write+0xa8>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b2e:	f7f8 fa7b 	bl	8002028 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b34:	e007      	b.n	8009b46 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b36:	f7ff fe99 	bl	800986c <BSP_SD_GetCardState>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <SD_write+0x8a>
          {
            res = RES_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	75fb      	strb	r3, [r7, #23]
            break;
 8009b44:	e008      	b.n	8009b58 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b46:	f7f8 fa6f 	bl	8002028 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d9ee      	bls.n	8009b36 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000094 	.word	0x20000094

08009b68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08c      	sub	sp, #48	; 0x30
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	603a      	str	r2, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
 8009b74:	460b      	mov	r3, r1
 8009b76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009b7e:	4b25      	ldr	r3, [pc, #148]	; (8009c14 <SD_ioctl+0xac>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <SD_ioctl+0x28>
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e03c      	b.n	8009c0a <SD_ioctl+0xa2>

  switch (cmd)
 8009b90:	79bb      	ldrb	r3, [r7, #6]
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d834      	bhi.n	8009c00 <SD_ioctl+0x98>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <SD_ioctl+0x34>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009bb5 	.word	0x08009bb5
 8009ba4:	08009bcd 	.word	0x08009bcd
 8009ba8:	08009be7 	.word	0x08009be7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bb2:	e028      	b.n	8009c06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bb4:	f107 030c 	add.w	r3, r7, #12
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fe67 	bl	800988c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bca:	e01c      	b.n	8009c06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009bcc:	f107 030c 	add.w	r3, r7, #12
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fe5b 	bl	800988c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009be4:	e00f      	b.n	8009c06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff fe4e 	bl	800988c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	0a5a      	lsrs	r2, r3, #9
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009bfe:	e002      	b.n	8009c06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009c00:	2304      	movs	r3, #4
 8009c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3730      	adds	r7, #48	; 0x30
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000009 	.word	0x20000009

08009c18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009c1c:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <BSP_SD_WriteCpltCallback+0x14>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	601a      	str	r2, [r3, #0]
}
 8009c22:	bf00      	nop
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	20000094 	.word	0x20000094

08009c30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009c34:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <BSP_SD_ReadCpltCallback+0x14>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20000098 	.word	0x20000098

08009c48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c56:	2301      	movs	r3, #1
 8009c58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c5e:	4b1f      	ldr	r3, [pc, #124]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c60:	7a5b      	ldrb	r3, [r3, #9]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d131      	bne.n	8009ccc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c68:	4b1c      	ldr	r3, [pc, #112]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c6a:	7a5b      	ldrb	r3, [r3, #9]
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c72:	2100      	movs	r1, #0
 8009c74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c76:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c78:	7a5b      	ldrb	r3, [r3, #9]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	4a17      	ldr	r2, [pc, #92]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c86:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c88:	7a5b      	ldrb	r3, [r3, #9]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c90:	4413      	add	r3, r2
 8009c92:	79fa      	ldrb	r2, [r7, #7]
 8009c94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c96:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009c98:	7a5b      	ldrb	r3, [r3, #9]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	b2d1      	uxtb	r1, r2
 8009ca0:	4a0e      	ldr	r2, [pc, #56]	; (8009cdc <FATFS_LinkDriverEx+0x94>)
 8009ca2:	7251      	strb	r1, [r2, #9]
 8009ca4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ca6:	7dbb      	ldrb	r3, [r7, #22]
 8009ca8:	3330      	adds	r3, #48	; 0x30
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	223a      	movs	r2, #58	; 0x3a
 8009cb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	3302      	adds	r3, #2
 8009cbc:	222f      	movs	r2, #47	; 0x2f
 8009cbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3303      	adds	r3, #3
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	2000009c 	.word	0x2000009c

08009ce0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009cea:	2200      	movs	r2, #0
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff ffaa 	bl	8009c48 <FATFS_LinkDriverEx>
 8009cf4:	4603      	mov	r3, r0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <SysTick_Handler+0x1c>)
 8009d06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d08:	f000 f996 	bl	800a038 <xTaskGetSchedulerState>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d001      	beq.n	8009d16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d12:	f000 fa01 	bl	800a118 <xPortSysTickHandler>
  }
}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	e000e010 	.word	0xe000e010

08009d20 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	1c5a      	adds	r2, r3, #1
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	601a      	str	r2, [r3, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6892      	ldr	r2, [r2, #8]
 8009d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6852      	ldr	r2, [r2, #4]
 8009d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d103      	bne.n	8009d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	1e5a      	subs	r2, r3, #1
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc6:	4b4f      	ldr	r3, [pc, #316]	; (8009f04 <xTaskIncrementTick+0x148>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 808f 	bne.w	8009eee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd0:	4b4d      	ldr	r3, [pc, #308]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd8:	4a4b      	ldr	r2, [pc, #300]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d120      	bne.n	8009e26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de4:	4b49      	ldr	r3, [pc, #292]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <xTaskIncrementTick+0x46>
 8009e04:	4b41      	ldr	r3, [pc, #260]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3f      	ldr	r2, [pc, #252]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	4a3f      	ldr	r2, [pc, #252]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4b3e      	ldr	r3, [pc, #248]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	4a3d      	ldr	r2, [pc, #244]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	f000 f8e9 	bl	8009ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e26:	4b3c      	ldr	r3, [pc, #240]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d349      	bcc.n	8009ec4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e30:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	601a      	str	r2, [r3, #0]
					break;
 8009e42:	e03f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e44:	4b31      	ldr	r3, [pc, #196]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d203      	bcs.n	8009e64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e5c:	4a2e      	ldr	r2, [pc, #184]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e62:	e02f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff ff7d 	bl	8009d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	3318      	adds	r3, #24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff ff74 	bl	8009d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b25      	ldr	r3, [pc, #148]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskIncrementTick+0xd8>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a22      	ldr	r2, [pc, #136]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7ff ff38 	bl	8009d20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d3b8      	bcc.n	8009e30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	e7b5      	b.n	8009e30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ec4:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eca:	4915      	ldr	r1, [pc, #84]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d901      	bls.n	8009ee0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ee0:	4b11      	ldr	r3, [pc, #68]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e004      	b.n	8009ef8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ef8:	697b      	ldr	r3, [r7, #20]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000530 	.word	0x20000530
 8009f08:	20000514 	.word	0x20000514
 8009f0c:	2000050c 	.word	0x2000050c
 8009f10:	20000510 	.word	0x20000510
 8009f14:	20000528 	.word	0x20000528
 8009f18:	2000052c 	.word	0x2000052c
 8009f1c:	20000518 	.word	0x20000518
 8009f20:	200000ac 	.word	0x200000ac
 8009f24:	200000a8 	.word	0x200000a8
 8009f28:	20000524 	.word	0x20000524
 8009f2c:	20000520 	.word	0x20000520

08009f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f36:	4b2a      	ldr	r3, [pc, #168]	; (8009fe0 <vTaskSwitchContext+0xb0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f3e:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f40:	2201      	movs	r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f44:	e046      	b.n	8009fd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f46:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4c:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <vTaskSwitchContext+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e010      	b.n	8009f76 <vTaskSwitchContext+0x46>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	607b      	str	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vTaskSwitchContext+0x3e>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	491d      	ldr	r1, [pc, #116]	; (8009fec <vTaskSwitchContext+0xbc>)
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0e4      	beq.n	8009f54 <vTaskSwitchContext+0x24>
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4a15      	ldr	r2, [pc, #84]	; (8009fec <vTaskSwitchContext+0xbc>)
 8009f96:	4413      	add	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	605a      	str	r2, [r3, #4]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3308      	adds	r3, #8
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d104      	bne.n	8009fba <vTaskSwitchContext+0x8a>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	4a0b      	ldr	r2, [pc, #44]	; (8009ff0 <vTaskSwitchContext+0xc0>)
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <vTaskSwitchContext+0xb8>)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <vTaskSwitchContext+0xc0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3358      	adds	r3, #88	; 0x58
 8009fd0:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <vTaskSwitchContext+0xc4>)
 8009fd2:	6013      	str	r3, [r2, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	20000530 	.word	0x20000530
 8009fe4:	20000524 	.word	0x20000524
 8009fe8:	20000518 	.word	0x20000518
 8009fec:	200000ac 	.word	0x200000ac
 8009ff0:	200000a8 	.word	0x200000a8
 8009ff4:	2000000c 	.word	0x2000000c

08009ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ffe:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <prvResetNextTaskUnblockTime+0x38>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d104      	bne.n	800a012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <prvResetNextTaskUnblockTime+0x3c>)
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295
 800a00e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a010:	e008      	b.n	800a024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a012:	4b07      	ldr	r3, [pc, #28]	; (800a030 <prvResetNextTaskUnblockTime+0x38>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a04      	ldr	r2, [pc, #16]	; (800a034 <prvResetNextTaskUnblockTime+0x3c>)
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	2000050c 	.word	0x2000050c
 800a034:	2000052c 	.word	0x2000052c

0800a038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <xTaskGetSchedulerState+0x34>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a046:	2301      	movs	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	e008      	b.n	800a05e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <xTaskGetSchedulerState+0x38>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a054:	2302      	movs	r3, #2
 800a056:	607b      	str	r3, [r7, #4]
 800a058:	e001      	b.n	800a05e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a05e:	687b      	ldr	r3, [r7, #4]
	}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	2000051c 	.word	0x2000051c
 800a070:	20000530 	.word	0x20000530
	...

0800a080 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <pxCurrentTCBConst2>)
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6808      	ldr	r0, [r1, #0]
 800a086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	f380 8809 	msr	PSP, r0
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	4770      	bx	lr
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst2>:
 800a0a0:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
	...

0800a0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0b0:	f3ef 8009 	mrs	r0, PSP
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	4b15      	ldr	r3, [pc, #84]	; (800a110 <pxCurrentTCBConst>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	f01e 0f10 	tst.w	lr, #16
 800a0c0:	bf08      	it	eq
 800a0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	6010      	str	r0, [r2, #0]
 800a0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0d4:	f380 8811 	msr	BASEPRI, r0
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f7ff ff26 	bl	8009f30 <vTaskSwitchContext>
 800a0e4:	f04f 0000 	mov.w	r0, #0
 800a0e8:	f380 8811 	msr	BASEPRI, r0
 800a0ec:	bc09      	pop	{r0, r3}
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	6808      	ldr	r0, [r1, #0]
 800a0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f6:	f01e 0f10 	tst.w	lr, #16
 800a0fa:	bf08      	it	eq
 800a0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a100:	f380 8809 	msr	PSP, r0
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w

0800a110 <pxCurrentTCBConst>:
 800a110:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop

0800a118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a132:	f7ff fe43 	bl	8009dbc <xTaskIncrementTick>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a13c:	4b06      	ldr	r3, [pc, #24]	; (800a158 <xPortSysTickHandler+0x40>)
 800a13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	2300      	movs	r3, #0
 800a146:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <__libc_init_array>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	4d0d      	ldr	r5, [pc, #52]	; (800a194 <__libc_init_array+0x38>)
 800a160:	4c0d      	ldr	r4, [pc, #52]	; (800a198 <__libc_init_array+0x3c>)
 800a162:	1b64      	subs	r4, r4, r5
 800a164:	10a4      	asrs	r4, r4, #2
 800a166:	2600      	movs	r6, #0
 800a168:	42a6      	cmp	r6, r4
 800a16a:	d109      	bne.n	800a180 <__libc_init_array+0x24>
 800a16c:	4d0b      	ldr	r5, [pc, #44]	; (800a19c <__libc_init_array+0x40>)
 800a16e:	4c0c      	ldr	r4, [pc, #48]	; (800a1a0 <__libc_init_array+0x44>)
 800a170:	f000 f820 	bl	800a1b4 <_init>
 800a174:	1b64      	subs	r4, r4, r5
 800a176:	10a4      	asrs	r4, r4, #2
 800a178:	2600      	movs	r6, #0
 800a17a:	42a6      	cmp	r6, r4
 800a17c:	d105      	bne.n	800a18a <__libc_init_array+0x2e>
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	f855 3b04 	ldr.w	r3, [r5], #4
 800a184:	4798      	blx	r3
 800a186:	3601      	adds	r6, #1
 800a188:	e7ee      	b.n	800a168 <__libc_init_array+0xc>
 800a18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18e:	4798      	blx	r3
 800a190:	3601      	adds	r6, #1
 800a192:	e7f2      	b.n	800a17a <__libc_init_array+0x1e>
 800a194:	0800a268 	.word	0x0800a268
 800a198:	0800a268 	.word	0x0800a268
 800a19c:	0800a268 	.word	0x0800a268
 800a1a0:	0800a26c 	.word	0x0800a26c

0800a1a4 <memset>:
 800a1a4:	4402      	add	r2, r0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d100      	bne.n	800a1ae <memset+0xa>
 800a1ac:	4770      	bx	lr
 800a1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a1b2:	e7f9      	b.n	800a1a8 <memset+0x4>

0800a1b4 <_init>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr

0800a1c0 <_fini>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr
