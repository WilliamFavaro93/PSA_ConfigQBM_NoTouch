
PSA_ConfigQBM_NoTouch_v2_0_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a410  0800a410  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a418  0800a418  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000015d8  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00002000  20001648  20001648  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033d36  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059f2  00000000  00000000  00053dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002770  00000000  00000000  000597c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002550  00000000  00000000  0005bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000780a  00000000  00000000  0005e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fe28  00000000  00000000  00065c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00127e1c  00000000  00000000  00095aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bd8d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa3c  00000000  00000000  001bd92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a364 	.word	0x0800a364

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800a364 	.word	0x0800a364

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Alarm_Init>:
 * @author William Favaro
 * @date 15/09/2022
 * @note This method also enable the alarm
 */
void Alarm_Init(Alarm * Alarm, uint16_t RefreshTimer_ON, uint16_t RefreshTimer_OFF)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
 8000504:	4613      	mov	r3, r2
 8000506:	803b      	strh	r3, [r7, #0]
	Alarm->isEnabled = 1;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
	Alarm->isTriggered = 0;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	705a      	strb	r2, [r3, #1]
	Alarm->RefreshTimer_ON = RefreshTimer_ON;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	887a      	ldrh	r2, [r7, #2]
 8000518:	809a      	strh	r2, [r3, #4]
	Alarm->RefreshTimer_OFF = RefreshTimer_OFF;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	883a      	ldrh	r2, [r7, #0]
 800051e:	80da      	strh	r2, [r3, #6]
	Alarm->Timer = Alarm->RefreshTimer_ON;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	889a      	ldrh	r2, [r3, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	805a      	strh	r2, [r3, #2]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <Alarm_CheckCondition>:
 * @author William Favaro
 * @date 15/09/2022
 * @note This method also enable the alarm
 */
void Alarm_CheckCondition(Alarm * Alarm, uint8_t condition)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
	/* Check if Alarm is Enable */
	if(!Alarm->isEnabled)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d024      	beq.n	8000592 <Alarm_CheckCondition+0x5e>
		return;

	/* Check if Timer is 0 */
	if(!Alarm->Timer)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	885b      	ldrh	r3, [r3, #2]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <Alarm_CheckCondition+0x30>
		Alarm->isTriggered = !Alarm->isTriggered;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf0c      	ite	eq
 8000558:	2301      	moveq	r3, #1
 800055a:	2300      	movne	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	705a      	strb	r2, [r3, #1]

	/* Check the Timer condition */
	if((condition) && (Alarm->isTriggered))
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d007      	beq.n	800057a <Alarm_CheckCondition+0x46>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d003      	beq.n	800057a <Alarm_CheckCondition+0x46>
	{
		Alarm->Timer = Alarm->RefreshTimer_ON;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	889a      	ldrh	r2, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	805a      	strh	r2, [r3, #2]
	}

	if((!condition) && (!Alarm->isTriggered))
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <Alarm_CheckCondition+0x60>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d105      	bne.n	8000594 <Alarm_CheckCondition+0x60>
	{
		Alarm->Timer = Alarm->RefreshTimer_OFF;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	88da      	ldrh	r2, [r3, #6]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	805a      	strh	r2, [r3, #2]
 8000590:	e000      	b.n	8000594 <Alarm_CheckCondition+0x60>
		return;
 8000592:	bf00      	nop
	}
}
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <Alarm_Disable>:
 * @author William Favaro
 * @date 15/09/2022
 * @note This method also enable the alarm
 */
void Alarm_Disable(Alarm * Alarm)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
	Alarm->isEnabled = 0;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
	Alarm->isTriggered = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	705a      	strb	r2, [r3, #1]
	Alarm->Timer = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	805a      	strh	r2, [r3, #2]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <Alarm_Enable>:
 * @author William Favaro
 * @date 15/09/2022
 * @note This method also enable the alarm
 */
void Alarm_Enable(Alarm * Alarm)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	Alarm->isEnabled = 1;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
	Alarm->isTriggered = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	705a      	strb	r2, [r3, #1]
	Alarm->Timer = Alarm->RefreshTimer_ON;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	889a      	ldrh	r2, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	805a      	strh	r2, [r3, #2]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <Alarm_test_Triggered>:
/* Private Function ----------------------------------------------------------*/
#if ALARM_AUTEST
void Alarm_test_Triggered()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	Alarm_Init(&test, 5, 5);
 80005f2:	2205      	movs	r2, #5
 80005f4:	2105      	movs	r1, #5
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <Alarm_test_Triggered+0x64>)
 80005f8:	f7ff ff7e 	bl	80004f8 <Alarm_Init>

	uint8_t condition = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i = 0; i<5; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	e012      	b.n	800062c <Alarm_test_Triggered+0x40>
	{
		Alarm_CheckCondition(&test, condition);
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <Alarm_test_Triggered+0x64>)
 800060c:	f7ff ff92 	bl	8000534 <Alarm_CheckCondition>
		test.Timer--;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <Alarm_test_Triggered+0x64>)
 8000612:	885b      	ldrh	r3, [r3, #2]
 8000614:	3b01      	subs	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <Alarm_test_Triggered+0x64>)
 800061a:	805a      	strh	r2, [r3, #2]
		while(!(test.isTriggered == 0))
 800061c:	bf00      	nop
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <Alarm_test_Triggered+0x64>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1fb      	bne.n	800061e <Alarm_test_Triggered+0x32>
	for(uint8_t i = 0; i<5; i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b04      	cmp	r3, #4
 8000630:	d9e9      	bls.n	8000606 <Alarm_test_Triggered+0x1a>
		{

		}
	}

	Alarm_CheckCondition(&test, condition);
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <Alarm_test_Triggered+0x64>)
 8000638:	f7ff ff7c 	bl	8000534 <Alarm_CheckCondition>
	while(!(test.isTriggered == 1))
 800063c:	bf00      	nop
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <Alarm_test_Triggered+0x64>)
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d1fb      	bne.n	800063e <Alarm_test_Triggered+0x52>
	{

	}
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000534 	.word	0x20000534

08000654 <Alarm_test_FromTriggeredToNoTriggered>:

void Alarm_test_FromTriggeredToNoTriggered()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t condition = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i = 0; i<5; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e012      	b.n	800068a <Alarm_test_FromTriggeredToNoTriggered+0x36>
	{
		Alarm_CheckCondition(&test, condition);
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	4619      	mov	r1, r3
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 800066a:	f7ff ff63 	bl	8000534 <Alarm_CheckCondition>
		test.Timer--;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 8000670:	885b      	ldrh	r3, [r3, #2]
 8000672:	3b01      	subs	r3, #1
 8000674:	b29a      	uxth	r2, r3
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 8000678:	805a      	strh	r2, [r3, #2]
		while(!(test.isTriggered == 1))
 800067a:	bf00      	nop
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d1fb      	bne.n	800067c <Alarm_test_FromTriggeredToNoTriggered+0x28>
	for(uint8_t i = 0; i<5; i++)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d9e9      	bls.n	8000664 <Alarm_test_FromTriggeredToNoTriggered+0x10>
		{
			/* test failed */
		}
	}

	Alarm_CheckCondition(&test, condition);
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	4619      	mov	r1, r3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 8000696:	f7ff ff4d 	bl	8000534 <Alarm_CheckCondition>
	while(!(test.isTriggered == 0))
 800069a:	bf00      	nop
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <Alarm_test_FromTriggeredToNoTriggered+0x5c>)
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1fb      	bne.n	800069c <Alarm_test_FromTriggeredToNoTriggered+0x48>
	{

	}
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000534 	.word	0x20000534

080006b4 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger>:

void Alarm_test_DisabledAlarm_AlarmMustNotTrigger()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	uint8_t condition = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71bb      	strb	r3, [r7, #6]

	Alarm_Disable(&test);
 80006be:	481c      	ldr	r0, [pc, #112]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006c0:	f7ff ff6d 	bl	800059e <Alarm_Disable>

	for(uint8_t i = 0; i<5; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	e012      	b.n	80006f0 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x3c>
	{
		Alarm_CheckCondition(&test, condition);
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4818      	ldr	r0, [pc, #96]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006d0:	f7ff ff30 	bl	8000534 <Alarm_CheckCondition>
		test.Timer--;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006d6:	885b      	ldrh	r3, [r3, #2]
 80006d8:	3b01      	subs	r3, #1
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006de:	805a      	strh	r2, [r3, #2]
		while(!(test.isTriggered == 0))
 80006e0:	bf00      	nop
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1fb      	bne.n	80006e2 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x2e>
	for(uint8_t i = 0; i<5; i++)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	3301      	adds	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d9e9      	bls.n	80006ca <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x16>
		{
			/* test failed */
		}
	}

	Alarm_CheckCondition(&test, condition);
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 80006fc:	f7ff ff1a 	bl	8000534 <Alarm_CheckCondition>
	while(!(test.isTriggered == 0))
 8000700:	bf00      	nop
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1fb      	bne.n	8000702 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x4e>
	{
		/* test failed */
	}

	Alarm_Enable(&test);
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 800070c:	f7ff ff5a 	bl	80005c4 <Alarm_Enable>

	Alarm_CheckCondition(&test, condition);
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 8000716:	f7ff ff0d 	bl	8000534 <Alarm_CheckCondition>
	while(!(test.isTriggered == 0))
 800071a:	bf00      	nop
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x7c>)
 800071e:	785b      	ldrb	r3, [r3, #1]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1fb      	bne.n	800071c <Alarm_test_DisabledAlarm_AlarmMustNotTrigger+0x68>
	{
		/* test failed */
	}
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000534 	.word	0x20000534

08000734 <Alarm_test_ConditionKeepsChanging>:

void Alarm_test_ConditionKeepsChanging()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint8_t condition = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i<15; i++)
 800073e:	2300      	movs	r3, #0
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	e019      	b.n	8000778 <Alarm_test_ConditionKeepsChanging+0x44>
	{
		condition = !(condition);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	71fb      	strb	r3, [r7, #7]
		Alarm_CheckCondition(&test, condition);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4619      	mov	r1, r3
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <Alarm_test_ConditionKeepsChanging+0x54>)
 8000758:	f7ff feec 	bl	8000534 <Alarm_CheckCondition>
		test.Timer--;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <Alarm_test_ConditionKeepsChanging+0x54>)
 800075e:	885b      	ldrh	r3, [r3, #2]
 8000760:	3b01      	subs	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <Alarm_test_ConditionKeepsChanging+0x54>)
 8000766:	805a      	strh	r2, [r3, #2]
		while(!(test.isTriggered == 0))
 8000768:	bf00      	nop
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <Alarm_test_ConditionKeepsChanging+0x54>)
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1fb      	bne.n	800076a <Alarm_test_ConditionKeepsChanging+0x36>
	for(uint8_t i = 0; i<15; i++)
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	3301      	adds	r3, #1
 8000776:	71bb      	strb	r3, [r7, #6]
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	2b0e      	cmp	r3, #14
 800077c:	d9e2      	bls.n	8000744 <Alarm_test_ConditionKeepsChanging+0x10>
		{
			/* test failed */
		}
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000534 	.word	0x20000534

0800078c <Alarm_test_all>:
#endif /* ALARM_AUTEST */

void Alarm_test_all()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	Alarm_test_Triggered();
 8000790:	f7ff ff2c 	bl	80005ec <Alarm_test_Triggered>
	Alarm_test_FromTriggeredToNoTriggered();
 8000794:	f7ff ff5e 	bl	8000654 <Alarm_test_FromTriggeredToNoTriggered>
	Alarm_test_DisabledAlarm_AlarmMustNotTrigger();
 8000798:	f7ff ff8c 	bl	80006b4 <Alarm_test_DisabledAlarm_AlarmMustNotTrigger>
	Alarm_test_ConditionKeepsChanging();
 800079c:	f7ff ffca 	bl	8000734 <Alarm_test_ConditionKeepsChanging>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f001 fd36 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f82e 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 fd30 	bl	8001214 <MX_GPIO_Init>
  MX_CRC_Init();
 80007b4:	f000 f99a 	bl	8000aec <MX_CRC_Init>
  MX_DMA2D_Init();
 80007b8:	f000 f9ac 	bl	8000b14 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80007bc:	f000 f9dc 	bl	8000b78 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80007c0:	f000 fcd8 	bl	8001174 <MX_FMC_Init>
  MX_LTDC_Init();
 80007c4:	f000 fb34 	bl	8000e30 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80007c8:	f000 fbb0 	bl	8000f2c <MX_QUADSPI_Init>
  MX_I2C1_Init();
 80007cc:	f000 fad4 	bl	8000d78 <MX_I2C1_Init>
  MX_CAN1_Init();
 80007d0:	f000 f8e4 	bl	800099c <MX_CAN1_Init>
  MX_CAN2_Init();
 80007d4:	f000 f936 	bl	8000a44 <MX_CAN2_Init>
  MX_SPI2_Init();
 80007d8:	f000 fbf4 	bl	8000fc4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80007dc:	f000 f88a 	bl	80008f4 <MX_ADC1_Init>
//  MX_IWDG_Init();
  MX_TIM2_Init();
 80007e0:	f000 fc26 	bl	8001030 <MX_TIM2_Init>
  MX_I2C2_Init();
 80007e4:	f000 faf6 	bl	8000dd4 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 80007e8:	f000 fc70 	bl	80010cc <MX_USART6_UART_Init>
  MX_SDIO_SD_Init();
 80007ec:	f000 fbca 	bl	8000f84 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80007f0:	f009 f8ac 	bl	800994c <MX_FATFS_Init>
  MX_DMA_Init();
 80007f4:	f000 fc96 	bl	8001124 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  Alarm_test_all();
 80007f8:	f7ff ffc8 	bl	800078c <Alarm_test_all>
  HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
 80007fc:	2108      	movs	r1, #8
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <main+0x64>)
 8000800:	f004 fb07 	bl	8004e12 <HAL_GPIO_TogglePin>
  while(1)
 8000804:	e7fe      	b.n	8000804 <main+0x60>
 8000806:	bf00      	nop
 8000808:	40022800 	.word	0x40022800

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2234      	movs	r2, #52	; 0x34
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f009 fd9a 	bl	800a354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <SystemClock_Config+0xe0>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <SystemClock_Config+0xe0>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <SystemClock_Config+0xe0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SystemClock_Config+0xe4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <SystemClock_Config+0xe4>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <SystemClock_Config+0xe4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000868:	2309      	movs	r3, #9
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000884:	23b4      	movs	r3, #180	; 0xb4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800088c:	2308      	movs	r3, #8
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000890:	2306      	movs	r3, #6
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4618      	mov	r0, r3
 800089a:	f005 fcff 	bl	800629c <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008a4:	f000 fe32 	bl	800150c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a8:	f004 ff7a 	bl	80057a0 <HAL_PWREx_EnableOverDrive>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008b2:	f000 fe2b 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2105      	movs	r1, #5
 80008d4:	4618      	mov	r0, r3
 80008d6:	f005 f875 	bl	80059c4 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008e0:	f000 fe14 	bl	800150c <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	; 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000906:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_ADC1_Init+0x98>)
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <MX_ADC1_Init+0x9c>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_ADC1_Init+0x98>)
 800090e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_ADC1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_ADC1_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_ADC1_Init+0x98>)
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <MX_ADC1_Init+0xa0>)
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_ADC1_Init+0x98>)
 8000942:	2201      	movs	r2, #1
 8000944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_ADC1_Init+0x98>)
 8000950:	2201      	movs	r2, #1
 8000952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_ADC1_Init+0x98>)
 8000956:	f001 fcc5 	bl	80022e4 <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 fdd4 	bl	800150c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_ADC1_Init+0xa4>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_ADC1_Init+0x98>)
 8000976:	f001 fcf9 	bl	800236c <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 fdc4 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000ba8 	.word	0x20000ba8
 8000990:	40012000 	.word	0x40012000
 8000994:	0f000001 	.word	0x0f000001
 8000998:	10000012 	.word	0x10000012

0800099c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009a4:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_CAN1_Init+0xa4>)
 80009a6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 250;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009aa:	22fa      	movs	r2, #250	; 0xfa
 80009ac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009bc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_CAN1_Init+0xa0>)
 80009ee:	f001 feeb 	bl	80027c8 <HAL_CAN_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 fd88 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN1_Filter = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2228      	movs	r2, #40	; 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 fca6 	bl	800a354 <memset>

  CAN1_Filter.FilterActivation = CAN_FILTER_ENABLE;		/* To enable/disable the filter */
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  CAN1_Filter.FilterBank = 9;							/* You can assign any filterbanks from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank */
 8000a0c:	2309      	movs	r3, #9
 8000a0e:	617b      	str	r3, [r7, #20]
  CAN1_Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  CAN1_Filter.FilterIdHigh = 0x0000 << 5;				/* */
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  CAN1_Filter.FilterIdLow = 0x0000;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  CAN1_Filter.FilterMode = CAN_FILTERMODE_IDMASK;		/* If all the 1 matched with the sended ID. The message will be not filter out */
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  CAN1_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
  CAN1_Filter.SlaveStartFilterBank = 14; 				/* FilterBank from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank*/
 8000a24:	230e      	movs	r3, #14
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN1_Filter);
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_CAN1_Init+0xa0>)
 8000a2e:	f001 ffc7 	bl	80029c0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000ff0 	.word	0x20000ff0
 8000a40:	40006400 	.word	0x40006400

08000a44 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <MX_CAN2_Init+0xa4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 40;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a64:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a68:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000a96:	f001 fe97 	bl	80027c8 <HAL_CAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000aa0:	f000 fd34 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef CAN2_Filter = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f009 fc52 	bl	800a354 <memset>
  CAN2_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  CAN2_Filter.FilterBank = 18;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	617b      	str	r3, [r7, #20]
  CAN2_Filter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  CAN2_Filter.FilterIdHigh = 0x701 << 5;
 8000abc:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000ac0:	603b      	str	r3, [r7, #0]
  CAN2_Filter.FilterIdLow = 0x0000;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  CAN2_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  CAN2_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  CAN2_Filter.SlaveStartFilterBank = 14;
 8000ace:	230e      	movs	r3, #14
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &CAN2_Filter);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_CAN2_Init+0xa0>)
 8000ad8:	f001 ff72 	bl	80029c0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000bf0 	.word	0x20000bf0
 8000ae8:	40006800 	.word	0x40006800

08000aec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_CRC_Init+0x20>)
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <MX_CRC_Init+0x24>)
 8000af4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_CRC_Init+0x20>)
 8000af8:	f002 fc66 	bl	80033c8 <HAL_CRC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b02:	f000 fd03 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000874 	.word	0x20000874
 8000b10:	40023000 	.word	0x40023000

08000b14 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MX_DMA2D_Init+0x60>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b4a:	f002 fff7 	bl	8003b3c <HAL_DMA2D_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000b54:	f000 fcda 	bl	800150c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_DMA2D_Init+0x5c>)
 8000b5c:	f003 f948 	bl	8003df0 <HAL_DMA2D_ConfigLayer>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000b66:	f000 fcd1 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000f68 	.word	0x20000f68
 8000b74:	4002b000 	.word	0x4002b000

08000b78 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0aa      	sub	sp, #168	; 0xa8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f009 fbde 	bl	800a354 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bae:	2234      	movs	r2, #52	; 0x34
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f009 fbce 	bl	800a354 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	222c      	movs	r2, #44	; 0x2c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f009 fbc8 	bl	800a354 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bc6:	4a6b      	ldr	r2, [pc, #428]	; (8000d74 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000bca:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bd6:	4b66      	ldr	r3, [pc, #408]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000bdc:	237d      	movs	r3, #125	; 0x7d
 8000bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	485e      	ldr	r0, [pc, #376]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bf6:	f003 f98d 	bl	8003f14 <HAL_DSI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 fc84 	bl	800150c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000c36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	484c      	ldr	r0, [pc, #304]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c3e:	f003 fe17 	bl	8004870 <HAL_DSI_ConfigHostTimeouts>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000c48:	f000 fc60 	bl	800150c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000c4c:	231c      	movs	r3, #28
 8000c4e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000c50:	2321      	movs	r3, #33	; 0x21
 8000c52:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000c54:	230f      	movs	r3, #15
 8000c56:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c58:	2319      	movs	r3, #25
 8000c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4841      	ldr	r0, [pc, #260]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c6c:	f003 fd96 	bl	800479c <HAL_DSI_ConfigPhyTimer>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000c76:	f000 fc49 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	483c      	ldr	r0, [pc, #240]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c7e:	f003 fd65 	bl	800474c <HAL_DSI_ConfigFlowControl>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000c88:	f000 fc40 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c90:	4837      	ldr	r0, [pc, #220]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c92:	f003 feb3 	bl	80049fc <HAL_DSI_SetLowPowerRXFilter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000c9c:	f000 fc36 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4833      	ldr	r0, [pc, #204]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ca4:	f003 fa50 	bl	8004148 <HAL_DSI_ConfigErrorMonitor>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000cae:	f000 fc2d 	bl	800150c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000cee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cf2:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d06:	f003 fcc3 	bl	8004690 <HAL_DSI_ConfigCommand>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000d10:	f000 fbfc 	bl	800150c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000d1c:	23c8      	movs	r3, #200	; 0xc8
 8000d1e:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000d20:	2310      	movs	r3, #16
 8000d22:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d46:	f003 fbcb 	bl	80044e0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000d50:	f000 fbdc 	bl	800150c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d58:	f003 fb9a 	bl	8004490 <HAL_DSI_SetGenericVCID>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000d62:	f000 fbd3 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	37a8      	adds	r7, #168	; 0xa8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000adc 	.word	0x20000adc
 8000d74:	40016c00 	.word	0x40016c00

08000d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_I2C1_Init+0x54>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_I2C1_Init+0x58>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_I2C1_Init+0x50>)
 8000db6:	f004 f847 	bl	8004e48 <HAL_I2C_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc0:	f000 fba4 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000814 	.word	0x20000814
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	00061a80 	.word	0x00061a80

08000dd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <MX_I2C2_Init+0x58>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000de0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000de4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_I2C2_Init+0x54>)
 8000e14:	f004 f818 	bl	8004e48 <HAL_I2C_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000e1e:	f000 fb75 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000a84 	.word	0x20000a84
 8000e2c:	40005800 	.word	0x40005800

08000e30 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2234      	movs	r2, #52	; 0x34
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fa89 	bl	800a354 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e44:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <MX_LTDC_Init+0xf8>)
 8000e46:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e7a:	22ca      	movs	r2, #202	; 0xca
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e88:	22cb      	movs	r2, #203	; 0xcb
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e8e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000eac:	481d      	ldr	r0, [pc, #116]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000eae:	f004 f90f 	bl	80050d0 <HAL_LTDC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 fb28 	bl	800150c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000ec0:	23c8      	movs	r3, #200	; 0xc8
 8000ec2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000ec8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ecc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ee4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8000eea:	23c8      	movs	r3, #200	; 0xc8
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000eee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_LTDC_Init+0xf4>)
 8000f0e:	f004 fa71 	bl	80053f4 <HAL_LTDC_ConfigLayer>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000f18:	f000 faf8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3738      	adds	r7, #56	; 0x38
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000b00 	.word	0x20000b00
 8000f28:	40016800 	.word	0x40016800

08000f2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <MX_QUADSPI_Init+0x54>)
 8000f34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f4a:	221b      	movs	r2, #27
 8000f4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f54:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_QUADSPI_Init+0x50>)
 8000f6a:	f004 fc69 	bl	8005840 <HAL_QSPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000f74:	f000 faca 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000108c 	.word	0x2000108c
 8000f80:	a0001000 	.word	0xa0001000

08000f84 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <MX_SDIO_SD_Init+0x3c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <MX_SDIO_SD_Init+0x38>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000e94 	.word	0x20000e94
 8000fc0:	40012c00 	.word	0x40012c00

08000fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI2_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI2_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI2_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI2_Init+0x64>)
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI2_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI2_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI2_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI2_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI2_Init+0x64>)
 8001016:	f006 ff12 	bl	8007e3e <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fa74 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200005a0 	.word	0x200005a0
 800102c:	40003800 	.word	0x40003800

08001030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_TIM2_Init+0x98>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 -1;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001056:	f242 3227 	movw	r2, #8999	; 0x2327
 800105a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001064:	f242 7210 	movw	r2, #10000	; 0x2710
 8001068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_TIM2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001078:	f006 ff6a 	bl	8007f50 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001082:	f000 fa43 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_TIM2_Init+0x98>)
 8001094:	f007 f924 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800109e:	f000 fa35 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_TIM2_Init+0x98>)
 80010b0:	f007 fb40 	bl	8008734 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 fa27 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000fa8 	.word	0x20000fa8

080010cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_USART6_UART_Init+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART6_UART_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART6_UART_Init+0x50>)
 8001108:	f007 fba4 	bl	8008854 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 f9fb 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000f24 	.word	0x20000f24
 8001120:	40011400 	.word	0x40011400

08001124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_DMA_Init+0x4c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <MX_DMA_Init+0x4c>)
 8001134:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_DMA_Init+0x4c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	203b      	movs	r0, #59	; 0x3b
 800114c:	f002 f912 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001150:	203b      	movs	r0, #59	; 0x3b
 8001152:	f002 f92b 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2045      	movs	r0, #69	; 0x45
 800115c:	f002 f90a 	bl	8003374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001160:	2045      	movs	r0, #69	; 0x45
 8001162:	f002 f923 	bl	80033ac <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_FMC_Init+0x98>)
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <MX_FMC_Init+0x9c>)
 8001190:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_FMC_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_FMC_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_FMC_Init+0x98>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_FMC_Init+0x98>)
 80011a6:	2220      	movs	r2, #32
 80011a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_FMC_Init+0x98>)
 80011ac:	2240      	movs	r2, #64	; 0x40
 80011ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_FMC_Init+0x98>)
 80011b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_FMC_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_FMC_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_FMC_Init+0x98>)
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_FMC_Init+0x98>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011d8:	2307      	movs	r3, #7
 80011da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011e0:	2307      	movs	r3, #7
 80011e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_FMC_Init+0x98>)
 80011f6:	f006 fdee 	bl	8007dd6 <HAL_SDRAM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001200:	f000 f984 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000102c 	.word	0x2000102c
 8001210:	a0000140 	.word	0xa0000140

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	; 0x40
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
 800122e:	4b8f      	ldr	r3, [pc, #572]	; (800146c <MX_GPIO_Init+0x258>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a8e      	ldr	r2, [pc, #568]	; (800146c <MX_GPIO_Init+0x258>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b8c      	ldr	r3, [pc, #560]	; (800146c <MX_GPIO_Init+0x258>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <MX_GPIO_Init+0x258>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a87      	ldr	r2, [pc, #540]	; (800146c <MX_GPIO_Init+0x258>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <MX_GPIO_Init+0x258>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	4b81      	ldr	r3, [pc, #516]	; (800146c <MX_GPIO_Init+0x258>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a80      	ldr	r2, [pc, #512]	; (800146c <MX_GPIO_Init+0x258>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b7e      	ldr	r3, [pc, #504]	; (800146c <MX_GPIO_Init+0x258>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	4b7a      	ldr	r3, [pc, #488]	; (800146c <MX_GPIO_Init+0x258>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a79      	ldr	r2, [pc, #484]	; (800146c <MX_GPIO_Init+0x258>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b77      	ldr	r3, [pc, #476]	; (800146c <MX_GPIO_Init+0x258>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	4b73      	ldr	r3, [pc, #460]	; (800146c <MX_GPIO_Init+0x258>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a72      	ldr	r2, [pc, #456]	; (800146c <MX_GPIO_Init+0x258>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b70      	ldr	r3, [pc, #448]	; (800146c <MX_GPIO_Init+0x258>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b6c      	ldr	r3, [pc, #432]	; (800146c <MX_GPIO_Init+0x258>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a6b      	ldr	r2, [pc, #428]	; (800146c <MX_GPIO_Init+0x258>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b69      	ldr	r3, [pc, #420]	; (800146c <MX_GPIO_Init+0x258>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <MX_GPIO_Init+0x258>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a64      	ldr	r2, [pc, #400]	; (800146c <MX_GPIO_Init+0x258>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <MX_GPIO_Init+0x258>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b5e      	ldr	r3, [pc, #376]	; (800146c <MX_GPIO_Init+0x258>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a5d      	ldr	r2, [pc, #372]	; (800146c <MX_GPIO_Init+0x258>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <MX_GPIO_Init+0x258>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b57      	ldr	r3, [pc, #348]	; (800146c <MX_GPIO_Init+0x258>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a56      	ldr	r2, [pc, #344]	; (800146c <MX_GPIO_Init+0x258>)
 8001314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <MX_GPIO_Init+0x258>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <MX_GPIO_Init+0x258>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a4f      	ldr	r2, [pc, #316]	; (800146c <MX_GPIO_Init+0x258>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b4d      	ldr	r3, [pc, #308]	; (800146c <MX_GPIO_Init+0x258>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <MX_GPIO_Init+0x258>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a48      	ldr	r2, [pc, #288]	; (800146c <MX_GPIO_Init+0x258>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <MX_GPIO_Init+0x258>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4843      	ldr	r0, [pc, #268]	; (8001470 <MX_GPIO_Init+0x25c>)
 8001364:	f003 fd3c 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2110      	movs	r1, #16
 800136c:	4841      	ldr	r0, [pc, #260]	; (8001474 <MX_GPIO_Init+0x260>)
 800136e:	f003 fd37 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4840      	ldr	r0, [pc, #256]	; (8001478 <MX_GPIO_Init+0x264>)
 8001378:	f003 fd32 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	21c0      	movs	r1, #192	; 0xc0
 8001380:	483e      	ldr	r0, [pc, #248]	; (800147c <MX_GPIO_Init+0x268>)
 8001382:	f003 fd2d 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_blue_Pin */
  GPIO_InitStruct.Pin = LED_blue_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800138a:	2311      	movs	r3, #17
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_blue_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139a:	4619      	mov	r1, r3
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <MX_GPIO_Init+0x25c>)
 800139e:	f003 fb5b 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a2:	2304      	movs	r3, #4
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	4832      	ldr	r0, [pc, #200]	; (8001480 <MX_GPIO_Init+0x26c>)
 80013b6:	f003 fb4f 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80013ba:	2306      	movs	r3, #6
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ca:	4619      	mov	r1, r3
 80013cc:	4829      	ldr	r0, [pc, #164]	; (8001474 <MX_GPIO_Init+0x260>)
 80013ce:	f003 fb43 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d2:	2310      	movs	r3, #16
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <MX_GPIO_Init+0x260>)
 80013ea:	f003 fb35 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ee:	2310      	movs	r3, #16
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001402:	4619      	mov	r1, r3
 8001404:	481c      	ldr	r0, [pc, #112]	; (8001478 <MX_GPIO_Init+0x264>)
 8001406:	f003 fb27 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800140e:	2311      	movs	r3, #17
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141e:	4619      	mov	r1, r3
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <MX_GPIO_Init+0x268>)
 8001422:	f003 fb19 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8001426:	23e0      	movs	r3, #224	; 0xe0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_GPIO_Init+0x260>)
 8001442:	f003 fb09 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001446:	2340      	movs	r3, #64	; 0x40
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_GPIO_Init+0x268>)
 800145e:	f003 fafb 	bl	8004a58 <HAL_GPIO_Init>

}
 8001462:	bf00      	nop
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40022800 	.word	0x40022800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020800 	.word	0x40020800
 800147c:	40021c00 	.word	0x40021c00
 8001480:	40021800 	.word	0x40021800

08001484 <HAL_CAN_RxFifo1MsgPendingCallback>:

	/* DateTime */
	DateTime_Init(2022, 7, 11, 10, 25, 0);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	PSA.CAN_2.State = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	f107 0214 	add.w	r2, r7, #20
 8001494:	2101      	movs	r1, #1
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f001 fb72 	bl	8002b80 <HAL_CAN_GetRxMessage>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80014a2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	if(!PSA.CAN_2.State)
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80014a8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d113      	bne.n	80014d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
	{
		if((RxHeader.StdId == 0x701) && (RxHeader.DLC == 1))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f240 7201 	movw	r2, #1793	; 0x701
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10e      	bne.n	80014d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10b      	bne.n	80014d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		{
			/* Valve are working -> Refresh Valve Timer */
			HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
 80014c0:	2108      	movs	r1, #8
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80014c4:	f003 fca5 	bl	8004e12 <HAL_GPIO_TogglePin>
			PSA.Time.ValveAlive_ReceiveMessageTimer = PSA.Time.ValveAlive_SendMessageRefresh;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80014ca:	8a5a      	ldrh	r2, [r3, #18]
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80014ce:	829a      	strh	r2, [r3, #20]
			PSA.CAN_2.ReceiveAliveMessage = RxData[0];
 80014d0:	7b3a      	ldrb	r2, [r7, #12]
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80014d4:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	}
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200010d8 	.word	0x200010d8
 80014e4:	40022800 	.word	0x40022800

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f000 feaf 	bl	800225c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40001000 	.word	0x40001000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x54>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_MspInit+0x54>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x54>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x54>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	f06f 0001 	mvn.w	r0, #1
 800155e:	f001 ff09 	bl	8003374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_ADC_MspInit+0x3c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10d      	bne.n	800159e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_ADC_MspInit+0x40>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_ADC_MspInit+0x40>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_ADC_MspInit+0x40>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40012000 	.word	0x40012000
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_CAN_MspInit+0x14c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d13e      	bne.n	8001654 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_CAN_MspInit+0x150>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_CAN_MspInit+0x150>)
 80015de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <HAL_CAN_MspInit+0x150>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d10d      	bne.n	8001604 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a45      	ldr	r2, [pc, #276]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <HAL_CAN_MspInit+0x154>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <HAL_CAN_MspInit+0x154>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6313      	str	r3, [r2, #48]	; 0x30
 8001614:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001620:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001632:	2309      	movs	r3, #9
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4833      	ldr	r0, [pc, #204]	; (800170c <HAL_CAN_MspInit+0x158>)
 800163e:	f003 fa0b 	bl	8004a58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2105      	movs	r1, #5
 8001646:	2014      	movs	r0, #20
 8001648:	f001 fe94 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800164c:	2014      	movs	r0, #20
 800164e:	f001 fead 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001652:	e050      	b.n	80016f6 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_CAN_MspInit+0x15c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d14b      	bne.n	80016f6 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_CAN_MspInit+0x150>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a20      	ldr	r2, [pc, #128]	; (8001704 <HAL_CAN_MspInit+0x150>)
 8001682:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_CAN_MspInit+0x150>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d10d      	bne.n	80016a8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_CAN_MspInit+0x154>)
 8001696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_CAN_MspInit+0x154>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a15      	ldr	r2, [pc, #84]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_CAN_MspInit+0x154>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80016c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80016d6:	2309      	movs	r3, #9
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <HAL_CAN_MspInit+0x160>)
 80016e2:	f003 f9b9 	bl	8004a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2041      	movs	r0, #65	; 0x41
 80016ec:	f001 fe42 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80016f0:	2041      	movs	r0, #65	; 0x41
 80016f2:	f001 fe5b 	bl	80033ac <HAL_NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40006400 	.word	0x40006400
 8001704:	2000008c 	.word	0x2000008c
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000
 8001710:	40006800 	.word	0x40006800
 8001714:	40020400 	.word	0x40020400

08001718 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_CRC_MspInit+0x3c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d10d      	bne.n	8001746 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_CRC_MspInit+0x40>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_CRC_MspInit+0x40>)
 8001734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_CRC_MspInit+0x40>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023000 	.word	0x40023000
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_DMA2D_MspInit+0x48>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d115      	bne.n	800179a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_DMA2D_MspInit+0x4c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_DMA2D_MspInit+0x4c>)
 8001778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_DMA2D_MspInit+0x4c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2105      	movs	r1, #5
 800178e:	205a      	movs	r0, #90	; 0x5a
 8001790:	f001 fdf0 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001794:	205a      	movs	r0, #90	; 0x5a
 8001796:	f001 fe09 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	4002b000 	.word	0x4002b000
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_DSI_MspInit+0x94>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d133      	bne.n	8001836 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_DSI_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001806:	2304      	movs	r3, #4
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001816:	230d      	movs	r3, #13
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_DSI_MspInit+0x9c>)
 8001822:	f003 f919 	bl	8004a58 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	205c      	movs	r0, #92	; 0x5c
 800182c:	f001 fda2 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001830:	205c      	movs	r0, #92	; 0x5c
 8001832:	f001 fdbb 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40016c00 	.word	0x40016c00
 8001844:	40023800 	.word	0x40023800
 8001848:	40022400 	.word	0x40022400

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_I2C_MspInit+0xe8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12d      	bne.n	80018ca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800188a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001890:	2312      	movs	r3, #18
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189c:	2304      	movs	r3, #4
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4825      	ldr	r0, [pc, #148]	; (800193c <HAL_I2C_MspInit+0xf0>)
 80018a8:	f003 f8d6 	bl	8004a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018c8:	e030      	b.n	800192c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_I2C_MspInit+0xf4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d12b      	bne.n	800192c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_I2C_MspInit+0xec>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018f0:	2330      	movs	r3, #48	; 0x30
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001900:	2304      	movs	r3, #4
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	480e      	ldr	r0, [pc, #56]	; (8001944 <HAL_I2C_MspInit+0xf8>)
 800190c:	f003 f8a4 	bl	8004a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_I2C_MspInit+0xec>)
 800191a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_I2C_MspInit+0xec>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40005400 	.word	0x40005400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020400 	.word	0x40020400
 8001940:	40005800 	.word	0x40005800
 8001944:	40021c00 	.word	0x40021c00

08001948 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b092      	sub	sp, #72	; 0x48
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	223c      	movs	r2, #60	; 0x3c
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f008 fcfb 	bl	800a354 <memset>
  if(hltdc->Instance==LTDC)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <HAL_LTDC_MspInit+0x78>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d127      	bne.n	80019b8 <HAL_LTDC_MspInit+0x70>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001968:	2308      	movs	r3, #8
 800196a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800196c:	2332      	movs	r3, #50	; 0x32
 800196e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fa4f 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001988:	f7ff fdc0 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_LTDC_MspInit+0x7c>)
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_LTDC_MspInit+0x7c>)
 8001996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800199a:	6453      	str	r3, [r2, #68]	; 0x44
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_LTDC_MspInit+0x7c>)
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2105      	movs	r1, #5
 80019ac:	2058      	movs	r0, #88	; 0x58
 80019ae:	f001 fce1 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80019b2:	2058      	movs	r0, #88	; 0x58
 80019b4:	f001 fcfa 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3748      	adds	r7, #72	; 0x48
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40016800 	.word	0x40016800
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_QSPI_MspInit+0xe4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d15b      	bne.n	8001aa2 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6393      	str	r3, [r2, #56]	; 0x38
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <HAL_QSPI_MspInit+0xec>)
 8001a5a:	f002 fffd 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 8001a5e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001a70:	2309      	movs	r3, #9
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_QSPI_MspInit+0xf0>)
 8001a7c:	f002 ffec 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001a92:	230a      	movs	r3, #10
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_QSPI_MspInit+0xf0>)
 8001a9e:	f002 ffdb 	bl	8004a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	a0001000 	.word	0xa0001000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40021400 	.word	0x40021400

08001abc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b09a      	sub	sp, #104	; 0x68
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	223c      	movs	r2, #60	; 0x3c
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f008 fc39 	bl	800a354 <memset>
  if(hsd->Instance==SDIO)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_SD_MspInit+0x210>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f040 80eb 	bne.w	8001cc4 <HAL_SD_MspInit+0x208>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 8001aee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001af2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001af8:	2300      	movs	r3, #0
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 f98d 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001b0c:	f7ff fcfe 	bl	800150c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	4b6e      	ldr	r3, [pc, #440]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	4a6d      	ldr	r2, [pc, #436]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	4b67      	ldr	r3, [pc, #412]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a66      	ldr	r2, [pc, #408]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a5f      	ldr	r2, [pc, #380]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_SD_MspInit+0x214>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b76:	230c      	movs	r3, #12
 8001b78:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4854      	ldr	r0, [pc, #336]	; (8001cd4 <HAL_SD_MspInit+0x218>)
 8001b82:	f002 ff69 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8001b86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	484c      	ldr	r0, [pc, #304]	; (8001cd4 <HAL_SD_MspInit+0x218>)
 8001ba4:	f002 ff58 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4845      	ldr	r0, [pc, #276]	; (8001cd8 <HAL_SD_MspInit+0x21c>)
 8001bc4:	f002 ff48 	bl	8004a58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bca:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_SD_MspInit+0x224>)
 8001bcc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bf4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c08:	2204      	movs	r2, #4
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c0e:	2203      	movs	r2, #3
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001c22:	482e      	ldr	r0, [pc, #184]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c24:	f001 fbec 	bl	8003400 <HAL_DMA_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_SD_MspInit+0x176>
    {
      Error_Handler();
 8001c2e:	f7ff fc6d 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
 8001c38:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_SD_MspInit+0x220>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_SD_MspInit+0x22c>)
 8001c42:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c66:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c72:	2220      	movs	r2, #32
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c98:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001c9a:	f001 fbb1 	bl	8003400 <HAL_DMA_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_SD_MspInit+0x1ec>
    {
      Error_Handler();
 8001ca4:	f7ff fc32 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_SD_MspInit+0x228>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2105      	movs	r1, #5
 8001cb8:	2031      	movs	r0, #49	; 0x31
 8001cba:	f001 fb5b 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001cbe:	2031      	movs	r0, #49	; 0x31
 8001cc0:	f001 fb74 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3768      	adds	r7, #104	; 0x68
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	2000053c 	.word	0x2000053c
 8001ce0:	40026458 	.word	0x40026458
 8001ce4:	20000e30 	.word	0x20000e30
 8001ce8:	400264a0 	.word	0x400264a0

08001cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_SPI_MspInit+0xc0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d14a      	bne.n	8001da4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_SPI_MspInit+0xc4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d62:	2308      	movs	r3, #8
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d72:	2305      	movs	r3, #5
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <HAL_SPI_MspInit+0xc8>)
 8001d7e:	f002 fe6b 	bl	8004a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d94:	2305      	movs	r3, #5
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_SPI_MspInit+0xcc>)
 8001da0:	f002 fe5a 	bl	8004a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40003800 	.word	0x40003800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40020400 	.word	0x40020400

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dcc:	d115      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_TIM_Base_MspInit+0x48>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2105      	movs	r1, #5
 8001dee:	201c      	movs	r0, #28
 8001df0:	f001 fac0 	bl	8003374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df4:	201c      	movs	r0, #28
 8001df6:	f001 fad9 	bl	80033ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0x84>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12c      	bne.n	8001e84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_UART_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001e62:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e74:	2308      	movs	r3, #8
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_UART_MspInit+0x8c>)
 8001e80:	f002 fdea 	bl	8004a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e84:	bf00      	nop
 8001e86:	3728      	adds	r7, #40	; 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40021800 	.word	0x40021800

08001e98 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_FMC_MspInit+0x128>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 8081 	bne.w	8001fb8 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001eb6:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_FMC_MspInit+0x128>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_FMC_MspInit+0x12c>)
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	4a3f      	ldr	r2, [pc, #252]	; (8001fc4 <HAL_FMC_MspInit+0x12c>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6393      	str	r3, [r2, #56]	; 0x38
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_FMC_MspInit+0x12c>)
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001ed8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001edc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eea:	230c      	movs	r3, #12
 8001eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4835      	ldr	r0, [pc, #212]	; (8001fc8 <HAL_FMC_MspInit+0x130>)
 8001ef4:	f002 fdb0 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001ef8:	f248 1333 	movw	r3, #33075	; 0x8133
 8001efc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	482e      	ldr	r0, [pc, #184]	; (8001fcc <HAL_FMC_MspInit+0x134>)
 8001f14:	f002 fda0 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001f18:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001f1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4827      	ldr	r0, [pc, #156]	; (8001fd0 <HAL_FMC_MspInit+0x138>)
 8001f34:	f002 fd90 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001f38:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001f3c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4820      	ldr	r0, [pc, #128]	; (8001fd4 <HAL_FMC_MspInit+0x13c>)
 8001f54:	f002 fd80 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f58:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f5c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <HAL_FMC_MspInit+0x140>)
 8001f74:	f002 fd70 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8001f78:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001f7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4812      	ldr	r0, [pc, #72]	; (8001fdc <HAL_FMC_MspInit+0x144>)
 8001f94:	f002 fd60 	bl	8004a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2;
 8001f98:	230d      	movs	r3, #13
 8001f9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <HAL_FMC_MspInit+0x148>)
 8001fb2:	f002 fd51 	bl	8004a58 <HAL_GPIO_Init>
 8001fb6:	e000      	b.n	8001fba <HAL_FMC_MspInit+0x122>
    return;
 8001fb8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000090 	.word	0x20000090
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021400 	.word	0x40021400
 8001fdc:	40021c00 	.word	0x40021c00
 8001fe0:	40020800 	.word	0x40020800

08001fe4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fec:	f7ff ff54 	bl	8001e98 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2036      	movs	r0, #54	; 0x36
 800200e:	f001 f9b1 	bl	8003374 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002012:	2036      	movs	r0, #54	; 0x36
 8002014:	f001 f9ca 	bl	80033ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_InitTick+0xa4>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_InitTick+0xa4>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_InitTick+0xa4>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002034:	f107 0210 	add.w	r2, r7, #16
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f003 febc 	bl	8005dbc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002044:	f003 fe92 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8002048:	4603      	mov	r3, r0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_InitTick+0xa8>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3b01      	subs	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_InitTick+0xac>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_InitTick+0xb0>)
 8002060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_InitTick+0xac>)
 8002064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002068:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_InitTick+0xac>)
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_InitTick+0xac>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_InitTick+0xac>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <HAL_InitTick+0xac>)
 800207e:	f005 ff67 	bl	8007f50 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002088:	4806      	ldr	r0, [pc, #24]	; (80020a4 <HAL_InitTick+0xac>)
 800208a:	f005 ffb1 	bl	8007ff0 <HAL_TIM_Base_Start_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	e000      	b.n	8002094 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	20001190 	.word	0x20001190
 80020a8:	40001000 	.word	0x40001000

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <NMI_Handler+0x4>

080020b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <MemManage_Handler+0x4>

080020be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <UsageFault_Handler+0x4>

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <CAN1_RX0_IRQHandler+0x10>)
 80020de:	f000 fe61 	bl	8002da4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000ff0 	.word	0x20000ff0

080020ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM2_IRQHandler+0x10>)
 80020f2:	f005 ffed 	bl	80080d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000fa8 	.word	0x20000fa8

08002100 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <SDIO_IRQHandler+0x10>)
 8002106:	f004 fdbd 	bl	8006c84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000e94 	.word	0x20000e94

08002114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM6_DAC_IRQHandler+0x10>)
 800211a:	f005 ffd9 	bl	80080d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20001190 	.word	0x20001190

08002128 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA2_Stream3_IRQHandler+0x10>)
 800212e:	f001 fa8f 	bl	8003650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000053c 	.word	0x2000053c

0800213c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <CAN2_RX1_IRQHandler+0x10>)
 8002142:	f000 fe2f 	bl	8002da4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000bf0 	.word	0x20000bf0

08002150 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <DMA2_Stream6_IRQHandler+0x10>)
 8002156:	f001 fa7b 	bl	8003650 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000e30 	.word	0x20000e30

08002164 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <LTDC_IRQHandler+0x10>)
 800216a:	f003 f881 	bl	8005270 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000b00 	.word	0x20000b00

08002178 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <DMA2D_IRQHandler+0x10>)
 800217e:	f001 fd26 	bl	8003bce <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000f68 	.word	0x20000f68

0800218c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DSI_IRQHandler+0x10>)
 8002192:	f002 f896 	bl	80042c2 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000adc 	.word	0x20000adc

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ee:	f7ff ffd7 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f008 f88b 	bl	800a30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7fe fad5 	bl	80007a4 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002208:	0800a420 	.word	0x0800a420
  ldr r2, =_sbss
 800220c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002210:	20001648 	.word	0x20001648

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f001 f88c 	bl	800335e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff fed6 	bl	8001ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff f964 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	200011d8 	.word	0x200011d8

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200011d8 	.word	0x200011d8

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008

080022e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e033      	b.n	8002362 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f934 	bl	8001570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800232a:	f023 0302 	bic.w	r3, r3, #2
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f94a 	bl	80025d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
 8002352:	e001      	b.n	8002358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1c>
 8002384:	2302      	movs	r3, #2
 8002386:	e113      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x244>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d925      	bls.n	80023e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	3b1e      	subs	r3, #30
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43da      	mvns	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68d9      	ldr	r1, [r3, #12]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4403      	add	r3, r0
 80023d6:	3b1e      	subs	r3, #30
 80023d8:	409a      	lsls	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	e022      	b.n	800242a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	2207      	movs	r2, #7
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	400a      	ands	r2, r1
 8002406:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	4603      	mov	r3, r0
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4403      	add	r3, r0
 8002420:	409a      	lsls	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d824      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b05      	subs	r3, #5
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b05      	subs	r3, #5
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	e04c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d824      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b23      	subs	r3, #35	; 0x23
 8002496:	221f      	movs	r2, #31
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43da      	mvns	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	400a      	ands	r2, r1
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b23      	subs	r3, #35	; 0x23
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
 80024cc:	e023      	b.n	8002516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	3b41      	subs	r3, #65	; 0x41
 80024e0:	221f      	movs	r2, #31
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	400a      	ands	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3b41      	subs	r3, #65	; 0x41
 800250a:	fa00 f203 	lsl.w	r2, r0, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_ADC_ConfigChannel+0x250>)
 8002518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_ADC_ConfigChannel+0x254>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10f      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1d8>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b12      	cmp	r3, #18
 800252a:	d10b      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_ADC_ConfigChannel+0x254>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_ADC_ConfigChannel+0x258>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x1f4>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b11      	cmp	r3, #17
 800255e:	d122      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_ADC_ConfigChannel+0x258>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d111      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_ADC_ConfigChannel+0x260>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40012300 	.word	0x40012300
 80025c0:	40012000 	.word	0x40012000
 80025c4:	10000012 	.word	0x10000012
 80025c8:	20000000 	.word	0x20000000
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <ADC_Init+0x1f0>)
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	021a      	lsls	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <ADC_Init+0x1f4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e00f      	b.n	80026ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0202 	bic.w	r2, r2, #2
 80026dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7e1b      	ldrb	r3, [r3, #24]
 80026e8:	005a      	lsls	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800271a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	3b01      	subs	r3, #1
 8002728:	035a      	lsls	r2, r3, #13
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	e007      	b.n	8002744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	3b01      	subs	r3, #1
 8002760:	051a      	lsls	r2, r3, #20
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002786:	025a      	lsls	r2, r3, #9
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	029a      	lsls	r2, r3, #10
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40012300 	.word	0x40012300
 80027c4:	0f000001 	.word	0x0f000001

080027c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0ed      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fee4 	bl	80015b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fc:	f7ff fd42 	bl	8002284 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002802:	e012      	b.n	800282a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002804:	f7ff fd3e 	bl	8002284 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b0a      	cmp	r3, #10
 8002810:	d90b      	bls.n	800282a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0c5      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0e5      	beq.n	8002804 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0202 	bic.w	r2, r2, #2
 8002846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002848:	f7ff fd1c 	bl	8002284 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800284e:	e012      	b.n	8002876 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002850:	f7ff fd18 	bl	8002284 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b0a      	cmp	r3, #10
 800285c:	d90b      	bls.n	8002876 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2205      	movs	r2, #5
 800286e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e09f      	b.n	80029b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e5b      	ldrb	r3, [r3, #25]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e9b      	ldrb	r3, [r3, #26]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e007      	b.n	8002902 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0220 	bic.w	r2, r2, #32
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7edb      	ldrb	r3, [r3, #27]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0210 	bic.w	r2, r2, #16
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e007      	b.n	800292c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0210 	orr.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7f1b      	ldrb	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d108      	bne.n	8002946 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0208 	orr.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e007      	b.n	8002956 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0208 	bic.w	r2, r2, #8
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7f5b      	ldrb	r3, [r3, #29]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0204 	orr.w	r2, r2, #4
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e007      	b.n	8002980 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	ea42 0103 	orr.w	r1, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d003      	beq.n	80029e6 <HAL_CAN_ConfigFilter+0x26>
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f040 80be 	bne.w	8002b62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_CAN_ConfigFilter+0x1bc>)
 80029e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2201      	movs	r2, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d123      	bne.n	8002a90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3248      	adds	r2, #72	; 0x48
 8002a70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a86:	6979      	ldr	r1, [r7, #20]
 8002a88:	3348      	adds	r3, #72	; 0x48
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d122      	bne.n	8002ade <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ab8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3248      	adds	r2, #72	; 0x48
 8002abe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ad2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ad4:	6979      	ldr	r1, [r7, #20]
 8002ad6:	3348      	adds	r3, #72	; 0x48
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002af8:	e007      	b.n	8002b0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b24:	e007      	b.n	8002b36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d107      	bne.n	8002b4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b54:	f023 0201 	bic.w	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e006      	b.n	8002b70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40006400 	.word	0x40006400

08002b80 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d003      	beq.n	8002ba4 <HAL_CAN_GetRxMessage+0x24>
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80f3 	bne.w	8002d8a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0e7      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0d8      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	331b      	adds	r3, #27
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0204 	and.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	331b      	adds	r3, #27
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e00b      	b.n	8002c36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	331b      	adds	r3, #27
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	331b      	adds	r3, #27
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	4413      	add	r3, r2
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0202 	and.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	331b      	adds	r3, #27
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	331b      	adds	r3, #27
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	331b      	adds	r3, #27
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0a1a      	lsrs	r2, r3, #8
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0c1a      	lsrs	r2, r3, #16
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e1a      	lsrs	r2, r3, #24
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0a1a      	lsrs	r2, r3, #8
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3305      	adds	r3, #5
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0c1a      	lsrs	r2, r3, #16
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3306      	adds	r3, #6
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e1a      	lsrs	r2, r3, #24
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3307      	adds	r3, #7
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e006      	b.n	8002d98 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07c      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d023      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f983 	bl	8003112 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e0c:	e016      	b.n	8002e3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e00c      	b.n	8002e3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
 8002e34:	e002      	b.n	8002e3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f989 	bl	800314e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d024      	beq.n	8002e90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f963 	bl	8003126 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e60:	e016      	b.n	8002e90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d004      	beq.n	8002e76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	e00c      	b.n	8002e90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d004      	beq.n	8002e8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	e002      	b.n	8002e90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f969 	bl	8003162 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f943 	bl	800313a <HAL_CAN_TxMailbox2CompleteCallback>
 8002eb4:	e016      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	e00c      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	e002      	b.n	8002ee4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f949 	bl	8003176 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f93a 	bl	800319e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f921 	bl	800318a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2208      	movs	r2, #8
 8002f86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f912 	bl	80031b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe fa6c 	bl	8001484 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8fc 	bl	80031c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8f5 	bl	80031da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07b      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d072      	beq.n	80030ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	2b00      	cmp	r3, #0
 8003060:	d043      	beq.n	80030ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03e      	beq.n	80030ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003072:	2b60      	cmp	r3, #96	; 0x60
 8003074:	d02b      	beq.n	80030ce <HAL_CAN_IRQHandler+0x32a>
 8003076:	2b60      	cmp	r3, #96	; 0x60
 8003078:	d82e      	bhi.n	80030d8 <HAL_CAN_IRQHandler+0x334>
 800307a:	2b50      	cmp	r3, #80	; 0x50
 800307c:	d022      	beq.n	80030c4 <HAL_CAN_IRQHandler+0x320>
 800307e:	2b50      	cmp	r3, #80	; 0x50
 8003080:	d82a      	bhi.n	80030d8 <HAL_CAN_IRQHandler+0x334>
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d019      	beq.n	80030ba <HAL_CAN_IRQHandler+0x316>
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d826      	bhi.n	80030d8 <HAL_CAN_IRQHandler+0x334>
 800308a:	2b30      	cmp	r3, #48	; 0x30
 800308c:	d010      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x30c>
 800308e:	2b30      	cmp	r3, #48	; 0x30
 8003090:	d822      	bhi.n	80030d8 <HAL_CAN_IRQHandler+0x334>
 8003092:	2b10      	cmp	r3, #16
 8003094:	d002      	beq.n	800309c <HAL_CAN_IRQHandler+0x2f8>
 8003096:	2b20      	cmp	r3, #32
 8003098:	d005      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800309a:	e01d      	b.n	80030d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a4:	e019      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ae:	e014      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f043 0320 	orr.w	r3, r3, #32
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b8:	e00f      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c2:	e00a      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030cc:	e005      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d6:	e000      	b.n	80030da <HAL_CAN_IRQHandler+0x336>
            break;
 80030d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2204      	movs	r2, #4
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f872 	bl	80031ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800310a:	bf00      	nop
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff4c 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003386:	f7ff ff61 	bl	800324c <__NVIC_GetPriorityGrouping>
 800338a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6978      	ldr	r0, [r7, #20]
 8003392:	f7ff ffb1 	bl	80032f8 <NVIC_EncodePriority>
 8003396:	4602      	mov	r2, r0
 8003398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff80 	bl	80032a4 <__NVIC_SetPriority>
}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff54 	bl	8003268 <__NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00e      	b.n	80033f8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	795b      	ldrb	r3, [r3, #5]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f994 	bl	8001718 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7fe ff3a 	bl	8002284 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e099      	b.n	8003550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343c:	e00f      	b.n	800345e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800343e:	f7fe ff21 	bl	8002284 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b05      	cmp	r3, #5
 800344a:	d908      	bls.n	800345e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e078      	b.n	8003550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e8      	bne.n	800343e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_DMA_Init+0x158>)
 8003478:	4013      	ands	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	4313      	orrs	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d117      	bne.n	8003522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa9d 	bl	8003a44 <DMA_CheckFifoParam>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800351e:	2301      	movs	r3, #1
 8003520:	e016      	b.n	8003550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa54 	bl	80039d8 <DMA_CalcBaseAndBitshift>
 8003530:	4603      	mov	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	223f      	movs	r2, #63	; 0x3f
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	f010803f 	.word	0xf010803f

0800355c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Start_IT+0x26>
 800357e:	2302      	movs	r3, #2
 8003580:	e040      	b.n	8003604 <HAL_DMA_Start_IT+0xa8>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d12f      	bne.n	80035f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f9e6 	bl	800397c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	223f      	movs	r2, #63	; 0x3f
 80035b6:	409a      	lsls	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0216 	orr.w	r2, r2, #22
 80035ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e005      	b.n	8003602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d004      	beq.n	800362a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e00c      	b.n	8003644 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2205      	movs	r2, #5
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800365c:	4b92      	ldr	r3, [pc, #584]	; (80038a8 <HAL_DMA_IRQHandler+0x258>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a92      	ldr	r2, [pc, #584]	; (80038ac <HAL_DMA_IRQHandler+0x25c>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367a:	2208      	movs	r2, #8
 800367c:	409a      	lsls	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	2208      	movs	r2, #8
 80036aa:	409a      	lsls	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	2201      	movs	r2, #1
 80036e0:	409a      	lsls	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2204      	movs	r2, #4
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d012      	beq.n	8003728 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2204      	movs	r2, #4
 8003716:	409a      	lsls	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2210      	movs	r2, #16
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d043      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d03c      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	2210      	movs	r2, #16
 800374c:	409a      	lsls	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d018      	beq.n	8003792 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d024      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
 800377e:	e01f      	b.n	80037c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e016      	b.n	80037c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0208 	bic.w	r2, r2, #8
 80037ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	2220      	movs	r2, #32
 80037c6:	409a      	lsls	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 808e 	beq.w	80038ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8086 	beq.w	80038ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	2220      	movs	r2, #32
 80037e8:	409a      	lsls	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d136      	bne.n	8003868 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0216 	bic.w	r2, r2, #22
 8003808:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003818:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_DMA_IRQHandler+0x1da>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0208 	bic.w	r2, r2, #8
 8003838:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	223f      	movs	r2, #63	; 0x3f
 8003840:	409a      	lsls	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07d      	beq.n	800395a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
        }
        return;
 8003866:	e078      	b.n	800395a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01c      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	2b00      	cmp	r3, #0
 800388a:	d030      	beq.n	80038ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
 8003894:	e02b      	b.n	80038ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d027      	beq.n	80038ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
 80038a6:	e022      	b.n	80038ee <HAL_DMA_IRQHandler+0x29e>
 80038a8:	20000000 	.word	0x20000000
 80038ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0210 	bic.w	r2, r2, #16
 80038cc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d032      	beq.n	800395c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d022      	beq.n	8003948 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	d307      	bcc.n	8003936 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f2      	bne.n	800391a <HAL_DMA_IRQHandler+0x2ca>
 8003934:	e000      	b.n	8003938 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003936:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e000      	b.n	800395c <HAL_DMA_IRQHandler+0x30c>
        return;
 800395a:	bf00      	nop
    }
  }
}
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop

08003964 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d108      	bne.n	80039bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ba:	e007      	b.n	80039cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3b10      	subs	r3, #16
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <DMA_CalcBaseAndBitshift+0x64>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <DMA_CalcBaseAndBitshift+0x68>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d909      	bls.n	8003a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58
 8003a18:	e007      	b.n	8003a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	aaaaaaab 	.word	0xaaaaaaab
 8003a40:	0800a394 	.word	0x0800a394

08003a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0x5a>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d856      	bhi.n	8003b12 <DMA_CheckFifoParam+0xce>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <DMA_CheckFifoParam+0x28>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003b13 	.word	0x08003b13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d046      	beq.n	8003b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8c:	e043      	b.n	8003b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a96:	d140      	bne.n	8003b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e03d      	b.n	8003b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d121      	bne.n	8003aec <DMA_CheckFifoParam+0xa8>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d837      	bhi.n	8003b1e <DMA_CheckFifoParam+0xda>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <DMA_CheckFifoParam+0x70>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003acb 	.word	0x08003acb
 8003abc:	08003ac5 	.word	0x08003ac5
 8003ac0:	08003add 	.word	0x08003add
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e030      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d025      	beq.n	8003b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e022      	b.n	8003b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aea:	e01c      	b.n	8003b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d903      	bls.n	8003afa <DMA_CheckFifoParam+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d003      	beq.n	8003b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af8:	e018      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      break;
 8003afe:	e015      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e00b      	b.n	8003b2a <DMA_CheckFifoParam+0xe6>
      break;
 8003b12:	bf00      	nop
 8003b14:	e00a      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e008      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e006      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e03b      	b.n	8003bc6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fdfa 	bl	800175c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	f023 0107 	bic.w	r1, r3, #7
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ba6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68d1      	ldr	r1, [r2, #12]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d026      	beq.n	8003c3e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d021      	beq.n	8003c3e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c08:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2204      	movs	r2, #4
 8003c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d026      	beq.n	8003c96 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d021      	beq.n	8003c96 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2220      	movs	r2, #32
 8003c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d026      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d021      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f853 	bl	8003dc6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01f      	beq.n	8003d74 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01f      	beq.n	8003dbe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f80e 	bl	8003dda <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_DMA2D_ConfigLayer+0x20>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e079      	b.n	8003f04 <HAL_DMA2D_ConfigLayer+0x114>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	3318      	adds	r3, #24
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003e3a:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e3c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b0a      	cmp	r3, #10
 8003e44:	d003      	beq.n	8003e4e <HAL_DMA2D_ConfigLayer+0x5e>
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d107      	bne.n	8003e5e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e005      	b.n	8003e6a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d120      	bne.n	8003eb2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	ea02 0103 	and.w	r1, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b0a      	cmp	r3, #10
 8003e98:	d003      	beq.n	8003ea2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d127      	bne.n	8003ef2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb0:	e01f      	b.n	8003ef2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	ea02 0103 	and.w	r1, r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	d106      	bne.n	8003ef2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ef0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	ff03000f 	.word	0xff03000f

08003f14 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e108      	b.n	800413a <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7c5b      	ldrb	r3, [r3, #17]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd fc3a 	bl	80017ac <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f52:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f66:	f7fe f98d 	bl	8002284 <HAL_GetTick>
 8003f6a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f6c:	e009      	b.n	8003f82 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f6e:	f7fe f989 	bl	8002284 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f7c:	d901      	bls.n	8003f82 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0db      	b.n	800413a <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ed      	beq.n	8003f6e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003fa2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8003fa6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	02db      	lsls	r3, r3, #11
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ffa:	f7fe f943 	bl	8002284 <HAL_GetTick>
 8003ffe:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004000:	e009      	b.n	8004016 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004002:	f7fe f93f 	bl	8002284 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004010:	d901      	bls.n	8004016 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e091      	b.n	800413a <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ed      	beq.n	8004002 <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0206 	orr.w	r2, r2, #6
 8004036:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0203 	bic.w	r2, r2, #3
 800404a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0203 	bic.w	r2, r2, #3
 8004078:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040a0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6899      	ldr	r1, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_DSI_Init+0x1ae>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	e000      	b.n	80040c4 <HAL_DSI_Init+0x1b0>
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_DSI_Init+0x230>)
 80040ca:	fb02 f203 	mul.w	r2, r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	409a      	lsls	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	430a      	orrs	r2, r1
 800410e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	003d0900 	.word	0x003d0900

08004148 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7c1b      	ldrb	r3, [r3, #16]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_DSI_ConfigErrorMonitor+0x16>
 800415a:	2302      	movs	r3, #2
 800415c:	e0ab      	b.n	80042b6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2200      	movs	r2, #0
 800416a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004198:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800419c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80041ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0202 	orr.w	r2, r2, #2
 80041f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d009      	beq.n	8004218 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 020c 	orr.w	r2, r2, #12
 8004214:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0210 	orr.w	r2, r2, #16
 8004232:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800428c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80042aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00f      	beq.n	80042fa <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8ad 	bl	8004454 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00f      	beq.n	800432a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2202      	movs	r2, #2
 8004320:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f89f 	bl	8004468 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 808c 	beq.w	800444c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800433c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004354:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f043 0208 	orr.w	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f043 0210 	orr.w	r2, r3, #16
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f818 	bl	800447c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7c1b      	ldrb	r3, [r3, #16]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_DSI_SetGenericVCID+0x16>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e016      	b.n	80044d4 <HAL_DSI_SetGenericVCID+0x44>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0203 	bic.w	r2, r2, #3
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7c1b      	ldrb	r3, [r3, #16]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0c5      	b.n	8004682 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0203 	bic.w	r2, r2, #3
 8004542:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0207 	bic.w	r2, r2, #7
 8004564:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6959      	ldr	r1, [r3, #20]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	431a      	orrs	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 020f 	bic.w	r2, r2, #15
 8004592:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 020e 	bic.w	r2, r2, #14
 80045b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	005a      	lsls	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004604:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	431a      	orrs	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0202 	orr.w	r2, r2, #2
 8004676:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7c1b      	ldrb	r3, [r3, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_DSI_ConfigCommand+0x16>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e049      	b.n	800473a <HAL_DSI_ConfigCommand+0xaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_DSI_ConfigCommand+0xb8>)
 80046b8:	400b      	ands	r3, r1
 80046ba:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80046ca:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80046d0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80046d6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80046dc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80046e2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80046e8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80046ee:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80046f4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80046fa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004700:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004706:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0202 	bic.w	r2, r2, #2
 800471e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	fef080ff 	.word	0xfef080ff

0800474c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7c1b      	ldrb	r3, [r3, #16]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_DSI_ConfigFlowControl+0x16>
 800475e:	2302      	movs	r3, #2
 8004760:	e016      	b.n	8004790 <HAL_DSI_ConfigFlowControl+0x44>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 021f 	bic.w	r2, r2, #31
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7c1b      	ldrb	r3, [r3, #16]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_DSI_ConfigPhyTimer+0x16>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e058      	b.n	8004864 <HAL_DSI_ConfigPhyTimer+0xc8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bf38      	it	cc
 80047c4:	4613      	movcc	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80047d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	041a      	lsls	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004840:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	021a      	lsls	r2, r3, #8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7c1b      	ldrb	r3, [r3, #16]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004882:	2302      	movs	r3, #2
 8004884:	e0b4      	b.n	80049f0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800489a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6899      	ldr	r1, [r3, #8]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	b292      	uxth	r2, r2
 80048bc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	041a      	lsls	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7c1b      	ldrb	r3, [r3, #16]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e01b      	b.n	8004a4a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004a28:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	065a      	lsls	r2, r3, #25
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e177      	b.n	8004d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a74:	2201      	movs	r2, #1
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f040 8166 	bne.w	8004d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d005      	beq.n	8004aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d130      	bne.n	8004b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 0201 	and.w	r2, r3, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d017      	beq.n	8004b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	2203      	movs	r2, #3
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d123      	bne.n	8004b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	08da      	lsrs	r2, r3, #3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3208      	adds	r2, #8
 8004b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	220f      	movs	r2, #15
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	08da      	lsrs	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3208      	adds	r2, #8
 8004b96:	69b9      	ldr	r1, [r7, #24]
 8004b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0203 	and.w	r2, r3, #3
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80c0 	beq.w	8004d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bec:	6453      	str	r3, [r2, #68]	; 0x44
 8004bee:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_GPIO_Init+0x324>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bfa:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_GPIO_Init+0x328>)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	3302      	adds	r3, #2
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	220f      	movs	r2, #15
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_GPIO_Init+0x32c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d037      	beq.n	8004c96 <HAL_GPIO_Init+0x23e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a57      	ldr	r2, [pc, #348]	; (8004d88 <HAL_GPIO_Init+0x330>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <HAL_GPIO_Init+0x23a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <HAL_GPIO_Init+0x334>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02b      	beq.n	8004c8e <HAL_GPIO_Init+0x236>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a55      	ldr	r2, [pc, #340]	; (8004d90 <HAL_GPIO_Init+0x338>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d025      	beq.n	8004c8a <HAL_GPIO_Init+0x232>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a54      	ldr	r2, [pc, #336]	; (8004d94 <HAL_GPIO_Init+0x33c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <HAL_GPIO_Init+0x22e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a53      	ldr	r2, [pc, #332]	; (8004d98 <HAL_GPIO_Init+0x340>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d019      	beq.n	8004c82 <HAL_GPIO_Init+0x22a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a52      	ldr	r2, [pc, #328]	; (8004d9c <HAL_GPIO_Init+0x344>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_GPIO_Init+0x226>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a51      	ldr	r2, [pc, #324]	; (8004da0 <HAL_GPIO_Init+0x348>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00d      	beq.n	8004c7a <HAL_GPIO_Init+0x222>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a50      	ldr	r2, [pc, #320]	; (8004da4 <HAL_GPIO_Init+0x34c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <HAL_GPIO_Init+0x21e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4f      	ldr	r2, [pc, #316]	; (8004da8 <HAL_GPIO_Init+0x350>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_GPIO_Init+0x21a>
 8004c6e:	2309      	movs	r3, #9
 8004c70:	e012      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c72:	230a      	movs	r3, #10
 8004c74:	e010      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c76:	2308      	movs	r3, #8
 8004c78:	e00e      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e00c      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c7e:	2306      	movs	r3, #6
 8004c80:	e00a      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c82:	2305      	movs	r3, #5
 8004c84:	e008      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c86:	2304      	movs	r3, #4
 8004c88:	e006      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e004      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e002      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_GPIO_Init+0x240>
 8004c96:	2300      	movs	r3, #0
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f002 0203 	and.w	r2, r2, #3
 8004c9e:	0092      	lsls	r2, r2, #2
 8004ca0:	4093      	lsls	r3, r2
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ca8:	4935      	ldr	r1, [pc, #212]	; (8004d80 <HAL_GPIO_Init+0x328>)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	3302      	adds	r3, #2
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cda:	4a34      	ldr	r2, [pc, #208]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d0a:	4b28      	ldr	r3, [pc, #160]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <HAL_GPIO_Init+0x354>)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	f67f ae84 	bls.w	8004a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40013800 	.word	0x40013800
 8004d84:	40020000 	.word	0x40020000
 8004d88:	40020400 	.word	0x40020400
 8004d8c:	40020800 	.word	0x40020800
 8004d90:	40020c00 	.word	0x40020c00
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40021400 	.word	0x40021400
 8004d9c:	40021800 	.word	0x40021800
 8004da0:	40021c00 	.word	0x40021c00
 8004da4:	40022000 	.word	0x40022000
 8004da8:	40022400 	.word	0x40022400
 8004dac:	40013c00 	.word	0x40013c00

08004db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	887b      	ldrh	r3, [r7, #2]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e001      	b.n	8004dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
 8004dec:	4613      	mov	r3, r2
 8004dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df0:	787b      	ldrb	r3, [r7, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dfc:	e003      	b.n	8004e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dfe:	887b      	ldrh	r3, [r7, #2]
 8004e00:	041a      	lsls	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	619a      	str	r2, [r3, #24]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	041a      	lsls	r2, r3, #16
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43d9      	mvns	r1, r3
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	400b      	ands	r3, r1
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e12b      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fcec 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	; 0x24
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eac:	f000 ff5e 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a81      	ldr	r2, [pc, #516]	; (80050bc <HAL_I2C_Init+0x274>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d807      	bhi.n	8004ecc <HAL_I2C_Init+0x84>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a80      	ldr	r2, [pc, #512]	; (80050c0 <HAL_I2C_Init+0x278>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bf94      	ite	ls
 8004ec4:	2301      	movls	r3, #1
 8004ec6:	2300      	movhi	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e006      	b.n	8004eda <HAL_I2C_Init+0x92>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a7d      	ldr	r2, [pc, #500]	; (80050c4 <HAL_I2C_Init+0x27c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0e7      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <HAL_I2C_Init+0x280>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0c9b      	lsrs	r3, r3, #18
 8004eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a6a      	ldr	r2, [pc, #424]	; (80050bc <HAL_I2C_Init+0x274>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d802      	bhi.n	8004f1c <HAL_I2C_Init+0xd4>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	e009      	b.n	8004f30 <HAL_I2C_Init+0xe8>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	4a69      	ldr	r2, [pc, #420]	; (80050cc <HAL_I2C_Init+0x284>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	099b      	lsrs	r3, r3, #6
 8004f2e:	3301      	adds	r3, #1
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	495c      	ldr	r1, [pc, #368]	; (80050bc <HAL_I2C_Init+0x274>)
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	d819      	bhi.n	8004f84 <HAL_I2C_Init+0x13c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e59      	subs	r1, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f64:	400b      	ands	r3, r1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_I2C_Init+0x138>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e59      	subs	r1, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7e:	e051      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f80:	2304      	movs	r3, #4
 8004f82:	e04f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d111      	bne.n	8004fb0 <HAL_I2C_Init+0x168>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1e58      	subs	r0, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	440b      	add	r3, r1
 8004f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e012      	b.n	8004fd6 <HAL_I2C_Init+0x18e>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	0099      	lsls	r1, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Init+0x196>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e022      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <HAL_I2C_Init+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1e58      	subs	r0, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	440b      	add	r3, r1
 8004ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	e00f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1e58      	subs	r0, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	0099      	lsls	r1, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	fbb0 f3f3 	udiv	r3, r0, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6809      	ldr	r1, [r1, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6911      	ldr	r1, [r2, #16]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	430b      	orrs	r3, r1
 8005066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	000186a0 	.word	0x000186a0
 80050c0:	001e847f 	.word	0x001e847f
 80050c4:	003d08ff 	.word	0x003d08ff
 80050c8:	431bde83 	.word	0x431bde83
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0bf      	b.n	8005262 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fc26 	bl	8001948 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005112:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005128:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b4a      	ldr	r3, [pc, #296]	; (800526c <HAL_LTDC_Init+0x19c>)
 8005144:	400b      	ands	r3, r1
 8005146:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68d9      	ldr	r1, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_LTDC_Init+0x19c>)
 8005172:	400b      	ands	r3, r1
 8005174:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68d9      	ldr	r1, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6919      	ldr	r1, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_LTDC_Init+0x19c>)
 80051a0:	400b      	ands	r3, r1
 80051a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6919      	ldr	r1, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6959      	ldr	r1, [r3, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_LTDC_Init+0x19c>)
 80051ce:	400b      	ands	r3, r1
 80051d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6959      	ldr	r1, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0206 	orr.w	r2, r2, #6
 800523e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	f000f800 	.word	0xf000f800

08005270 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d023      	beq.n	80052da <HAL_LTDC_IRQHandler+0x6a>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01e      	beq.n	80052da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2204      	movs	r2, #4
 80052b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052ba:	f043 0201 	orr.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2204      	movs	r2, #4
 80052c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f86f 	bl	80053b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d023      	beq.n	800532c <HAL_LTDC_IRQHandler+0xbc>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01e      	beq.n	800532c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0202 	bic.w	r2, r2, #2
 80052fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2202      	movs	r2, #2
 8005304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800530c:	f043 0202 	orr.w	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f846 	bl	80053b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01b      	beq.n	800536e <HAL_LTDC_IRQHandler+0xfe>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2201      	movs	r2, #1
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f82f 	bl	80053cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <HAL_LTDC_IRQHandler+0x140>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2208      	movs	r2, #8
 8005398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f818 	bl	80053e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053f4:	b5b0      	push	{r4, r5, r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_LTDC_ConfigLayer+0x1a>
 800540a:	2302      	movs	r3, #2
 800540c:	e02c      	b.n	8005468 <HAL_LTDC_ConfigLayer+0x74>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2134      	movs	r1, #52	; 0x34
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4614      	mov	r4, r2
 8005432:	461d      	mov	r5, r3
 8005434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800543a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f811 	bl	8005470 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2201      	movs	r2, #1
 8005454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bdb0      	pop	{r4, r5, r7, pc}

08005470 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548c:	4413      	add	r3, r2
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	4413      	add	r3, r2
 800549e:	3384      	adds	r3, #132	; 0x84
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	4611      	mov	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	01d2      	lsls	r2, r2, #7
 80054ac:	440a      	add	r2, r1
 80054ae:	3284      	adds	r2, #132	; 0x84
 80054b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c6:	4413      	add	r3, r2
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	01db      	lsls	r3, r3, #7
 80054d4:	440b      	add	r3, r1
 80054d6:	3384      	adds	r3, #132	; 0x84
 80054d8:	4619      	mov	r1, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ee:	4413      	add	r3, r2
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	01db      	lsls	r3, r3, #7
 80054fe:	4413      	add	r3, r2
 8005500:	3384      	adds	r3, #132	; 0x84
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	4611      	mov	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	01d2      	lsls	r2, r2, #7
 800550e:	440a      	add	r2, r1
 8005510:	3284      	adds	r2, #132	; 0x84
 8005512:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005516:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005526:	4413      	add	r3, r2
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	440b      	add	r3, r1
 8005536:	3384      	adds	r3, #132	; 0x84
 8005538:	4619      	mov	r1, r3
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	01db      	lsls	r3, r3, #7
 800554a:	4413      	add	r3, r2
 800554c:	3384      	adds	r3, #132	; 0x84
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	4611      	mov	r1, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	01d2      	lsls	r2, r2, #7
 800555a:	440a      	add	r2, r1
 800555c:	3284      	adds	r2, #132	; 0x84
 800555e:	f023 0307 	bic.w	r3, r3, #7
 8005562:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	01db      	lsls	r3, r3, #7
 800556e:	4413      	add	r3, r2
 8005570:	3384      	adds	r3, #132	; 0x84
 8005572:	461a      	mov	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	4413      	add	r3, r2
 80055a2:	3384      	adds	r3, #132	; 0x84
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	01db      	lsls	r3, r3, #7
 80055b0:	4413      	add	r3, r2
 80055b2:	3384      	adds	r3, #132	; 0x84
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055c0:	461a      	mov	r2, r3
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	01db      	lsls	r3, r3, #7
 80055d4:	440b      	add	r3, r1
 80055d6:	3384      	adds	r3, #132	; 0x84
 80055d8:	4619      	mov	r1, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	01db      	lsls	r3, r3, #7
 80055ea:	4413      	add	r3, r2
 80055ec:	3384      	adds	r3, #132	; 0x84
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	4611      	mov	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	01d2      	lsls	r2, r2, #7
 80055fa:	440a      	add	r2, r1
 80055fc:	3284      	adds	r2, #132	; 0x84
 80055fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005602:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3384      	adds	r3, #132	; 0x84
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	01db      	lsls	r3, r3, #7
 8005624:	4413      	add	r3, r2
 8005626:	3384      	adds	r3, #132	; 0x84
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	4611      	mov	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	01d2      	lsls	r2, r2, #7
 8005634:	440a      	add	r2, r1
 8005636:	3284      	adds	r2, #132	; 0x84
 8005638:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800563c:	f023 0307 	bic.w	r3, r3, #7
 8005640:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6809      	ldr	r1, [r1, #0]
 800564e:	4608      	mov	r0, r1
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	01c9      	lsls	r1, r1, #7
 8005654:	4401      	add	r1, r0
 8005656:	3184      	adds	r1, #132	; 0x84
 8005658:	4313      	orrs	r3, r2
 800565a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	01db      	lsls	r3, r3, #7
 8005666:	4413      	add	r3, r2
 8005668:	3384      	adds	r3, #132	; 0x84
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	01db      	lsls	r3, r3, #7
 8005676:	4413      	add	r3, r2
 8005678:	3384      	adds	r3, #132	; 0x84
 800567a:	461a      	mov	r2, r3
 800567c:	2300      	movs	r3, #0
 800567e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	01db      	lsls	r3, r3, #7
 800568a:	4413      	add	r3, r2
 800568c:	3384      	adds	r3, #132	; 0x84
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800569e:	2304      	movs	r3, #4
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e01b      	b.n	80056dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80056ac:	2303      	movs	r3, #3
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e014      	b.n	80056dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d00b      	beq.n	80056d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d007      	beq.n	80056d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d003      	beq.n	80056d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d102      	bne.n	80056d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80056d2:	2302      	movs	r3, #2
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	e001      	b.n	80056dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80056d8:	2301      	movs	r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	4413      	add	r3, r2
 80056e8:	3384      	adds	r3, #132	; 0x84
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4611      	mov	r1, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	01d2      	lsls	r2, r2, #7
 80056f6:	440a      	add	r2, r1
 80056f8:	3284      	adds	r2, #132	; 0x84
 80056fa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	041a      	lsls	r2, r3, #16
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	1acb      	subs	r3, r1, r3
 8005716:	69f9      	ldr	r1, [r7, #28]
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	3303      	adds	r3, #3
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6809      	ldr	r1, [r1, #0]
 8005722:	4608      	mov	r0, r1
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	01c9      	lsls	r1, r1, #7
 8005728:	4401      	add	r1, r0
 800572a:	3184      	adds	r1, #132	; 0x84
 800572c:	4313      	orrs	r3, r2
 800572e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	4413      	add	r3, r2
 800573c:	3384      	adds	r3, #132	; 0x84
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	4611      	mov	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	01d2      	lsls	r2, r2, #7
 800574a:	440a      	add	r2, r1
 800574c:	3284      	adds	r2, #132	; 0x84
 800574e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	01db      	lsls	r3, r3, #7
 8005762:	4413      	add	r3, r2
 8005764:	3384      	adds	r3, #132	; 0x84
 8005766:	461a      	mov	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	01db      	lsls	r3, r3, #7
 8005778:	4413      	add	r3, r2
 800577a:	3384      	adds	r3, #132	; 0x84
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4611      	mov	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	01d2      	lsls	r2, r2, #7
 8005788:	440a      	add	r2, r1
 800578a:	3284      	adds	r2, #132	; 0x84
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6013      	str	r3, [r2, #0]
}
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <HAL_PWREx_EnableOverDrive+0x90>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <HAL_PWREx_EnableOverDrive+0x90>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <HAL_PWREx_EnableOverDrive+0x90>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_PWREx_EnableOverDrive+0x94>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057cc:	f7fc fd5a 	bl	8002284 <HAL_GetTick>
 80057d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057d2:	e009      	b.n	80057e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057d4:	f7fc fd56 	bl	8002284 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057e2:	d901      	bls.n	80057e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e01f      	b.n	8005828 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057e8:	4b13      	ldr	r3, [pc, #76]	; (8005838 <HAL_PWREx_EnableOverDrive+0x98>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f4:	d1ee      	bne.n	80057d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80057f6:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_PWREx_EnableOverDrive+0x9c>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057fc:	f7fc fd42 	bl	8002284 <HAL_GetTick>
 8005800:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005802:	e009      	b.n	8005818 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005804:	f7fc fd3e 	bl	8002284 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005812:	d901      	bls.n	8005818 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e007      	b.n	8005828 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <HAL_PWREx_EnableOverDrive+0x98>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005824:	d1ee      	bne.n	8005804 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40023800 	.word	0x40023800
 8005834:	420e0040 	.word	0x420e0040
 8005838:	40007000 	.word	0x40007000
 800583c:	420e0044 	.word	0x420e0044

08005840 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af02      	add	r7, sp, #8
 8005846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005848:	f7fc fd1c 	bl	8002284 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e069      	b.n	800592c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fc f8ab 	bl	80019c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005872:	f241 3188 	movw	r1, #5000	; 0x1388
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f85e 	bl	8005938 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	3b01      	subs	r3, #1
 800588c:	021a      	lsls	r2, r3, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	2120      	movs	r1, #32
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f856 	bl	8005954 <QSPI_WaitFlagStateUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d137      	bne.n	8005922 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6852      	ldr	r2, [r2, #4]
 80058c4:	0611      	lsls	r1, r2, #24
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68d2      	ldr	r2, [r2, #12]
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	69d2      	ldr	r2, [r2, #28]
 80058d0:	4311      	orrs	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a12      	ldr	r2, [r2, #32]
 80058d6:	4311      	orrs	r1, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	430b      	orrs	r3, r1
 80058de:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <HAL_QSPI_Init+0xf4>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6912      	ldr	r2, [r2, #16]
 80058ee:	0411      	lsls	r1, r2, #16
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6952      	ldr	r2, [r2, #20]
 80058f4:	4311      	orrs	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6992      	ldr	r2, [r2, #24]
 80058fa:	4311      	orrs	r1, r2
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	430b      	orrs	r3, r1
 8005902:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800592a:	7afb      	ldrb	r3, [r7, #11]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	ffe0f8fe 	.word	0xffe0f8fe

08005938 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005964:	e01a      	b.n	800599c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d016      	beq.n	800599c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fc fc89 	bl	8002284 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2204      	movs	r2, #4
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e00e      	b.n	80059ba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1d6      	bne.n	8005966 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0cc      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d8:	4b68      	ldr	r3, [pc, #416]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90c      	bls.n	8005a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b65      	ldr	r3, [pc, #404]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b63      	ldr	r3, [pc, #396]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0b8      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d020      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a18:	4b59      	ldr	r3, [pc, #356]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a30:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a52      	ldr	r2, [pc, #328]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a3c:	4b50      	ldr	r3, [pc, #320]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	494d      	ldr	r1, [pc, #308]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d044      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d107      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d119      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e07f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a82:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e06f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a92:	4b3b      	ldr	r3, [pc, #236]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e067      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa2:	4b37      	ldr	r3, [pc, #220]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 0203 	bic.w	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4934      	ldr	r1, [pc, #208]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab4:	f7fc fbe6 	bl	8002284 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abc:	f7fc fbe2 	bl	8002284 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e04f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 020c 	and.w	r2, r3, #12
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d1eb      	bne.n	8005abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d20c      	bcs.n	8005b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e032      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4916      	ldr	r1, [pc, #88]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	490e      	ldr	r1, [pc, #56]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b4a:	f000 f821 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	490a      	ldr	r1, [pc, #40]	; (8005b84 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	5ccb      	ldrb	r3, [r1, r3]
 8005b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <HAL_RCC_ClockConfig+0x1c4>)
 8005b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_ClockConfig+0x1c8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc fa44 	bl	8001ff8 <HAL_InitTick>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023c00 	.word	0x40023c00
 8005b80:	40023800 	.word	0x40023800
 8005b84:	0800a37c 	.word	0x0800a37c
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	20000004 	.word	0x20000004

08005b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba8:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	f200 80bd 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d003      	beq.n	8005bca <HAL_RCC_GetSysClockFreq+0x3a>
 8005bc2:	e0b7      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc4:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bc6:	60bb      	str	r3, [r7, #8]
       break;
 8005bc8:	e0b7      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bca:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bcc:	60bb      	str	r3, [r7, #8]
      break;
 8005bce:	e0b4      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd0:	4b5d      	ldr	r3, [pc, #372]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bda:	4b5b      	ldr	r3, [pc, #364]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04d      	beq.n	8005c82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be6:	4b58      	ldr	r3, [pc, #352]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	099b      	lsrs	r3, r3, #6
 8005bec:	461a      	mov	r2, r3
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bf6:	f04f 0100 	mov.w	r1, #0
 8005bfa:	ea02 0800 	and.w	r8, r2, r0
 8005bfe:	ea03 0901 	and.w	r9, r3, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	014b      	lsls	r3, r1, #5
 8005c10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c14:	0142      	lsls	r2, r0, #5
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	ebb0 0008 	subs.w	r0, r0, r8
 8005c1e:	eb61 0109 	sbc.w	r1, r1, r9
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	018b      	lsls	r3, r1, #6
 8005c2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c30:	0182      	lsls	r2, r0, #6
 8005c32:	1a12      	subs	r2, r2, r0
 8005c34:	eb63 0301 	sbc.w	r3, r3, r1
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	00d9      	lsls	r1, r3, #3
 8005c42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c46:	00d0      	lsls	r0, r2, #3
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	eb12 0208 	adds.w	r2, r2, r8
 8005c50:	eb43 0309 	adc.w	r3, r3, r9
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	f04f 0100 	mov.w	r1, #0
 8005c5c:	0259      	lsls	r1, r3, #9
 8005c5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c62:	0250      	lsls	r0, r2, #9
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f7fa fac4 	bl	8000200 <__aeabi_uldivmod>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e04a      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c82:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	ea02 0400 	and.w	r4, r2, r0
 8005c9a:	ea03 0501 	and.w	r5, r3, r1
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	014b      	lsls	r3, r1, #5
 8005cac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cb0:	0142      	lsls	r2, r0, #5
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	1b00      	subs	r0, r0, r4
 8005cb8:	eb61 0105 	sbc.w	r1, r1, r5
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	018b      	lsls	r3, r1, #6
 8005cc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cca:	0182      	lsls	r2, r0, #6
 8005ccc:	1a12      	subs	r2, r2, r0
 8005cce:	eb63 0301 	sbc.w	r3, r3, r1
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	00d9      	lsls	r1, r3, #3
 8005cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ce0:	00d0      	lsls	r0, r2, #3
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	1912      	adds	r2, r2, r4
 8005ce8:	eb45 0303 	adc.w	r3, r5, r3
 8005cec:	f04f 0000 	mov.w	r0, #0
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	0299      	lsls	r1, r3, #10
 8005cf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cfa:	0290      	lsls	r0, r2, #10
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	f7fa fa78 	bl	8000200 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d36:	60bb      	str	r3, [r7, #8]
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000000 	.word	0x20000000

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800a38c 	.word	0x0800a38c

08005d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d98:	f7ff ffdc 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	0800a38c 	.word	0x0800a38c

08005dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	220f      	movs	r2, #15
 8005dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dcc:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 0203 	and.w	r2, r3, #3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <HAL_RCC_GetClockConfig+0x5c>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_RCC_GetClockConfig+0x60>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	40023c00 	.word	0x40023c00

08005e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e48:	4b66      	ldr	r3, [pc, #408]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e56:	4963      	ldr	r1, [pc, #396]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005e6a:	4b5e      	ldr	r3, [pc, #376]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	495a      	ldr	r1, [pc, #360]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d075      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ea4:	4b50      	ldr	r3, [pc, #320]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eaa:	f7fc f9eb 	bl	8002284 <HAL_GetTick>
 8005eae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eb2:	f7fc f9e7 	bl	8002284 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e1dc      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ec4:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f0      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	019a      	lsls	r2, r3, #6
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	071b      	lsls	r3, r3, #28
 8005ee8:	493e      	ldr	r1, [pc, #248]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01f      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005efc:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f02:	0f1b      	lsrs	r3, r3, #28
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	019a      	lsls	r2, r3, #6
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	431a      	orrs	r2, r3
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	071b      	lsls	r3, r3, #28
 8005f1c:	4931      	ldr	r1, [pc, #196]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f2a:	f023 021f 	bic.w	r2, r3, #31
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	492b      	ldr	r1, [pc, #172]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	019a      	lsls	r2, r3, #6
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	071b      	lsls	r3, r3, #28
 8005f5c:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f64:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f6a:	f7fc f98b 	bl	8002284 <HAL_GetTick>
 8005f6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f72:	f7fc f987 	bl	8002284 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e17c      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d112      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80ce 	beq.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fbe:	f040 80c8 	bne.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fc8:	f7fc f95c 	bl	8002284 <HAL_GetTick>
 8005fcc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fce:	e00f      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fd0:	f7fc f958 	bl	8002284 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d908      	bls.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e14d      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	42470068 	.word	0x42470068
 8005fec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ff0:	4ba5      	ldr	r3, [pc, #660]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ffc:	d0e8      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d02e      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800600a:	4b9f      	ldr	r3, [pc, #636]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800601c:	4b9a      	ldr	r3, [pc, #616]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	0f1b      	lsrs	r3, r3, #28
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	019a      	lsls	r2, r3, #6
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	3b01      	subs	r3, #1
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	061b      	lsls	r3, r3, #24
 8006040:	431a      	orrs	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	071b      	lsls	r3, r3, #28
 8006046:	4990      	ldr	r1, [pc, #576]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800604e:	4b8e      	ldr	r3, [pc, #568]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006054:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	3b01      	subs	r3, #1
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	4989      	ldr	r1, [pc, #548]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d02c      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006074:	4b84      	ldr	r3, [pc, #528]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	3301      	adds	r3, #1
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006086:	4b80      	ldr	r3, [pc, #512]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	0e1b      	lsrs	r3, r3, #24
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	3b01      	subs	r3, #1
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	431a      	orrs	r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	071b      	lsls	r3, r3, #28
 80060b0:	4975      	ldr	r1, [pc, #468]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060b8:	4b73      	ldr	r3, [pc, #460]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	4970      	ldr	r1, [pc, #448]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d024      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e2:	d11f      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e4:	4b68      	ldr	r3, [pc, #416]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	0e1b      	lsrs	r3, r3, #24
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f2:	4b65      	ldr	r3, [pc, #404]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	0f1b      	lsrs	r3, r3, #28
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	019a      	lsls	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	3b01      	subs	r3, #1
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	431a      	orrs	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	071b      	lsls	r3, r3, #28
 800611c:	495a      	ldr	r1, [pc, #360]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006124:	4b59      	ldr	r3, [pc, #356]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800612a:	f7fc f8ab 	bl	8002284 <HAL_GetTick>
 800612e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006132:	f7fc f8a7 	bl	8002284 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e09c      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800614c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006150:	d1ef      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8083 	beq.w	8006266 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006160:	2300      	movs	r3, #0
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	4b48      	ldr	r3, [pc, #288]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	4a47      	ldr	r2, [pc, #284]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616e:	6413      	str	r3, [r2, #64]	; 0x40
 8006170:	4b45      	ldr	r3, [pc, #276]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800617c:	4b44      	ldr	r3, [pc, #272]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a43      	ldr	r2, [pc, #268]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006188:	f7fc f87c 	bl	8002284 <HAL_GetTick>
 800618c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006190:	f7fc f878 	bl	8002284 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e06d      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ae:	4b36      	ldr	r3, [pc, #216]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02f      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d028      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061cc:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d6:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061dc:	4b2d      	ldr	r3, [pc, #180]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061e2:	4a29      	ldr	r2, [pc, #164]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061e8:	4b27      	ldr	r3, [pc, #156]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d114      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fc f846 	bl	8002284 <HAL_GetTick>
 80061f8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	e00a      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fc f842 	bl	8002284 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	; 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e035      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006212:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0ee      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622a:	d10d      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800623c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006240:	4911      	ldr	r1, [pc, #68]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	e005      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800624e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006252:	6093      	str	r3, [r2, #8]
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006260:	4909      	ldr	r1, [pc, #36]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006262:	4313      	orrs	r3, r2
 8006264:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800627a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	42470070 	.word	0x42470070
 8006290:	40007000 	.word	0x40007000
 8006294:	42470e40 	.word	0x42470e40
 8006298:	424711e0 	.word	0x424711e0

0800629c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e270      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d075      	beq.n	80063a6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062ba:	4ba3      	ldr	r3, [pc, #652]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 030c 	and.w	r3, r3, #12
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d00c      	beq.n	80062e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c6:	4ba0      	ldr	r3, [pc, #640]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d112      	bne.n	80062f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d2:	4b9d      	ldr	r3, [pc, #628]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062de:	d10b      	bne.n	80062f8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	4b99      	ldr	r3, [pc, #612]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d05b      	beq.n	80063a4 <HAL_RCC_OscConfig+0x108>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d157      	bne.n	80063a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e24b      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006300:	d106      	bne.n	8006310 <HAL_RCC_OscConfig+0x74>
 8006302:	4b91      	ldr	r3, [pc, #580]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a90      	ldr	r2, [pc, #576]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e01d      	b.n	800634c <HAL_RCC_OscConfig+0xb0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006318:	d10c      	bne.n	8006334 <HAL_RCC_OscConfig+0x98>
 800631a:	4b8b      	ldr	r3, [pc, #556]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a8a      	ldr	r2, [pc, #552]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	4b88      	ldr	r3, [pc, #544]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a87      	ldr	r2, [pc, #540]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e00b      	b.n	800634c <HAL_RCC_OscConfig+0xb0>
 8006334:	4b84      	ldr	r3, [pc, #528]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a83      	ldr	r2, [pc, #524]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800633a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a80      	ldr	r2, [pc, #512]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800634a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d013      	beq.n	800637c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fb ff96 	bl	8002284 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800635c:	f7fb ff92 	bl	8002284 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	; 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e210      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b76      	ldr	r3, [pc, #472]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0xc0>
 800637a:	e014      	b.n	80063a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb ff82 	bl	8002284 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006384:	f7fb ff7e 	bl	8002284 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b64      	cmp	r3, #100	; 0x64
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e1fc      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006396:	4b6c      	ldr	r3, [pc, #432]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0xe8>
 80063a2:	e000      	b.n	80063a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d063      	beq.n	800647a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063b2:	4b65      	ldr	r3, [pc, #404]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063be:	4b62      	ldr	r3, [pc, #392]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d11c      	bne.n	8006404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d116      	bne.n	8006404 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d6:	4b5c      	ldr	r3, [pc, #368]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_RCC_OscConfig+0x152>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d001      	beq.n	80063ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e1d0      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ee:	4b56      	ldr	r3, [pc, #344]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4952      	ldr	r1, [pc, #328]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006402:	e03a      	b.n	800647a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d020      	beq.n	800644e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800640c:	4b4f      	ldr	r3, [pc, #316]	; (800654c <HAL_RCC_OscConfig+0x2b0>)
 800640e:	2201      	movs	r2, #1
 8006410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006412:	f7fb ff37 	bl	8002284 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800641a:	f7fb ff33 	bl	8002284 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e1b1      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642c:	4b46      	ldr	r3, [pc, #280]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006438:	4b43      	ldr	r3, [pc, #268]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	4940      	ldr	r1, [pc, #256]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006448:	4313      	orrs	r3, r2
 800644a:	600b      	str	r3, [r1, #0]
 800644c:	e015      	b.n	800647a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644e:	4b3f      	ldr	r3, [pc, #252]	; (800654c <HAL_RCC_OscConfig+0x2b0>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fb ff16 	bl	8002284 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800645c:	f7fb ff12 	bl	8002284 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e190      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800646e:	4b36      	ldr	r3, [pc, #216]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d030      	beq.n	80064e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d016      	beq.n	80064bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCC_OscConfig+0x2b4>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006494:	f7fb fef6 	bl	8002284 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800649c:	f7fb fef2 	bl	8002284 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e170      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ae:	4b26      	ldr	r3, [pc, #152]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0x200>
 80064ba:	e015      	b.n	80064e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <HAL_RCC_OscConfig+0x2b4>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c2:	f7fb fedf 	bl	8002284 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ca:	f7fb fedb 	bl	8002284 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e159      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f0      	bne.n	80064ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a0 	beq.w	8006636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	4a0e      	ldr	r2, [pc, #56]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	6413      	str	r3, [r2, #64]	; 0x40
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006522:	2301      	movs	r3, #1
 8006524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <HAL_RCC_OscConfig+0x2b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d121      	bne.n	8006576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <HAL_RCC_OscConfig+0x2b8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <HAL_RCC_OscConfig+0x2b8>)
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653e:	f7fb fea1 	bl	8002284 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006544:	e011      	b.n	800656a <HAL_RCC_OscConfig+0x2ce>
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	42470000 	.word	0x42470000
 8006550:	42470e80 	.word	0x42470e80
 8006554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006558:	f7fb fe94 	bl	8002284 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e112      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656a:	4b8b      	ldr	r3, [pc, #556]	; (8006798 <HAL_RCC_OscConfig+0x4fc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x2f0>
 800657e:	4b87      	ldr	r3, [pc, #540]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	4a86      	ldr	r2, [pc, #536]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	6713      	str	r3, [r2, #112]	; 0x70
 800658a:	e01c      	b.n	80065c6 <HAL_RCC_OscConfig+0x32a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b05      	cmp	r3, #5
 8006592:	d10c      	bne.n	80065ae <HAL_RCC_OscConfig+0x312>
 8006594:	4b81      	ldr	r3, [pc, #516]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	4a80      	ldr	r2, [pc, #512]	; (800679c <HAL_RCC_OscConfig+0x500>)
 800659a:	f043 0304 	orr.w	r3, r3, #4
 800659e:	6713      	str	r3, [r2, #112]	; 0x70
 80065a0:	4b7e      	ldr	r3, [pc, #504]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4a7d      	ldr	r2, [pc, #500]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	; 0x70
 80065ac:	e00b      	b.n	80065c6 <HAL_RCC_OscConfig+0x32a>
 80065ae:	4b7b      	ldr	r3, [pc, #492]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	4a7a      	ldr	r2, [pc, #488]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	6713      	str	r3, [r2, #112]	; 0x70
 80065ba:	4b78      	ldr	r3, [pc, #480]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065be:	4a77      	ldr	r2, [pc, #476]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065c0:	f023 0304 	bic.w	r3, r3, #4
 80065c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d015      	beq.n	80065fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ce:	f7fb fe59 	bl	8002284 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d4:	e00a      	b.n	80065ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fb fe55 	bl	8002284 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e0d1      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ec:	4b6b      	ldr	r3, [pc, #428]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ee      	beq.n	80065d6 <HAL_RCC_OscConfig+0x33a>
 80065f8:	e014      	b.n	8006624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fa:	f7fb fe43 	bl	8002284 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006600:	e00a      	b.n	8006618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006602:	f7fb fe3f 	bl	8002284 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e0bb      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006618:	4b60      	ldr	r3, [pc, #384]	; (800679c <HAL_RCC_OscConfig+0x500>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1ee      	bne.n	8006602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d105      	bne.n	8006636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800662a:	4b5c      	ldr	r3, [pc, #368]	; (800679c <HAL_RCC_OscConfig+0x500>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	4a5b      	ldr	r2, [pc, #364]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80a7 	beq.w	800678e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006640:	4b56      	ldr	r3, [pc, #344]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 030c 	and.w	r3, r3, #12
 8006648:	2b08      	cmp	r3, #8
 800664a:	d060      	beq.n	800670e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d145      	bne.n	80066e0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006654:	4b52      	ldr	r3, [pc, #328]	; (80067a0 <HAL_RCC_OscConfig+0x504>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665a:	f7fb fe13 	bl	8002284 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006662:	f7fb fe0f 	bl	8002284 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e08d      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006674:	4b49      	ldr	r3, [pc, #292]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f0      	bne.n	8006662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	019b      	lsls	r3, r3, #6
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	3b01      	subs	r3, #1
 800669a:	041b      	lsls	r3, r3, #16
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	071b      	lsls	r3, r3, #28
 80066ac:	493b      	ldr	r1, [pc, #236]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b2:	4b3b      	ldr	r3, [pc, #236]	; (80067a0 <HAL_RCC_OscConfig+0x504>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fb fde4 	bl	8002284 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c0:	f7fb fde0 	bl	8002284 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e05e      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	4b32      	ldr	r3, [pc, #200]	; (800679c <HAL_RCC_OscConfig+0x500>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x424>
 80066de:	e056      	b.n	800678e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e0:	4b2f      	ldr	r3, [pc, #188]	; (80067a0 <HAL_RCC_OscConfig+0x504>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e6:	f7fb fdcd 	bl	8002284 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ee:	f7fb fdc9 	bl	8002284 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e047      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	4b26      	ldr	r3, [pc, #152]	; (800679c <HAL_RCC_OscConfig+0x500>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f0      	bne.n	80066ee <HAL_RCC_OscConfig+0x452>
 800670c:	e03f      	b.n	800678e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e03a      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <HAL_RCC_OscConfig+0x500>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d030      	beq.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006732:	429a      	cmp	r2, r3
 8006734:	d129      	bne.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d122      	bne.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800674a:	4013      	ands	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006752:	4293      	cmp	r3, r2
 8006754:	d119      	bne.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	085b      	lsrs	r3, r3, #1
 8006762:	3b01      	subs	r3, #1
 8006764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d10f      	bne.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006776:	429a      	cmp	r2, r3
 8006778:	d107      	bne.n	800678a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006786:	429a      	cmp	r2, r3
 8006788:	d001      	beq.n	800678e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40007000 	.word	0x40007000
 800679c:	40023800 	.word	0x40023800
 80067a0:	42470060 	.word	0x42470060

080067a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e022      	b.n	80067fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fb f977 	bl	8001abc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2203      	movs	r2, #3
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f814 	bl	8006804 <HAL_SD_InitCard>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00a      	b.n	80067fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006804:	b5b0      	push	{r4, r5, r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af04      	add	r7, sp, #16
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800680c:	2300      	movs	r3, #0
 800680e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006820:	2376      	movs	r3, #118	; 0x76
 8006822:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681d      	ldr	r5, [r3, #0]
 8006828:	466c      	mov	r4, sp
 800682a:	f107 0314 	add.w	r3, r7, #20
 800682e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800683c:	4628      	mov	r0, r5
 800683e:	f002 fb11 	bl	8008e64 <SDIO_Init>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e04c      	b.n	80068ee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006854:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <HAL_SD_InitCard+0xf4>)
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f002 fb49 	bl	8008ef6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <HAL_SD_InitCard+0xf4>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ffee 	bl	800784c <SD_PowerON>
 8006870:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e02e      	b.n	80068ee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 ff0f 	bl	80076b4 <SD_InitCard>
 8006896:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e01b      	b.n	80068ee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068be:	4618      	mov	r0, r3
 80068c0:	f002 fbac 	bl	800901c <SDMMC_CmdBlockLength>
 80068c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00f      	beq.n	80068ec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <HAL_SD_InitCard+0xf8>)
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3728      	adds	r7, #40	; 0x28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bdb0      	pop	{r4, r5, r7, pc}
 80068f6:	bf00      	nop
 80068f8:	422580a0 	.word	0x422580a0
 80068fc:	004005ff 	.word	0x004005ff

08006900 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08c      	sub	sp, #48	; 0x30
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0be      	b.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	f040 80b7 	bne.w	8006aa4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800693c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	429a      	cmp	r2, r3
 8006948:	d907      	bls.n	800695a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0a5      	b.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2203      	movs	r2, #3
 800695e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a4c      	ldr	r2, [pc, #304]	; (8006ab0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	4a4b      	ldr	r2, [pc, #300]	; (8006ab4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006988:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2200      	movs	r2, #0
 8006990:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3380      	adds	r3, #128	; 0x80
 80069c0:	4619      	mov	r1, r3
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	025b      	lsls	r3, r3, #9
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	f7fc fdc7 	bl	800355c <HAL_DMA_Start_IT>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d017      	beq.n	8006a04 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a33      	ldr	r2, [pc, #204]	; (8006ab8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e050      	b.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a04:	4b2d      	ldr	r3, [pc, #180]	; (8006abc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d002      	beq.n	8006a18 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	025b      	lsls	r3, r3, #9
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	025b      	lsls	r3, r3, #9
 8006a22:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a24:	2390      	movs	r3, #144	; 0x90
 8006a26:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a30:	2301      	movs	r3, #1
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f107 0210 	add.w	r2, r7, #16
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 fac0 	bl	8008fc4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d90a      	bls.n	8006a60 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2282      	movs	r2, #130	; 0x82
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 fb24 	bl	80090a4 <SDMMC_CmdReadMultiBlock>
 8006a5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a5e:	e009      	b.n	8006a74 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2281      	movs	r2, #129	; 0x81
 8006a64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f002 faf7 	bl	8009060 <SDMMC_CmdReadSingleBlock>
 8006a72:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d012      	beq.n	8006aa0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a0e      	ldr	r2, [pc, #56]	; (8006ab8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e002      	b.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e000      	b.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006aa4:	2302      	movs	r3, #2
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3730      	adds	r7, #48	; 0x30
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	080074c3 	.word	0x080074c3
 8006ab4:	08007535 	.word	0x08007535
 8006ab8:	004005ff 	.word	0x004005ff
 8006abc:	4225858c 	.word	0x4225858c

08006ac0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	; 0x30
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0c1      	b.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 80ba 	bne.w	8006c6a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d907      	bls.n	8006b1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0a8      	b.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2203      	movs	r2, #3
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f042 021a 	orr.w	r2, r2, #26
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	4a4d      	ldr	r2, [pc, #308]	; (8006c74 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8006b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	4a4c      	ldr	r2, [pc, #304]	; (8006c78 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8006b48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2200      	movs	r2, #0
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d002      	beq.n	8006b60 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	025b      	lsls	r3, r3, #9
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d90a      	bls.n	8006b7c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	22a0      	movs	r2, #160	; 0xa0
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 fada 	bl	800912c <SDMMC_CmdWriteMultiBlock>
 8006b78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006b7a:	e009      	b.n	8006b90 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2290      	movs	r2, #144	; 0x90
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f002 faad 	bl	80090e8 <SDMMC_CmdWriteSingleBlock>
 8006b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d012      	beq.n	8006bbc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a38      	ldr	r2, [pc, #224]	; (8006c7c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e057      	b.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006bbc:	4b30      	ldr	r3, [pc, #192]	; (8006c80 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2240      	movs	r2, #64	; 0x40
 8006bc8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3380      	adds	r3, #128	; 0x80
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	025b      	lsls	r3, r3, #9
 8006bf8:	089b      	lsrs	r3, r3, #2
 8006bfa:	f7fc fcaf 	bl	800355c <HAL_DMA_Start_IT>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01a      	beq.n	8006c3a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 021a 	bic.w	r2, r2, #26
 8006c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e018      	b.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	025b      	lsls	r3, r3, #9
 8006c44:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c46:	2390      	movs	r3, #144	; 0x90
 8006c48:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f107 0210 	add.w	r2, r7, #16
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 f9af 	bl	8008fc4 <SDIO_ConfigData>

      return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e000      	b.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3730      	adds	r7, #48	; 0x30
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	08007499 	.word	0x08007499
 8006c78:	08007535 	.word	0x08007535
 8006c7c:	004005ff 	.word	0x004005ff
 8006c80:	4225858c 	.word	0x4225858c

08006c84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_SD_IRQHandler+0x2e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 ffed 	bl	8007c8a <SD_Read_IT>
 8006cb0:	e155      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 808f 	beq.w	8006de0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006cda:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006cde:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d039      	beq.n	8006d6e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_SD_IRQHandler+0x8a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f002 fa2c 	bl	8009170 <SDMMC_CmdStopTransfer>
 8006d18:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f91f 	bl	8006f70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <HAL_SD_IRQHandler+0xda>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f002 fe92 	bl	8009a88 <HAL_SD_RxCpltCallback>
 8006d64:	e0fb      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f002 fe84 	bl	8009a74 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d6c:	e0f7      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80f2 	beq.w	8006f5e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f002 f9f1 	bl	8009170 <SDMMC_CmdStopTransfer>
 8006d8e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f8e4 	bl	8006f70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80d5 	bne.w	8006f5e <HAL_SD_IRQHandler+0x2da>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 80cf 	bne.w	8006f5e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0208 	bic.w	r2, r2, #8
 8006dce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 fe4b 	bl	8009a74 <HAL_SD_TxCpltCallback>
}
 8006dde:	e0be      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <HAL_SD_IRQHandler+0x17c>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 0308 	and.w	r3, r3, #8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 ff97 	bl	8007d2c <SD_Write_IT>
 8006dfe:	e0ae      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80a7 	beq.w	8006f5e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f043 0208 	orr.w	r2, r3, #8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e90:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f002 f96a 	bl	8009170 <SDMMC_CmdStopTransfer>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f855 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 8006ec6:	e04a      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d045      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <HAL_SD_IRQHandler+0x262>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <HAL_SD_IRQHandler+0x2e4>)
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fc fb8a 	bl	800360c <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d02f      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fb68 	bl	80075d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f08:	e029      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_SD_IRQHandler+0x29a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <HAL_SD_IRQHandler+0x2e8>)
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fc fb6e 	bl	800360c <HAL_DMA_Abort_IT>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d013      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb83 	bl	8007646 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f40:	e00d      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 fd82 	bl	8009a60 <HAL_SD_AbortCallback>
}
 8006f5c:	e7ff      	b.n	8006f5e <HAL_SD_IRQHandler+0x2da>
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	080075d9 	.word	0x080075d9
 8006f6c:	08007647 	.word	0x08007647

08006f70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f92:	0f9b      	lsrs	r3, r3, #30
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007002:	0bdb      	lsrs	r3, r3, #15
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	b2da      	uxtb	r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007014:	0b9b      	lsrs	r3, r3, #14
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007026:	0b5b      	lsrs	r3, r3, #13
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	b2da      	uxtb	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007038:	0b1b      	lsrs	r3, r3, #12
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	2b00      	cmp	r3, #0
 8007052:	d163      	bne.n	800711c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007058:	009a      	lsls	r2, r3, #2
 800705a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800705e:	4013      	ands	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007064:	0f92      	lsrs	r2, r2, #30
 8007066:	431a      	orrs	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007070:	0edb      	lsrs	r3, r3, #27
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	b2da      	uxtb	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	b2da      	uxtb	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007094:	0d5b      	lsrs	r3, r3, #21
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	b2da      	uxtb	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	0c9b      	lsrs	r3, r3, #18
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b8:	0bdb      	lsrs	r3, r3, #15
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	7e1b      	ldrb	r3, [r3, #24]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	3302      	adds	r3, #2
 80070dc:	2201      	movs	r2, #1
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070e6:	fb02 f203 	mul.w	r2, r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	7a1b      	ldrb	r3, [r3, #8]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	2201      	movs	r2, #1
 80070fa:	409a      	lsls	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007108:	0a52      	lsrs	r2, r2, #9
 800710a:	fb02 f203 	mul.w	r2, r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007118:	661a      	str	r2, [r3, #96]	; 0x60
 800711a:	e031      	b.n	8007180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	2b01      	cmp	r3, #1
 8007122:	d11d      	bne.n	8007160 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	431a      	orrs	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	029a      	lsls	r2, r3, #10
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007154:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	661a      	str	r2, [r3, #96]	; 0x60
 800715e:	e00f      	b.n	8007180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a58      	ldr	r2, [pc, #352]	; (80072c8 <HAL_SD_GetCardCSD+0x344>)
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e09d      	b.n	80072bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	0b9b      	lsrs	r3, r3, #14
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007196:	09db      	lsrs	r3, r3, #7
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	0fdb      	lsrs	r3, r3, #31
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	0f5b      	lsrs	r3, r3, #29
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	0e9b      	lsrs	r3, r3, #26
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	0d9b      	lsrs	r3, r3, #22
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	0d5b      	lsrs	r3, r3, #21
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	b2da      	uxtb	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	0bdb      	lsrs	r3, r3, #15
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	0b9b      	lsrs	r3, r3, #14
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	b2da      	uxtb	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	0b5b      	lsrs	r3, r3, #13
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	0b1b      	lsrs	r3, r3, #12
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	0a9b      	lsrs	r3, r3, #10
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	004005ff 	.word	0x004005ff

080072cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af04      	add	r7, sp, #16
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	2b03      	cmp	r3, #3
 8007342:	d02e      	beq.n	80073a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d106      	bne.n	800735a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
 8007358:	e029      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d10a      	bne.n	8007378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb28 	bl	80079b8 <SD_WideBus_Enable>
 8007368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
 8007376:	e01a      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb65 	bl	8007a4e <SD_WideBus_Disable>
 8007384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
 8007392:	e00c      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
 80073a0:	e005      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a26      	ldr	r2, [pc, #152]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x130>)
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073cc:	e01f      	b.n	800740e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681d      	ldr	r5, [r3, #0]
 80073f4:	466c      	mov	r4, sp
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007408:	4628      	mov	r0, r5
 800740a:	f001 fd2b 	bl	8008e64 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fe00 	bl	800901c <SDMMC_CmdBlockLength>
 800741c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x130>)
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800744a:	4618      	mov	r0, r3
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bdb0      	pop	{r4, r5, r7, pc}
 8007452:	bf00      	nop
 8007454:	004005ff 	.word	0x004005ff

08007458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa7c 	bl	8007968 <SD_SendStatus>
 8007470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0a5b      	lsrs	r3, r3, #9
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800748e:	693b      	ldr	r3, [r7, #16]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	2b82      	cmp	r3, #130	; 0x82
 80074d6:	d111      	bne.n	80074fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fe47 	bl	8009170 <SDMMC_CmdStopTransfer>
 80074e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fd3a 	bl	8006f70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0208 	bic.w	r2, r2, #8
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f240 523a 	movw	r2, #1338	; 0x53a
 8007514:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f002 faaf 	bl	8009a88 <HAL_SD_RxCpltCallback>
#endif
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fc fa0e 	bl	8003964 <HAL_DMA_GetError>
 8007548:	4603      	mov	r3, r0
 800754a:	2b02      	cmp	r3, #2
 800754c:	d03e      	beq.n	80075cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d002      	beq.n	800756a <SD_DMAError+0x36>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d12d      	bne.n	80075c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <SD_DMAError+0xa0>)
 8007570:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	f7ff ff62 	bl	8007458 <HAL_SD_GetCardState>
 8007594:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b06      	cmp	r3, #6
 800759a:	d002      	beq.n	80075a2 <SD_DMAError+0x6e>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d10a      	bne.n	80075b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fde2 	bl	8009170 <SDMMC_CmdStopTransfer>
 80075ac:	4602      	mov	r2, r0
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	431a      	orrs	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f7ff fcd2 	bl	8006f70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	004005ff 	.word	0x004005ff

080075d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff ff31 	bl	8007458 <HAL_SD_GetCardState>
 80075f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b06      	cmp	r3, #6
 800760a:	d002      	beq.n	8007612 <SD_DMATxAbort+0x3a>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b05      	cmp	r3, #5
 8007610:	d10a      	bne.n	8007628 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fdaa 	bl	8009170 <SDMMC_CmdStopTransfer>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f002 fa15 	bl	8009a60 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007636:	e002      	b.n	800763e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fc99 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f240 523a 	movw	r2, #1338	; 0x53a
 800765c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff fefa 	bl	8007458 <HAL_SD_GetCardState>
 8007664:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b06      	cmp	r3, #6
 8007678:	d002      	beq.n	8007680 <SD_DMARxAbort+0x3a>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b05      	cmp	r3, #5
 800767e:	d10a      	bne.n	8007696 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fd73 	bl	8009170 <SDMMC_CmdStopTransfer>
 800768a:	4602      	mov	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	431a      	orrs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f002 f9de 	bl	8009a60 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076a4:	e002      	b.n	80076ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff fc62 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b094      	sub	sp, #80	; 0x50
 80076b8:	af04      	add	r7, sp, #16
 80076ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80076bc:	2301      	movs	r3, #1
 80076be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fc25 	bl	8008f14 <SDIO_GetPowerState>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076d4:	e0b6      	b.n	8007844 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d02f      	beq.n	800773e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fe4e 	bl	8009384 <SDMMC_CmdSendCID>
 80076e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	e0a7      	b.n	8007844 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fc4f 	bl	8008f9e <SDIO_GetResponse>
 8007700:	4602      	mov	r2, r0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2104      	movs	r1, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fc46 	bl	8008f9e <SDIO_GetResponse>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2108      	movs	r1, #8
 800771e:	4618      	mov	r0, r3
 8007720:	f001 fc3d 	bl	8008f9e <SDIO_GetResponse>
 8007724:	4602      	mov	r2, r0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	210c      	movs	r1, #12
 8007730:	4618      	mov	r0, r3
 8007732:	f001 fc34 	bl	8008f9e <SDIO_GetResponse>
 8007736:	4602      	mov	r2, r0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	2b03      	cmp	r3, #3
 8007744:	d00d      	beq.n	8007762 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f107 020e 	add.w	r2, r7, #14
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f001 fe54 	bl	80093fe <SDMMC_CmdSetRelAdd>
 8007756:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <SD_InitCard+0xae>
    {
      return errorstate;
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	e070      	b.n	8007844 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	2b03      	cmp	r3, #3
 8007768:	d036      	beq.n	80077d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	461a      	mov	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	041b      	lsls	r3, r3, #16
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f001 fe1e 	bl	80093c0 <SDMMC_CmdSendCSD>
 8007784:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <SD_InitCard+0xdc>
    {
      return errorstate;
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	e059      	b.n	8007844 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fc01 	bl	8008f9e <SDIO_GetResponse>
 800779c:	4602      	mov	r2, r0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2104      	movs	r1, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fbf8 	bl	8008f9e <SDIO_GetResponse>
 80077ae:	4602      	mov	r2, r0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2108      	movs	r1, #8
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fbef 	bl	8008f9e <SDIO_GetResponse>
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	210c      	movs	r1, #12
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fbe6 	bl	8008f9e <SDIO_GetResponse>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2104      	movs	r1, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fbdd 	bl	8008f9e <SDIO_GetResponse>
 80077e4:	4603      	mov	r3, r0
 80077e6:	0d1a      	lsrs	r2, r3, #20
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fbc6 	bl	8006f84 <HAL_SD_GetCardCSD>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007802:	e01f      	b.n	8007844 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6819      	ldr	r1, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	461a      	mov	r2, r3
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	4608      	mov	r0, r1
 8007816:	f001 fccd 	bl	80091b4 <SDMMC_CmdSelDesel>
 800781a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800781c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <SD_InitCard+0x172>
  {
    return errorstate;
 8007822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007824:	e00e      	b.n	8007844 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681d      	ldr	r5, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	466c      	mov	r4, sp
 800782e:	f103 0210 	add.w	r2, r3, #16
 8007832:	ca07      	ldmia	r2, {r0, r1, r2}
 8007834:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007838:	3304      	adds	r3, #4
 800783a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800783c:	4628      	mov	r0, r5
 800783e:	f001 fb11 	bl	8008e64 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3740      	adds	r7, #64	; 0x40
 8007848:	46bd      	mov	sp, r7
 800784a:	bdb0      	pop	{r4, r5, r7, pc}

0800784c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fcc8 	bl	80091fa <SDMMC_CmdGoIdleState>
 800786a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	e072      	b.n	800795c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f001 fcdb 	bl	8009236 <SDMMC_CmdOperCond>
 8007880:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f001 fcb1 	bl	80091fa <SDMMC_CmdGoIdleState>
 8007898:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	e05b      	b.n	800795c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d137      	bne.n	8007922 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fcdb 	bl	8009274 <SDMMC_CmdAppCommand>
 80078be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02d      	beq.n	8007922 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078ca:	e047      	b.n	800795c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 fcce 	bl	8009274 <SDMMC_CmdAppCommand>
 80078d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e03b      	b.n	800795c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	491e      	ldr	r1, [pc, #120]	; (8007964 <SD_PowerON+0x118>)
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fce4 	bl	80092b8 <SDMMC_CmdAppOperCommand>
 80078f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078fc:	e02e      	b.n	800795c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f001 fb4a 	bl	8008f9e <SDIO_GetResponse>
 800790a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	0fdb      	lsrs	r3, r3, #31
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <SD_PowerON+0xcc>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <SD_PowerON+0xce>
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]

    count++;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3301      	adds	r3, #1
 8007920:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007928:	4293      	cmp	r3, r2
 800792a:	d802      	bhi.n	8007932 <SD_PowerON+0xe6>
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0cc      	beq.n	80078cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007938:	4293      	cmp	r3, r2
 800793a:	d902      	bls.n	8007942 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800793c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007940:	e00c      	b.n	800795c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	645a      	str	r2, [r3, #68]	; 0x44
 8007952:	e002      	b.n	800795a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	c1100000 	.word	0xc1100000

08007968 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800797c:	e018      	b.n	80079b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007986:	041b      	lsls	r3, r3, #16
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f001 fd58 	bl	8009440 <SDMMC_CmdSendStatus>
 8007990:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	e009      	b.n	80079b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fafb 	bl	8008f9e <SDIO_GetResponse>
 80079a8:	4602      	mov	r2, r0
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 fae5 	bl	8008f9e <SDIO_GetResponse>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079de:	d102      	bne.n	80079e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079e4:	e02f      	b.n	8007a46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079e6:	f107 030c 	add.w	r3, r7, #12
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f879 	bl	8007ae4 <SD_FindSCR>
 80079f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	e023      	b.n	8007a46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01c      	beq.n	8007a42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	041b      	lsls	r3, r3, #16
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f001 fc2d 	bl	8009274 <SDMMC_CmdAppCommand>
 8007a1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	e00f      	b.n	8007a46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fc66 	bl	80092fe <SDMMC_CmdBusWidth>
 8007a32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	e003      	b.n	8007a46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e001      	b.n	8007a46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2100      	movs	r1, #0
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 fa9a 	bl	8008f9e <SDIO_GetResponse>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a74:	d102      	bne.n	8007a7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a7a:	e02f      	b.n	8007adc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a7c:	f107 030c 	add.w	r3, r7, #12
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f82e 	bl	8007ae4 <SD_FindSCR>
 8007a88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	e023      	b.n	8007adc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01c      	beq.n	8007ad8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f001 fbe2 	bl	8009274 <SDMMC_CmdAppCommand>
 8007ab0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	e00f      	b.n	8007adc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 fc1b 	bl	80092fe <SDMMC_CmdBusWidth>
 8007ac8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	e003      	b.n	8007adc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e001      	b.n	8007adc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b08f      	sub	sp, #60	; 0x3c
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007aee:	f7fa fbc9 	bl	8002284 <HAL_GetTick>
 8007af2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007af8:	2300      	movs	r3, #0
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2108      	movs	r1, #8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 fa86 	bl	800901c <SDMMC_CmdBlockLength>
 8007b10:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	e0b2      	b.n	8007c82 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f001 fba3 	bl	8009274 <SDMMC_CmdAppCommand>
 8007b2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	e0a3      	b.n	8007c82 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b40:	2308      	movs	r3, #8
 8007b42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007b44:	2330      	movs	r3, #48	; 0x30
 8007b46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f107 0210 	add.w	r2, r7, #16
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fa30 	bl	8008fc4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 fbea 	bl	8009342 <SDMMC_CmdSendSCR>
 8007b6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d02a      	beq.n	8007bcc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	e083      	b.n	8007c82 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	18d4      	adds	r4, r2, r3
 8007b96:	4608      	mov	r0, r1
 8007b98:	f001 f98f 	bl	8008eba <SDIO_ReadFIFO>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	6023      	str	r3, [r4, #0]
      index++;
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	e006      	b.n	8007bb6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d012      	beq.n	8007bdc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bb6:	f7fa fb65 	bl	8002284 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d102      	bne.n	8007bcc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007bc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bca:	e05a      	b.n	8007c82 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0cf      	beq.n	8007b7a <SD_FindSCR+0x96>
 8007bda:	e000      	b.n	8007bde <SD_FindSCR+0xfa>
      break;
 8007bdc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2208      	movs	r2, #8
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	e044      	b.n	8007c82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e037      	b.n	8007c82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2220      	movs	r2, #32
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c28:	2320      	movs	r3, #32
 8007c2a:	e02a      	b.n	8007c82 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	061a      	lsls	r2, r3, #24
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	0e1b      	lsrs	r3, r3, #24
 8007c52:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	601a      	str	r2, [r3, #0]
    scr++;
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	061a      	lsls	r2, r3, #24
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	0e1b      	lsrs	r3, r3, #24
 8007c7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	373c      	adds	r7, #60	; 0x3c
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd90      	pop	{r4, r7, pc}

08007c8a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d03f      	beq.n	8007d24 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e033      	b.n	8007d12 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 f903 	bl	8008eba <SDIO_ReadFIFO>
 8007cb4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	0a1b      	lsrs	r3, r3, #8
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	0e1b      	lsrs	r3, r3, #24
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b07      	cmp	r3, #7
 8007d16:	d9c8      	bls.n	8007caa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007d24:	bf00      	nop
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d043      	beq.n	8007dce <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e037      	b.n	8007dbc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3301      	adds	r3, #1
 8007d56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	021a      	lsls	r2, r3, #8
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	041a      	lsls	r2, r3, #16
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3301      	adds	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	061a      	lsls	r2, r3, #24
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f107 0208 	add.w	r2, r7, #8
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 f88f 	bl	8008ed4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b07      	cmp	r3, #7
 8007dc0:	d9c4      	bls.n	8007d4c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e025      	b.n	8007e36 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fa f8f0 	bl	8001fe4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4610      	mov	r0, r2
 8007e18:	f000 ff32 	bl	8008c80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	f000 ff9d 	bl	8008d66 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e07b      	b.n	8007f48 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e60:	d009      	beq.n	8007e76 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	61da      	str	r2, [r3, #28]
 8007e68:	e005      	b.n	8007e76 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7f9 ff2b 	bl	8001cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	ea42 0103 	orr.w	r1, r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	f003 0104 	and.w	r1, r3, #4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0210 	and.w	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e041      	b.n	8007fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7f9 ff20 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f000 fa96 	bl	80084c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	d001      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e04e      	b.n	80080a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a23      	ldr	r2, [pc, #140]	; (80080b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d022      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d01d      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <HAL_TIM_Base_Start_IT+0xcc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1c      	ldr	r2, [pc, #112]	; (80080c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a18      	ldr	r2, [pc, #96]	; (80080cc <HAL_TIM_Base_Start_IT+0xdc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d111      	bne.n	8008094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b06      	cmp	r3, #6
 8008080:	d010      	beq.n	80080a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f042 0201 	orr.w	r2, r2, #1
 8008090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008092:	e007      	b.n	80080a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40010000 	.word	0x40010000
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800
 80080c0:	40000c00 	.word	0x40000c00
 80080c4:	40010400 	.word	0x40010400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40001800 	.word	0x40001800

080080d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d122      	bne.n	800812c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d11b      	bne.n	800812c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0202 	mvn.w	r2, #2
 80080fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9b5 	bl	8008482 <HAL_TIM_IC_CaptureCallback>
 8008118:	e005      	b.n	8008126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9a7 	bl	800846e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f9b8 	bl	8008496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b04      	cmp	r3, #4
 8008138:	d122      	bne.n	8008180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b04      	cmp	r3, #4
 8008146:	d11b      	bne.n	8008180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0204 	mvn.w	r2, #4
 8008150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f98b 	bl	8008482 <HAL_TIM_IC_CaptureCallback>
 800816c:	e005      	b.n	800817a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f97d 	bl	800846e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f98e 	bl	8008496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b08      	cmp	r3, #8
 800818c:	d122      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b08      	cmp	r3, #8
 800819a:	d11b      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0208 	mvn.w	r2, #8
 80081a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f961 	bl	8008482 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f953 	bl	800846e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f964 	bl	8008496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b10      	cmp	r3, #16
 80081e0:	d122      	bne.n	8008228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d11b      	bne.n	8008228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0210 	mvn.w	r2, #16
 80081f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2208      	movs	r2, #8
 80081fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f937 	bl	8008482 <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f929 	bl	800846e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f93a 	bl	8008496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10e      	bne.n	8008254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d107      	bne.n	8008254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0201 	mvn.w	r2, #1
 800824c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7f9 f94a 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825e:	2b80      	cmp	r3, #128	; 0x80
 8008260:	d10e      	bne.n	8008280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d107      	bne.n	8008280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fae0 	bl	8008840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d10e      	bne.n	80082ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d107      	bne.n	80082ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f8ff 	bl	80084aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d10e      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d107      	bne.n	80082d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0220 	mvn.w	r2, #32
 80082d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 faaa 	bl	800882c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_TIM_ConfigClockSource+0x1c>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0b4      	b.n	8008466 <HAL_TIM_ConfigClockSource+0x186>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800831a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008334:	d03e      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0xd4>
 8008336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800833a:	f200 8087 	bhi.w	800844c <HAL_TIM_ConfigClockSource+0x16c>
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	f000 8086 	beq.w	8008452 <HAL_TIM_ConfigClockSource+0x172>
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d87f      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b70      	cmp	r3, #112	; 0x70
 800834e:	d01a      	beq.n	8008386 <HAL_TIM_ConfigClockSource+0xa6>
 8008350:	2b70      	cmp	r3, #112	; 0x70
 8008352:	d87b      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 8008354:	2b60      	cmp	r3, #96	; 0x60
 8008356:	d050      	beq.n	80083fa <HAL_TIM_ConfigClockSource+0x11a>
 8008358:	2b60      	cmp	r3, #96	; 0x60
 800835a:	d877      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b50      	cmp	r3, #80	; 0x50
 800835e:	d03c      	beq.n	80083da <HAL_TIM_ConfigClockSource+0xfa>
 8008360:	2b50      	cmp	r3, #80	; 0x50
 8008362:	d873      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 8008364:	2b40      	cmp	r3, #64	; 0x40
 8008366:	d058      	beq.n	800841a <HAL_TIM_ConfigClockSource+0x13a>
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d86f      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 800836c:	2b30      	cmp	r3, #48	; 0x30
 800836e:	d064      	beq.n	800843a <HAL_TIM_ConfigClockSource+0x15a>
 8008370:	2b30      	cmp	r3, #48	; 0x30
 8008372:	d86b      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 8008374:	2b20      	cmp	r3, #32
 8008376:	d060      	beq.n	800843a <HAL_TIM_ConfigClockSource+0x15a>
 8008378:	2b20      	cmp	r3, #32
 800837a:	d867      	bhi.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d05c      	beq.n	800843a <HAL_TIM_ConfigClockSource+0x15a>
 8008380:	2b10      	cmp	r3, #16
 8008382:	d05a      	beq.n	800843a <HAL_TIM_ConfigClockSource+0x15a>
 8008384:	e062      	b.n	800844c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6899      	ldr	r1, [r3, #8]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f000 f9ad 	bl	80086f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	609a      	str	r2, [r3, #8]
      break;
 80083b2:	e04f      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	6899      	ldr	r1, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f000 f996 	bl	80086f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083d6:	609a      	str	r2, [r3, #8]
      break;
 80083d8:	e03c      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6859      	ldr	r1, [r3, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 f90a 	bl	8008600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2150      	movs	r1, #80	; 0x50
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f963 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 80083f8:	e02c      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	6859      	ldr	r1, [r3, #4]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	461a      	mov	r2, r3
 8008408:	f000 f929 	bl	800865e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2160      	movs	r1, #96	; 0x60
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f953 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 8008418:	e01c      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6859      	ldr	r1, [r3, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	461a      	mov	r2, r3
 8008428:	f000 f8ea 	bl	8008600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2140      	movs	r1, #64	; 0x40
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f943 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 8008438:	e00c      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f000 f93a 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 800844a:	e003      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e000      	b.n	8008454 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008452:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a40      	ldr	r2, [pc, #256]	; (80085d4 <TIM_Base_SetConfig+0x114>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d013      	beq.n	8008500 <TIM_Base_SetConfig+0x40>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d00f      	beq.n	8008500 <TIM_Base_SetConfig+0x40>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a3d      	ldr	r2, [pc, #244]	; (80085d8 <TIM_Base_SetConfig+0x118>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_Base_SetConfig+0x40>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a3c      	ldr	r2, [pc, #240]	; (80085dc <TIM_Base_SetConfig+0x11c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_Base_SetConfig+0x40>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a3b      	ldr	r2, [pc, #236]	; (80085e0 <TIM_Base_SetConfig+0x120>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a3a      	ldr	r2, [pc, #232]	; (80085e4 <TIM_Base_SetConfig+0x124>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a2f      	ldr	r2, [pc, #188]	; (80085d4 <TIM_Base_SetConfig+0x114>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d02b      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008520:	d027      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <TIM_Base_SetConfig+0x118>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d023      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a2b      	ldr	r2, [pc, #172]	; (80085dc <TIM_Base_SetConfig+0x11c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01f      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2a      	ldr	r2, [pc, #168]	; (80085e0 <TIM_Base_SetConfig+0x120>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d01b      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a29      	ldr	r2, [pc, #164]	; (80085e4 <TIM_Base_SetConfig+0x124>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d017      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a28      	ldr	r2, [pc, #160]	; (80085e8 <TIM_Base_SetConfig+0x128>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d013      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a27      	ldr	r2, [pc, #156]	; (80085ec <TIM_Base_SetConfig+0x12c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00f      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a26      	ldr	r2, [pc, #152]	; (80085f0 <TIM_Base_SetConfig+0x130>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00b      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a25      	ldr	r2, [pc, #148]	; (80085f4 <TIM_Base_SetConfig+0x134>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d007      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <TIM_Base_SetConfig+0x138>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a23      	ldr	r2, [pc, #140]	; (80085fc <TIM_Base_SetConfig+0x13c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d108      	bne.n	8008584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a0a      	ldr	r2, [pc, #40]	; (80085d4 <TIM_Base_SetConfig+0x114>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_Base_SetConfig+0xf8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <TIM_Base_SetConfig+0x124>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d103      	bne.n	80085c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	615a      	str	r2, [r3, #20]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40010000 	.word	0x40010000
 80085d8:	40000400 	.word	0x40000400
 80085dc:	40000800 	.word	0x40000800
 80085e0:	40000c00 	.word	0x40000c00
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800
 80085f4:	40001800 	.word	0x40001800
 80085f8:	40001c00 	.word	0x40001c00
 80085fc:	40002000 	.word	0x40002000

08008600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0201 	bic.w	r2, r3, #1
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 030a 	bic.w	r3, r3, #10
 800863c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800865e:	b480      	push	{r7}
 8008660:	b087      	sub	sp, #28
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	f023 0210 	bic.w	r2, r3, #16
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	031b      	lsls	r3, r3, #12
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800869a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	621a      	str	r2, [r3, #32]
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	f043 0307 	orr.w	r3, r3, #7
 80086e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800870e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	021a      	lsls	r2, r3, #8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	431a      	orrs	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4313      	orrs	r3, r2
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008748:	2302      	movs	r3, #2
 800874a:	e05a      	b.n	8008802 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a21      	ldr	r2, [pc, #132]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d022      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d01d      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a18      	ldr	r2, [pc, #96]	; (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a17      	ldr	r2, [pc, #92]	; (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a15      	ldr	r2, [pc, #84]	; (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d10c      	bne.n	80087f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40010000 	.word	0x40010000
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40000c00 	.word	0x40000c00
 8008820:	40010400 	.word	0x40010400
 8008824:	40014000 	.word	0x40014000
 8008828:	40001800 	.word	0x40001800

0800882c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e03f      	b.n	80088e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7f9 fac4 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	; 0x24
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f829 	bl	80088f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695a      	ldr	r2, [r3, #20]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	b09f      	sub	sp, #124	; 0x7c
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008906:	68d9      	ldr	r1, [r3, #12]
 8008908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	ea40 0301 	orr.w	r3, r0, r1
 8008910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	431a      	orrs	r2, r3
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	431a      	orrs	r2, r3
 8008922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	4313      	orrs	r3, r2
 8008928:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008934:	f021 010c 	bic.w	r1, r1, #12
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800893e:	430b      	orrs	r3, r1
 8008940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800894c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894e:	6999      	ldr	r1, [r3, #24]
 8008950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	ea40 0301 	orr.w	r3, r0, r1
 8008958:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4bc5      	ldr	r3, [pc, #788]	; (8008c74 <UART_SetConfig+0x384>)
 8008960:	429a      	cmp	r2, r3
 8008962:	d004      	beq.n	800896e <UART_SetConfig+0x7e>
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4bc3      	ldr	r3, [pc, #780]	; (8008c78 <UART_SetConfig+0x388>)
 800896a:	429a      	cmp	r2, r3
 800896c:	d103      	bne.n	8008976 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800896e:	f7fd fa11 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
 8008972:	6778      	str	r0, [r7, #116]	; 0x74
 8008974:	e002      	b.n	800897c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008976:	f7fd f9f9 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 800897a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008984:	f040 80b6 	bne.w	8008af4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800898a:	461c      	mov	r4, r3
 800898c:	f04f 0500 	mov.w	r5, #0
 8008990:	4622      	mov	r2, r4
 8008992:	462b      	mov	r3, r5
 8008994:	1891      	adds	r1, r2, r2
 8008996:	6439      	str	r1, [r7, #64]	; 0x40
 8008998:	415b      	adcs	r3, r3
 800899a:	647b      	str	r3, [r7, #68]	; 0x44
 800899c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089a0:	1912      	adds	r2, r2, r4
 80089a2:	eb45 0303 	adc.w	r3, r5, r3
 80089a6:	f04f 0000 	mov.w	r0, #0
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	00d9      	lsls	r1, r3, #3
 80089b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089b4:	00d0      	lsls	r0, r2, #3
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	1911      	adds	r1, r2, r4
 80089bc:	6639      	str	r1, [r7, #96]	; 0x60
 80089be:	416b      	adcs	r3, r5
 80089c0:	667b      	str	r3, [r7, #100]	; 0x64
 80089c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	1891      	adds	r1, r2, r2
 80089ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80089d0:	415b      	adcs	r3, r3
 80089d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089dc:	f7f7 fc10 	bl	8000200 <__aeabi_uldivmod>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4ba5      	ldr	r3, [pc, #660]	; (8008c7c <UART_SetConfig+0x38c>)
 80089e6:	fba3 2302 	umull	r2, r3, r3, r2
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	011e      	lsls	r6, r3, #4
 80089ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f0:	461c      	mov	r4, r3
 80089f2:	f04f 0500 	mov.w	r5, #0
 80089f6:	4622      	mov	r2, r4
 80089f8:	462b      	mov	r3, r5
 80089fa:	1891      	adds	r1, r2, r2
 80089fc:	6339      	str	r1, [r7, #48]	; 0x30
 80089fe:	415b      	adcs	r3, r3
 8008a00:	637b      	str	r3, [r7, #52]	; 0x34
 8008a02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a06:	1912      	adds	r2, r2, r4
 8008a08:	eb45 0303 	adc.w	r3, r5, r3
 8008a0c:	f04f 0000 	mov.w	r0, #0
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	00d9      	lsls	r1, r3, #3
 8008a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a1a:	00d0      	lsls	r0, r2, #3
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	1911      	adds	r1, r2, r4
 8008a22:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a24:	416b      	adcs	r3, r5
 8008a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f04f 0300 	mov.w	r3, #0
 8008a32:	1891      	adds	r1, r2, r2
 8008a34:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a36:	415b      	adcs	r3, r3
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a42:	f7f7 fbdd 	bl	8000200 <__aeabi_uldivmod>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4b8c      	ldr	r3, [pc, #560]	; (8008c7c <UART_SetConfig+0x38c>)
 8008a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a50:	095b      	lsrs	r3, r3, #5
 8008a52:	2164      	movs	r1, #100	; 0x64
 8008a54:	fb01 f303 	mul.w	r3, r1, r3
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	3332      	adds	r3, #50	; 0x32
 8008a5e:	4a87      	ldr	r2, [pc, #540]	; (8008c7c <UART_SetConfig+0x38c>)
 8008a60:	fba2 2303 	umull	r2, r3, r2, r3
 8008a64:	095b      	lsrs	r3, r3, #5
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a6c:	441e      	add	r6, r3
 8008a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a70:	4618      	mov	r0, r3
 8008a72:	f04f 0100 	mov.w	r1, #0
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	1894      	adds	r4, r2, r2
 8008a7c:	623c      	str	r4, [r7, #32]
 8008a7e:	415b      	adcs	r3, r3
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
 8008a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a86:	1812      	adds	r2, r2, r0
 8008a88:	eb41 0303 	adc.w	r3, r1, r3
 8008a8c:	f04f 0400 	mov.w	r4, #0
 8008a90:	f04f 0500 	mov.w	r5, #0
 8008a94:	00dd      	lsls	r5, r3, #3
 8008a96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a9a:	00d4      	lsls	r4, r2, #3
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	1814      	adds	r4, r2, r0
 8008aa2:	653c      	str	r4, [r7, #80]	; 0x50
 8008aa4:	414b      	adcs	r3, r1
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8008aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	461a      	mov	r2, r3
 8008aae:	f04f 0300 	mov.w	r3, #0
 8008ab2:	1891      	adds	r1, r2, r2
 8008ab4:	61b9      	str	r1, [r7, #24]
 8008ab6:	415b      	adcs	r3, r3
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ac2:	f7f7 fb9d 	bl	8000200 <__aeabi_uldivmod>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4b6c      	ldr	r3, [pc, #432]	; (8008c7c <UART_SetConfig+0x38c>)
 8008acc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	2164      	movs	r1, #100	; 0x64
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	3332      	adds	r3, #50	; 0x32
 8008ade:	4a67      	ldr	r2, [pc, #412]	; (8008c7c <UART_SetConfig+0x38c>)
 8008ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae4:	095b      	lsrs	r3, r3, #5
 8008ae6:	f003 0207 	and.w	r2, r3, #7
 8008aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4432      	add	r2, r6
 8008af0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008af2:	e0b9      	b.n	8008c68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af6:	461c      	mov	r4, r3
 8008af8:	f04f 0500 	mov.w	r5, #0
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	1891      	adds	r1, r2, r2
 8008b02:	6139      	str	r1, [r7, #16]
 8008b04:	415b      	adcs	r3, r3
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b0c:	1912      	adds	r2, r2, r4
 8008b0e:	eb45 0303 	adc.w	r3, r5, r3
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f04f 0100 	mov.w	r1, #0
 8008b1a:	00d9      	lsls	r1, r3, #3
 8008b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b20:	00d0      	lsls	r0, r2, #3
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	eb12 0804 	adds.w	r8, r2, r4
 8008b2a:	eb43 0905 	adc.w	r9, r3, r5
 8008b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f04f 0100 	mov.w	r1, #0
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	008b      	lsls	r3, r1, #2
 8008b42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b46:	0082      	lsls	r2, r0, #2
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f7f7 fb58 	bl	8000200 <__aeabi_uldivmod>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4b49      	ldr	r3, [pc, #292]	; (8008c7c <UART_SetConfig+0x38c>)
 8008b56:	fba3 2302 	umull	r2, r3, r3, r2
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	011e      	lsls	r6, r3, #4
 8008b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b60:	4618      	mov	r0, r3
 8008b62:	f04f 0100 	mov.w	r1, #0
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	1894      	adds	r4, r2, r2
 8008b6c:	60bc      	str	r4, [r7, #8]
 8008b6e:	415b      	adcs	r3, r3
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b76:	1812      	adds	r2, r2, r0
 8008b78:	eb41 0303 	adc.w	r3, r1, r3
 8008b7c:	f04f 0400 	mov.w	r4, #0
 8008b80:	f04f 0500 	mov.w	r5, #0
 8008b84:	00dd      	lsls	r5, r3, #3
 8008b86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b8a:	00d4      	lsls	r4, r2, #3
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	462b      	mov	r3, r5
 8008b90:	1814      	adds	r4, r2, r0
 8008b92:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b94:	414b      	adcs	r3, r1
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	f04f 0300 	mov.w	r3, #0
 8008baa:	008b      	lsls	r3, r1, #2
 8008bac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bb0:	0082      	lsls	r2, r0, #2
 8008bb2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bb6:	f7f7 fb23 	bl	8000200 <__aeabi_uldivmod>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4b2f      	ldr	r3, [pc, #188]	; (8008c7c <UART_SetConfig+0x38c>)
 8008bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc4:	095b      	lsrs	r3, r3, #5
 8008bc6:	2164      	movs	r1, #100	; 0x64
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	3332      	adds	r3, #50	; 0x32
 8008bd2:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <UART_SetConfig+0x38c>)
 8008bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bde:	441e      	add	r6, r3
 8008be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008be2:	4618      	mov	r0, r3
 8008be4:	f04f 0100 	mov.w	r1, #0
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	1894      	adds	r4, r2, r2
 8008bee:	603c      	str	r4, [r7, #0]
 8008bf0:	415b      	adcs	r3, r3
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf8:	1812      	adds	r2, r2, r0
 8008bfa:	eb41 0303 	adc.w	r3, r1, r3
 8008bfe:	f04f 0400 	mov.w	r4, #0
 8008c02:	f04f 0500 	mov.w	r5, #0
 8008c06:	00dd      	lsls	r5, r3, #3
 8008c08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c0c:	00d4      	lsls	r4, r2, #3
 8008c0e:	4622      	mov	r2, r4
 8008c10:	462b      	mov	r3, r5
 8008c12:	eb12 0a00 	adds.w	sl, r2, r0
 8008c16:	eb43 0b01 	adc.w	fp, r3, r1
 8008c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f04f 0100 	mov.w	r1, #0
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	008b      	lsls	r3, r1, #2
 8008c2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c32:	0082      	lsls	r2, r0, #2
 8008c34:	4650      	mov	r0, sl
 8008c36:	4659      	mov	r1, fp
 8008c38:	f7f7 fae2 	bl	8000200 <__aeabi_uldivmod>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4b0e      	ldr	r3, [pc, #56]	; (8008c7c <UART_SetConfig+0x38c>)
 8008c42:	fba3 1302 	umull	r1, r3, r3, r2
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	2164      	movs	r1, #100	; 0x64
 8008c4a:	fb01 f303 	mul.w	r3, r1, r3
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	3332      	adds	r3, #50	; 0x32
 8008c54:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <UART_SetConfig+0x38c>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4432      	add	r2, r6
 8008c66:	609a      	str	r2, [r3, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	377c      	adds	r7, #124	; 0x7c
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c72:	bf00      	nop
 8008c74:	40011000 	.word	0x40011000
 8008c78:	40011400 	.word	0x40011400
 8008c7c:	51eb851f 	.word	0x51eb851f

08008c80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d029      	beq.n	8008cee <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008caa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008cb4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008cba:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008cc0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008cc6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008ccc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008cd2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008cd8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008cde:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e034      	b.n	8008d58 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cfa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d04:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008d0a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008d32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008d38:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008d3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008d44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d02e      	beq.n	8008dde <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d8c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008d9c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008da6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008db0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008dba:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008dc4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	e03b      	b.n	8008e56 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dee:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008e00:	4313      	orrs	r3, r2
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e14:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008e24:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008e2e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008e38:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008e42:	4313      	orrs	r3, r2
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008e64:	b084      	sub	sp, #16
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	f107 001c 	add.w	r0, r7, #28
 8008e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008e7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008e7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008e82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008e86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008e8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008e8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	b004      	add	sp, #16
 8008eb8:	4770      	bx	lr

08008eba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2203      	movs	r2, #3
 8008f02:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008f04:	2002      	movs	r0, #2
 8008f06:	f7f9 f9c9 	bl	800229c <HAL_Delay>
  
  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0303 	and.w	r3, r3, #3
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008f54:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008f5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008f6a:	f023 030f 	bic.w	r3, r3, #15
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	b2db      	uxtb	r3, r3
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3314      	adds	r3, #20
 8008fac:	461a      	mov	r2, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
}  
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008fea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008ff0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008ff6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800900e:	2300      	movs	r3, #0

}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800902a:	2310      	movs	r3, #16
 800902c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800903a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff ff74 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	2110      	movs	r1, #16
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa44 	bl	80094dc <SDMMC_GetCmdResp1>
 8009054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009056:	69fb      	ldr	r3, [r7, #28]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800906e:	2311      	movs	r3, #17
 8009070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009072:	2340      	movs	r3, #64	; 0x40
 8009074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800907a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800907e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff ff52 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	2111      	movs	r1, #17
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa22 	bl	80094dc <SDMMC_GetCmdResp1>
 8009098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909a:	69fb      	ldr	r3, [r7, #28]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80090b2:	2312      	movs	r3, #18
 80090b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c4:	f107 0308 	add.w	r3, r7, #8
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff ff30 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80090d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d4:	2112      	movs	r1, #18
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa00 	bl	80094dc <SDMMC_GetCmdResp1>
 80090dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090de:	69fb      	ldr	r3, [r7, #28]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80090f6:	2318      	movs	r3, #24
 80090f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009108:	f107 0308 	add.w	r3, r7, #8
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff ff0e 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009114:	f241 3288 	movw	r2, #5000	; 0x1388
 8009118:	2118      	movs	r1, #24
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9de 	bl	80094dc <SDMMC_GetCmdResp1>
 8009120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009122:	69fb      	ldr	r3, [r7, #28]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3720      	adds	r7, #32
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800913a:	2319      	movs	r3, #25
 800913c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800913e:	2340      	movs	r3, #64	; 0x40
 8009140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff feec 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009158:	f241 3288 	movw	r2, #5000	; 0x1388
 800915c:	2119      	movs	r1, #25
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f9bc 	bl	80094dc <SDMMC_GetCmdResp1>
 8009164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009166:	69fb      	ldr	r3, [r7, #28]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800917c:	230c      	movs	r3, #12
 800917e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800918c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fecb 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800919a:	4a05      	ldr	r2, [pc, #20]	; (80091b0 <SDMMC_CmdStopTransfer+0x40>)
 800919c:	210c      	movs	r1, #12
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f99c 	bl	80094dc <SDMMC_GetCmdResp1>
 80091a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	05f5e100 	.word	0x05f5e100

080091b4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80091c4:	2307      	movs	r3, #7
 80091c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091c8:	2340      	movs	r3, #64	; 0x40
 80091ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091d6:	f107 0310 	add.w	r3, r7, #16
 80091da:	4619      	mov	r1, r3
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff fea7 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80091e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e6:	2107      	movs	r1, #7
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f977 	bl	80094dc <SDMMC_GetCmdResp1>
 80091ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3728      	adds	r7, #40	; 0x28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b088      	sub	sp, #32
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800920a:	2300      	movs	r3, #0
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fe86 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f92d 	bl	8009484 <SDMMC_GetCmdError>
 800922a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800923e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009244:	2308      	movs	r3, #8
 8009246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009254:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009256:	f107 0308 	add.w	r3, r7, #8
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fe67 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb24 	bl	80098b0 <SDMMC_GetCmdResp7>
 8009268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800926a:	69fb      	ldr	r3, [r7, #28]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009282:	2337      	movs	r3, #55	; 0x37
 8009284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800928e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fe48 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	2137      	movs	r1, #55	; 0x37
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f918 	bl	80094dc <SDMMC_GetCmdResp1>
 80092ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ae:	69fb      	ldr	r3, [r7, #28]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80092ce:	2329      	movs	r3, #41	; 0x29
 80092d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092d2:	2340      	movs	r3, #64	; 0x40
 80092d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fe22 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa2b 	bl	8009748 <SDMMC_GetCmdResp3>
 80092f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092f4:	69fb      	ldr	r3, [r7, #28]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3720      	adds	r7, #32
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b088      	sub	sp, #32
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800930c:	2306      	movs	r3, #6
 800930e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009310:	2340      	movs	r3, #64	; 0x40
 8009312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800931e:	f107 0308 	add.w	r3, r7, #8
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7ff fe03 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800932a:	f241 3288 	movw	r2, #5000	; 0x1388
 800932e:	2106      	movs	r1, #6
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8d3 	bl	80094dc <SDMMC_GetCmdResp1>
 8009336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009338:	69fb      	ldr	r3, [r7, #28]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3720      	adds	r7, #32
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b088      	sub	sp, #32
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800934e:	2333      	movs	r3, #51	; 0x33
 8009350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800935a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800935e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009360:	f107 0308 	add.w	r3, r7, #8
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fde2 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800936c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009370:	2133      	movs	r1, #51	; 0x33
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8b2 	bl	80094dc <SDMMC_GetCmdResp1>
 8009378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937a:	69fb      	ldr	r3, [r7, #28]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009390:	2302      	movs	r3, #2
 8009392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009394:	23c0      	movs	r3, #192	; 0xc0
 8009396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009398:	2300      	movs	r3, #0
 800939a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800939c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff fdc1 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f982 	bl	80096b8 <SDMMC_GetCmdResp2>
 80093b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093b6:	69fb      	ldr	r3, [r7, #28]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80093ce:	2309      	movs	r3, #9
 80093d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80093d2:	23c0      	movs	r3, #192	; 0xc0
 80093d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093e0:	f107 0308 	add.w	r3, r7, #8
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff fda2 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f963 	bl	80096b8 <SDMMC_GetCmdResp2>
 80093f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f4:	69fb      	ldr	r3, [r7, #28]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b088      	sub	sp, #32
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800940c:	2303      	movs	r3, #3
 800940e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800941e:	f107 0308 	add.w	r3, r7, #8
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fd83 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	2103      	movs	r1, #3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9c8 	bl	80097c4 <SDMMC_GetCmdResp6>
 8009434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009436:	69fb      	ldr	r3, [r7, #28]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3720      	adds	r7, #32
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800944e:	230d      	movs	r3, #13
 8009450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800945a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff fd62 	bl	8008f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	210d      	movs	r1, #13
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f832 	bl	80094dc <SDMMC_GetCmdResp1>
 8009478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800947a:	69fb      	ldr	r3, [r7, #28]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <SDMMC_GetCmdError+0x50>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a11      	ldr	r2, [pc, #68]	; (80094d8 <SDMMC_GetCmdError+0x54>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	0a5b      	lsrs	r3, r3, #9
 8009498:	f241 3288 	movw	r2, #5000	; 0x1388
 800949c:	fb02 f303 	mul.w	r3, r2, r3
 80094a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	60fa      	str	r2, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b0:	e009      	b.n	80094c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0f1      	beq.n	80094a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	22c5      	movs	r2, #197	; 0xc5
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000000 	.word	0x20000000
 80094d8:	10624dd3 	.word	0x10624dd3

080094dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	460b      	mov	r3, r1
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094ea:	4b70      	ldr	r3, [pc, #448]	; (80096ac <SDMMC_GetCmdResp1+0x1d0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a70      	ldr	r2, [pc, #448]	; (80096b0 <SDMMC_GetCmdResp1+0x1d4>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	0a5a      	lsrs	r2, r3, #9
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	fb02 f303 	mul.w	r3, r2, r3
 80094fc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	61fa      	str	r2, [r7, #28]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800950c:	e0c9      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009512:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0ef      	beq.n	80094fe <SDMMC_GetCmdResp1+0x22>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1ea      	bne.n	80094fe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2204      	movs	r2, #4
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800953a:	2304      	movs	r3, #4
 800953c:	e0b1      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009550:	2301      	movs	r3, #1
 8009552:	e0a6      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	22c5      	movs	r2, #197	; 0xc5
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fd12 	bl	8008f84 <SDIO_GetCommandResponse>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	4293      	cmp	r3, r2
 8009568:	d001      	beq.n	800956e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800956a:	2301      	movs	r3, #1
 800956c:	e099      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800956e:	2100      	movs	r1, #0
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fd14 	bl	8008f9e <SDIO_GetResponse>
 8009576:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4b4e      	ldr	r3, [pc, #312]	; (80096b4 <SDMMC_GetCmdResp1+0x1d8>)
 800957c:	4013      	ands	r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009582:	2300      	movs	r3, #0
 8009584:	e08d      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	da02      	bge.n	8009592 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800958c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009590:	e087      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	e080      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095aa:	2380      	movs	r3, #128	; 0x80
 80095ac:	e079      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095bc:	e071      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095cc:	e069      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095dc:	e061      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095ec:	e059      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095fc:	e051      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800960c:	e049      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800961c:	e041      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962c:	e039      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800963c:	e031      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009648:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800964c:	e029      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800965c:	e021      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800966c:	e019      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009678:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800967c:	e011      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800968c:	e009      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f003 0308 	and.w	r3, r3, #8
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009698:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800969c:	e001      	b.n	80096a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800969e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000000 	.word	0x20000000
 80096b0:	10624dd3 	.word	0x10624dd3
 80096b4:	fdffe008 	.word	0xfdffe008

080096b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096c0:	4b1f      	ldr	r3, [pc, #124]	; (8009740 <SDMMC_GetCmdResp2+0x88>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a1f      	ldr	r2, [pc, #124]	; (8009744 <SDMMC_GetCmdResp2+0x8c>)
 80096c6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ca:	0a5b      	lsrs	r3, r3, #9
 80096cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096d0:	fb02 f303 	mul.w	r3, r2, r3
 80096d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	1e5a      	subs	r2, r3, #1
 80096da:	60fa      	str	r2, [r7, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096e4:	e026      	b.n	8009734 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0ef      	beq.n	80096d6 <SDMMC_GetCmdResp2+0x1e>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1ea      	bne.n	80096d6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2204      	movs	r2, #4
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009712:	2304      	movs	r3, #4
 8009714:	e00e      	b.n	8009734 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009728:	2301      	movs	r3, #1
 800972a:	e003      	b.n	8009734 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	22c5      	movs	r2, #197	; 0xc5
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	20000000 	.word	0x20000000
 8009744:	10624dd3 	.word	0x10624dd3

08009748 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009750:	4b1a      	ldr	r3, [pc, #104]	; (80097bc <SDMMC_GetCmdResp3+0x74>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a1a      	ldr	r2, [pc, #104]	; (80097c0 <SDMMC_GetCmdResp3+0x78>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	0a5b      	lsrs	r3, r3, #9
 800975c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009760:	fb02 f303 	mul.w	r3, r2, r3
 8009764:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	60fa      	str	r2, [r7, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009774:	e01b      	b.n	80097ae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0ef      	beq.n	8009766 <SDMMC_GetCmdResp3+0x1e>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1ea      	bne.n	8009766 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d004      	beq.n	80097a6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2204      	movs	r2, #4
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097a2:	2304      	movs	r3, #4
 80097a4:	e003      	b.n	80097ae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	22c5      	movs	r2, #197	; 0xc5
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000000 	.word	0x20000000
 80097c0:	10624dd3 	.word	0x10624dd3

080097c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	460b      	mov	r3, r1
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097d2:	4b35      	ldr	r3, [pc, #212]	; (80098a8 <SDMMC_GetCmdResp6+0xe4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a35      	ldr	r2, [pc, #212]	; (80098ac <SDMMC_GetCmdResp6+0xe8>)
 80097d8:	fba2 2303 	umull	r2, r3, r2, r3
 80097dc:	0a5b      	lsrs	r3, r3, #9
 80097de:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	1e5a      	subs	r2, r3, #1
 80097ec:	61fa      	str	r2, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097f6:	e052      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0ef      	beq.n	80097e8 <SDMMC_GetCmdResp6+0x24>
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1ea      	bne.n	80097e8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2204      	movs	r2, #4
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009824:	2304      	movs	r3, #4
 8009826:	e03a      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800983a:	2301      	movs	r3, #1
 800983c:	e02f      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fba0 	bl	8008f84 <SDIO_GetCommandResponse>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	4293      	cmp	r3, r2
 800984c:	d001      	beq.n	8009852 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800984e:	2301      	movs	r3, #1
 8009850:	e025      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	22c5      	movs	r2, #197	; 0xc5
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009858:	2100      	movs	r1, #0
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fb9f 	bl	8008f9e <SDIO_GetResponse>
 8009860:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	e011      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009888:	e009      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009898:	e001      	b.n	800989e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800989a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000000 	.word	0x20000000
 80098ac:	10624dd3 	.word	0x10624dd3

080098b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098b8:	4b22      	ldr	r3, [pc, #136]	; (8009944 <SDMMC_GetCmdResp7+0x94>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a22      	ldr	r2, [pc, #136]	; (8009948 <SDMMC_GetCmdResp7+0x98>)
 80098be:	fba2 2303 	umull	r2, r3, r2, r3
 80098c2:	0a5b      	lsrs	r3, r3, #9
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	fb02 f303 	mul.w	r3, r2, r3
 80098cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	60fa      	str	r2, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098dc:	e02c      	b.n	8009938 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0ef      	beq.n	80098ce <SDMMC_GetCmdResp7+0x1e>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1ea      	bne.n	80098ce <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fc:	f003 0304 	and.w	r3, r3, #4
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2204      	movs	r2, #4
 8009908:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800990a:	2304      	movs	r3, #4
 800990c:	e014      	b.n	8009938 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d004      	beq.n	8009924 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009920:	2301      	movs	r3, #1
 8009922:	e009      	b.n	8009938 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2240      	movs	r2, #64	; 0x40
 8009934:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009936:	2300      	movs	r3, #0
  
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20000000 	.word	0x20000000
 8009948:	10624dd3 	.word	0x10624dd3

0800994c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009950:	4904      	ldr	r1, [pc, #16]	; (8009964 <MX_FATFS_Init+0x18>)
 8009952:	4805      	ldr	r0, [pc, #20]	; (8009968 <MX_FATFS_Init+0x1c>)
 8009954:	f000 faa0 	bl	8009e98 <FATFS_LinkDriver>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	4b03      	ldr	r3, [pc, #12]	; (800996c <MX_FATFS_Init+0x20>)
 800995e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009960:	bf00      	nop
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200011e0 	.word	0x200011e0
 8009968:	0800a39c 	.word	0x0800a39c
 800996c:	200011dc 	.word	0x200011dc

08009970 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800997a:	f000 f896 	bl	8009aaa <BSP_SD_IsDetected>
 800997e:	4603      	mov	r3, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d001      	beq.n	8009988 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e012      	b.n	80099ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009988:	480b      	ldr	r0, [pc, #44]	; (80099b8 <BSP_SD_Init+0x48>)
 800998a:	f7fc ff0b 	bl	80067a4 <HAL_SD_Init>
 800998e:	4603      	mov	r3, r0
 8009990:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800999c:	4806      	ldr	r0, [pc, #24]	; (80099b8 <BSP_SD_Init+0x48>)
 800999e:	f7fd fcc1 	bl	8007324 <HAL_SD_ConfigWideBusOperation>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80099ac:	79fb      	ldrb	r3, [r7, #7]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000e94 	.word	0x20000e94

080099bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	68f9      	ldr	r1, [r7, #12]
 80099d2:	4806      	ldr	r0, [pc, #24]	; (80099ec <BSP_SD_ReadBlocks_DMA+0x30>)
 80099d4:	f7fc ff94 	bl	8006900 <HAL_SD_ReadBlocks_DMA>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	20000e94 	.word	0x20000e94

080099f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	4806      	ldr	r0, [pc, #24]	; (8009a20 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009a08:	f7fd f85a 	bl	8006ac0 <HAL_SD_WriteBlocks_DMA>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000e94 	.word	0x20000e94

08009a24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a28:	4805      	ldr	r0, [pc, #20]	; (8009a40 <BSP_SD_GetCardState+0x1c>)
 8009a2a:	f7fd fd15 	bl	8007458 <HAL_SD_GetCardState>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000e94 	.word	0x20000e94

08009a44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	4803      	ldr	r0, [pc, #12]	; (8009a5c <BSP_SD_GetCardInfo+0x18>)
 8009a50:	f7fd fc3c 	bl	80072cc <HAL_SD_GetCardInfo>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000e94 	.word	0x20000e94

08009a60 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009a68:	f000 f818 	bl	8009a9c <BSP_SD_AbortCallback>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009a7c:	f000 f9a8 	bl	8009dd0 <BSP_SD_WriteCpltCallback>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009a90:	f000 f9aa 	bl	8009de8 <BSP_SD_ReadCpltCallback>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0

}
 8009aa0:	bf00      	nop
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009ab4:	f000 f80c 	bl	8009ad0 <BSP_PlatformIsDetected>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	b2db      	uxtb	r3, r3
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009ada:	2104      	movs	r1, #4
 8009adc:	4806      	ldr	r0, [pc, #24]	; (8009af8 <BSP_PlatformIsDetected+0x28>)
 8009ade:	f7fb f967 	bl	8004db0 <HAL_GPIO_ReadPin>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009aec:	79fb      	ldrb	r3, [r7, #7]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	40021800 	.word	0x40021800

08009afc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009b04:	f7f8 fbbe 	bl	8002284 <HAL_GetTick>
 8009b08:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009b0a:	e006      	b.n	8009b1a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b0c:	f7ff ff8a 	bl	8009a24 <BSP_SD_GetCardState>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e009      	b.n	8009b2e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009b1a:	f7f8 fbb3 	bl	8002284 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d8f0      	bhi.n	8009b0c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <SD_CheckStatus+0x38>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009b48:	f7ff ff6c 	bl	8009a24 <BSP_SD_GetCardState>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d107      	bne.n	8009b62 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009b52:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <SD_CheckStatus+0x38>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f023 0301 	bic.w	r3, r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <SD_CheckStatus+0x38>)
 8009b60:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009b62:	4b03      	ldr	r3, [pc, #12]	; (8009b70 <SD_CheckStatus+0x38>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	b2db      	uxtb	r3, r3
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20000009 	.word	0x20000009

08009b74 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009b7e:	f7ff fef7 	bl	8009970 <BSP_SD_Init>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d107      	bne.n	8009b98 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff ffd4 	bl	8009b38 <SD_CheckStatus>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <SD_initialize+0x34>)
 8009b96:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009b98:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <SD_initialize+0x34>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20000009 	.word	0x20000009

08009bac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff ffbd 	bl	8009b38 <SD_CheckStatus>
 8009bbe:	4603      	mov	r3, r0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009bdc:	f247 5030 	movw	r0, #30000	; 0x7530
 8009be0:	f7ff ff8c 	bl	8009afc <SD_CheckStatusWithTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da01      	bge.n	8009bee <SD_read+0x26>
  {
    return res;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	e03b      	b.n	8009c66 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	68b8      	ldr	r0, [r7, #8]
 8009bf4:	f7ff fee2 	bl	80099bc <BSP_SD_ReadBlocks_DMA>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d132      	bne.n	8009c64 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009bfe:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <SD_read+0xa8>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009c04:	f7f8 fb3e 	bl	8002284 <HAL_GetTick>
 8009c08:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009c0a:	bf00      	nop
 8009c0c:	4b18      	ldr	r3, [pc, #96]	; (8009c70 <SD_read+0xa8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <SD_read+0x5e>
 8009c14:	f7f8 fb36 	bl	8002284 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d9f2      	bls.n	8009c0c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009c26:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <SD_read+0xa8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]
 8009c32:	e017      	b.n	8009c64 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <SD_read+0xa8>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009c3a:	f7f8 fb23 	bl	8002284 <HAL_GetTick>
 8009c3e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c40:	e007      	b.n	8009c52 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c42:	f7ff feef 	bl	8009a24 <BSP_SD_GetCardState>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <SD_read+0x8a>
          {
            res = RES_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009c50:	e008      	b.n	8009c64 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c52:	f7f8 fb17 	bl	8002284 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d9ee      	bls.n	8009c42 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000098 	.word	0x20000098

08009c74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	607a      	str	r2, [r7, #4]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009c88:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <SD_write+0xa8>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c8e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c92:	f7ff ff33 	bl	8009afc <SD_CheckStatusWithTimeout>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da01      	bge.n	8009ca0 <SD_write+0x2c>
  {
    return res;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	e038      	b.n	8009d12 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	68b8      	ldr	r0, [r7, #8]
 8009ca6:	f7ff fea3 	bl	80099f0 <BSP_SD_WriteBlocks_DMA>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d12f      	bne.n	8009d10 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009cb0:	f7f8 fae8 	bl	8002284 <HAL_GetTick>
 8009cb4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009cb6:	bf00      	nop
 8009cb8:	4b18      	ldr	r3, [pc, #96]	; (8009d1c <SD_write+0xa8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <SD_write+0x5e>
 8009cc0:	f7f8 fae0 	bl	8002284 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	f247 522f 	movw	r2, #29999	; 0x752f
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d9f2      	bls.n	8009cb8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <SD_write+0xa8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	75fb      	strb	r3, [r7, #23]
 8009cde:	e017      	b.n	8009d10 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <SD_write+0xa8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009ce6:	f7f8 facd 	bl	8002284 <HAL_GetTick>
 8009cea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cec:	e007      	b.n	8009cfe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cee:	f7ff fe99 	bl	8009a24 <BSP_SD_GetCardState>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <SD_write+0x8a>
          {
            res = RES_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8009cfc:	e008      	b.n	8009d10 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cfe:	f7f8 fac1 	bl	8002284 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d9ee      	bls.n	8009cee <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000094 	.word	0x20000094

08009d20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08c      	sub	sp, #48	; 0x30
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	603a      	str	r2, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d36:	4b25      	ldr	r3, [pc, #148]	; (8009dcc <SD_ioctl+0xac>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <SD_ioctl+0x28>
 8009d44:	2303      	movs	r3, #3
 8009d46:	e03c      	b.n	8009dc2 <SD_ioctl+0xa2>

  switch (cmd)
 8009d48:	79bb      	ldrb	r3, [r7, #6]
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d834      	bhi.n	8009db8 <SD_ioctl+0x98>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <SD_ioctl+0x34>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d6d 	.word	0x08009d6d
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d9f 	.word	0x08009d9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d6a:	e028      	b.n	8009dbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fe67 	bl	8009a44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d82:	e01c      	b.n	8009dbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d84:	f107 030c 	add.w	r3, r7, #12
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fe5b 	bl	8009a44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d9c:	e00f      	b.n	8009dbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d9e:	f107 030c 	add.w	r3, r7, #12
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fe4e 	bl	8009a44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	0a5a      	lsrs	r2, r3, #9
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009db6:	e002      	b.n	8009dbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3730      	adds	r7, #48	; 0x30
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000009 	.word	0x20000009

08009dd0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009dd4:	4b03      	ldr	r3, [pc, #12]	; (8009de4 <BSP_SD_WriteCpltCallback+0x14>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
}
 8009dda:	bf00      	nop
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	20000094 	.word	0x20000094

08009de8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009dec:	4b03      	ldr	r3, [pc, #12]	; (8009dfc <BSP_SD_ReadCpltCallback+0x14>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
}
 8009df2:	bf00      	nop
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20000098 	.word	0x20000098

08009e00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e16:	4b1f      	ldr	r3, [pc, #124]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e18:	7a5b      	ldrb	r3, [r3, #9]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d131      	bne.n	8009e84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e20:	4b1c      	ldr	r3, [pc, #112]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e22:	7a5b      	ldrb	r3, [r3, #9]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	4b1a      	ldr	r3, [pc, #104]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e2e:	4b19      	ldr	r3, [pc, #100]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e30:	7a5b      	ldrb	r3, [r3, #9]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	4a17      	ldr	r2, [pc, #92]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e3e:	4b15      	ldr	r3, [pc, #84]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e40:	7a5b      	ldrb	r3, [r3, #9]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b13      	ldr	r3, [pc, #76]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e48:	4413      	add	r3, r2
 8009e4a:	79fa      	ldrb	r2, [r7, #7]
 8009e4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e50:	7a5b      	ldrb	r3, [r3, #9]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	b2d1      	uxtb	r1, r2
 8009e58:	4a0e      	ldr	r2, [pc, #56]	; (8009e94 <FATFS_LinkDriverEx+0x94>)
 8009e5a:	7251      	strb	r1, [r2, #9]
 8009e5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e5e:	7dbb      	ldrb	r3, [r7, #22]
 8009e60:	3330      	adds	r3, #48	; 0x30
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	223a      	movs	r2, #58	; 0x3a
 8009e6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	3302      	adds	r3, #2
 8009e74:	222f      	movs	r2, #47	; 0x2f
 8009e76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	3303      	adds	r3, #3
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	2000009c 	.word	0x2000009c

08009e98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ffaa 	bl	8009e00 <FATFS_LinkDriverEx>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <SysTick_Handler+0x1c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ec0:	f000 f996 	bl	800a1f0 <xTaskGetSchedulerState>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d001      	beq.n	8009ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009eca:	f000 f9fd 	bl	800a2c8 <xPortSysTickHandler>
  }
}
 8009ece:	bf00      	nop
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	e000e010 	.word	0xe000e010

08009ed8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6892      	ldr	r2, [r2, #8]
 8009f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	6852      	ldr	r2, [r2, #4]
 8009f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d103      	bne.n	8009f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	1e5a      	subs	r2, r3, #1
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f7e:	4b4f      	ldr	r3, [pc, #316]	; (800a0bc <xTaskIncrementTick+0x148>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f040 808f 	bne.w	800a0a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f88:	4b4d      	ldr	r3, [pc, #308]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f90:	4a4b      	ldr	r2, [pc, #300]	; (800a0c0 <xTaskIncrementTick+0x14c>)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d120      	bne.n	8009fde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f9c:	4b49      	ldr	r3, [pc, #292]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <xTaskIncrementTick+0x46>
 8009fbc:	4b41      	ldr	r3, [pc, #260]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	4b41      	ldr	r3, [pc, #260]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a3f      	ldr	r2, [pc, #252]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4a3f      	ldr	r2, [pc, #252]	; (800a0c8 <xTaskIncrementTick+0x154>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a3d      	ldr	r2, [pc, #244]	; (800a0cc <xTaskIncrementTick+0x158>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	f000 f8e9 	bl	800a1b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fde:	4b3c      	ldr	r3, [pc, #240]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d349      	bcc.n	800a07c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fe8:	4b36      	ldr	r3, [pc, #216]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	4b37      	ldr	r3, [pc, #220]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff8:	601a      	str	r2, [r3, #0]
					break;
 8009ffa:	e03f      	b.n	800a07c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffc:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <xTaskIncrementTick+0x150>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d203      	bcs.n	800a01c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a014:	4a2e      	ldr	r2, [pc, #184]	; (800a0d0 <xTaskIncrementTick+0x15c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a01a:	e02f      	b.n	800a07c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff ff7d 	bl	8009f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3318      	adds	r3, #24
 800a032:	4618      	mov	r0, r3
 800a034:	f7ff ff74 	bl	8009f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	4b25      	ldr	r3, [pc, #148]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d903      	bls.n	800a04c <xTaskIncrementTick+0xd8>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <xTaskIncrementTick+0x160>)
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a05a:	441a      	add	r2, r3
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7ff ff38 	bl	8009ed8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a072:	429a      	cmp	r2, r3
 800a074:	d3b8      	bcc.n	8009fe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a07a:	e7b5      	b.n	8009fe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a07c:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <xTaskIncrementTick+0x168>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a082:	4915      	ldr	r1, [pc, #84]	; (800a0d8 <xTaskIncrementTick+0x164>)
 800a084:	4613      	mov	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d901      	bls.n	800a098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <xTaskIncrementTick+0x16c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e004      	b.n	800a0b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <xTaskIncrementTick+0x170>)
 800a0ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0b0:	697b      	ldr	r3, [r7, #20]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000530 	.word	0x20000530
 800a0c0:	20000514 	.word	0x20000514
 800a0c4:	2000050c 	.word	0x2000050c
 800a0c8:	20000510 	.word	0x20000510
 800a0cc:	20000528 	.word	0x20000528
 800a0d0:	2000052c 	.word	0x2000052c
 800a0d4:	20000518 	.word	0x20000518
 800a0d8:	200000ac 	.word	0x200000ac
 800a0dc:	200000a8 	.word	0x200000a8
 800a0e0:	20000524 	.word	0x20000524
 800a0e4:	20000520 	.word	0x20000520

0800a0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <vTaskSwitchContext+0xb0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0f6:	4b29      	ldr	r3, [pc, #164]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0fc:	e046      	b.n	800a18c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a0fe:	4b27      	ldr	r3, [pc, #156]	; (800a19c <vTaskSwitchContext+0xb4>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <vTaskSwitchContext+0xb8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e010      	b.n	800a12e <vTaskSwitchContext+0x46>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <vTaskSwitchContext+0x40>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	607b      	str	r3, [r7, #4]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskSwitchContext+0x3e>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	491d      	ldr	r1, [pc, #116]	; (800a1a4 <vTaskSwitchContext+0xbc>)
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0e4      	beq.n	800a10c <vTaskSwitchContext+0x24>
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4a15      	ldr	r2, [pc, #84]	; (800a1a4 <vTaskSwitchContext+0xbc>)
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	605a      	str	r2, [r3, #4]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	3308      	adds	r3, #8
 800a164:	429a      	cmp	r2, r3
 800a166:	d104      	bne.n	800a172 <vTaskSwitchContext+0x8a>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	4a0b      	ldr	r2, [pc, #44]	; (800a1a8 <vTaskSwitchContext+0xc0>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	4a08      	ldr	r2, [pc, #32]	; (800a1a0 <vTaskSwitchContext+0xb8>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <vTaskSwitchContext+0xc0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3358      	adds	r3, #88	; 0x58
 800a188:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <vTaskSwitchContext+0xc4>)
 800a18a:	6013      	str	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	20000530 	.word	0x20000530
 800a19c:	20000524 	.word	0x20000524
 800a1a0:	20000518 	.word	0x20000518
 800a1a4:	200000ac 	.word	0x200000ac
 800a1a8:	200000a8 	.word	0x200000a8
 800a1ac:	2000000c 	.word	0x2000000c

0800a1b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvResetNextTaskUnblockTime+0x38>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <prvResetNextTaskUnblockTime+0x3c>)
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1c8:	e008      	b.n	800a1dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <prvResetNextTaskUnblockTime+0x38>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4a04      	ldr	r2, [pc, #16]	; (800a1ec <prvResetNextTaskUnblockTime+0x3c>)
 800a1da:	6013      	str	r3, [r2, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	2000050c 	.word	0x2000050c
 800a1ec:	2000052c 	.word	0x2000052c

0800a1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <xTaskGetSchedulerState+0x34>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1fe:	2301      	movs	r3, #1
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	e008      	b.n	800a216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a204:	4b08      	ldr	r3, [pc, #32]	; (800a228 <xTaskGetSchedulerState+0x38>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a20c:	2302      	movs	r3, #2
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e001      	b.n	800a216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a216:	687b      	ldr	r3, [r7, #4]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	2000051c 	.word	0x2000051c
 800a228:	20000530 	.word	0x20000530
 800a22c:	00000000 	.word	0x00000000

0800a230 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <pxCurrentTCBConst2>)
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	6808      	ldr	r0, [r1, #0]
 800a236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	f380 8809 	msr	PSP, r0
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f04f 0000 	mov.w	r0, #0
 800a246:	f380 8811 	msr	BASEPRI, r0
 800a24a:	4770      	bx	lr
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst2>:
 800a250:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
	...

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f01e 0f10 	tst.w	lr, #16
 800a270:	bf08      	it	eq
 800a272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	6010      	str	r0, [r2, #0]
 800a27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a284:	f380 8811 	msr	BASEPRI, r0
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f7ff ff2a 	bl	800a0e8 <vTaskSwitchContext>
 800a294:	f04f 0000 	mov.w	r0, #0
 800a298:	f380 8811 	msr	BASEPRI, r0
 800a29c:	bc09      	pop	{r0, r3}
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	6808      	ldr	r0, [r1, #0]
 800a2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a6:	f01e 0f10 	tst.w	lr, #16
 800a2aa:	bf08      	it	eq
 800a2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2b0:	f380 8809 	msr	PSP, r0
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2e2:	f7ff fe47 	bl	8009f74 <xTaskIncrementTick>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <xPortSysTickHandler+0x40>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <__libc_init_array>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4d0d      	ldr	r5, [pc, #52]	; (800a344 <__libc_init_array+0x38>)
 800a310:	4c0d      	ldr	r4, [pc, #52]	; (800a348 <__libc_init_array+0x3c>)
 800a312:	1b64      	subs	r4, r4, r5
 800a314:	10a4      	asrs	r4, r4, #2
 800a316:	2600      	movs	r6, #0
 800a318:	42a6      	cmp	r6, r4
 800a31a:	d109      	bne.n	800a330 <__libc_init_array+0x24>
 800a31c:	4d0b      	ldr	r5, [pc, #44]	; (800a34c <__libc_init_array+0x40>)
 800a31e:	4c0c      	ldr	r4, [pc, #48]	; (800a350 <__libc_init_array+0x44>)
 800a320:	f000 f820 	bl	800a364 <_init>
 800a324:	1b64      	subs	r4, r4, r5
 800a326:	10a4      	asrs	r4, r4, #2
 800a328:	2600      	movs	r6, #0
 800a32a:	42a6      	cmp	r6, r4
 800a32c:	d105      	bne.n	800a33a <__libc_init_array+0x2e>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	f855 3b04 	ldr.w	r3, [r5], #4
 800a334:	4798      	blx	r3
 800a336:	3601      	adds	r6, #1
 800a338:	e7ee      	b.n	800a318 <__libc_init_array+0xc>
 800a33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33e:	4798      	blx	r3
 800a340:	3601      	adds	r6, #1
 800a342:	e7f2      	b.n	800a32a <__libc_init_array+0x1e>
 800a344:	0800a418 	.word	0x0800a418
 800a348:	0800a418 	.word	0x0800a418
 800a34c:	0800a418 	.word	0x0800a418
 800a350:	0800a41c 	.word	0x0800a41c

0800a354 <memset>:
 800a354:	4402      	add	r2, r0
 800a356:	4603      	mov	r3, r0
 800a358:	4293      	cmp	r3, r2
 800a35a:	d100      	bne.n	800a35e <memset+0xa>
 800a35c:	4770      	bx	lr
 800a35e:	f803 1b01 	strb.w	r1, [r3], #1
 800a362:	e7f9      	b.n	800a358 <memset+0x4>

0800a364 <_init>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr

0800a370 <_fini>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr
