
PSA_ConfigQBM_NoTouch_v2_0_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  0800f678  0800f678  0001f678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9b4  0800f9b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9b4  0800f9b4  0001f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9bc  0800f9bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9bc  0800f9bc  0001f9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c0  0800f9c0  0001f9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00009fd4  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00002004  2000a04c  2000a04c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c8cf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f94  00000000  00000000  0005c973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c68  00000000  00000000  00063908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029a8  00000000  00000000  00066570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003362b  00000000  00000000  00068f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000366d5  00000000  00000000  0009c543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012991a  00000000  00000000  000d2c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001fc532  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bf00  00000000  00000000  001fc588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f660 	.word	0x0800f660

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800f660 	.word	0x0800f660

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
uint8_t CANSPI_Initialize(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 800051e:	2300      	movs	r3, #0
 8000520:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000522:	2300      	movs	r3, #0
 8000524:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000532:	2308      	movs	r3, #8
 8000534:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000572:	2308      	movs	r3, #8
 8000574:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800057e:	f002 f8b1 	bl	80026e4 <MCP2515_Initialize>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <CANSPI_Initialize+0x94>
    return 0;
 8000588:	2300      	movs	r3, #0
 800058a:	e058      	b.n	800063e <CANSPI_Initialize+0x146>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800058c:	f002 f8cc 	bl	8002728 <MCP2515_SetConfigMode>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <CANSPI_Initialize+0xa2>
    return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e051      	b.n	800063e <CANSPI_Initialize+0x146>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	461a      	mov	r2, r3
 800059e:	2123      	movs	r1, #35	; 0x23
 80005a0:	2020      	movs	r0, #32
 80005a2:	f002 f965 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005a6:	463b      	mov	r3, r7
 80005a8:	461a      	mov	r2, r3
 80005aa:	2127      	movs	r1, #39	; 0x27
 80005ac:	2024      	movs	r0, #36	; 0x24
 80005ae:	f002 f95f 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	461a      	mov	r2, r3
 80005b8:	2103      	movs	r1, #3
 80005ba:	2000      	movs	r0, #0
 80005bc:	f002 f958 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	461a      	mov	r2, r3
 80005c6:	2107      	movs	r1, #7
 80005c8:	2004      	movs	r0, #4
 80005ca:	f002 f951 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	461a      	mov	r2, r3
 80005d4:	210b      	movs	r1, #11
 80005d6:	2008      	movs	r0, #8
 80005d8:	f002 f94a 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	461a      	mov	r2, r3
 80005e2:	2113      	movs	r1, #19
 80005e4:	2010      	movs	r0, #16
 80005e6:	f002 f943 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	461a      	mov	r2, r3
 80005f0:	2117      	movs	r1, #23
 80005f2:	2014      	movs	r0, #20
 80005f4:	f002 f93c 	bl	8002870 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	461a      	mov	r2, r3
 80005fe:	211b      	movs	r1, #27
 8000600:	2018      	movs	r0, #24
 8000602:	f002 f935 	bl	8002870 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000606:	2104      	movs	r1, #4
 8000608:	2060      	movs	r0, #96	; 0x60
 800060a:	f002 f90d 	bl	8002828 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800060e:	2101      	movs	r1, #1
 8000610:	2070      	movs	r0, #112	; 0x70
 8000612:	f002 f909 	bl	8002828 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, MCP_20MHz_20kBPS_CFG1);
 8000616:	2113      	movs	r1, #19
 8000618:	202a      	movs	r0, #42	; 0x2a
 800061a:	f002 f905 	bl	8002828 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, MCP_20MHz_20kBPS_CFG2);
 800061e:	21bf      	movs	r1, #191	; 0xbf
 8000620:	2029      	movs	r0, #41	; 0x29
 8000622:	f002 f901 	bl	8002828 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, MCP_20MHz_20kBPS_CFG3);
 8000626:	2107      	movs	r1, #7
 8000628:	2028      	movs	r0, #40	; 0x28
 800062a:	f002 f8fd 	bl	8002828 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800062e:	f002 f899 	bl	8002764 <MCP2515_SetNormalMode>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <CANSPI_Initialize+0x144>
    return 0;
 8000638:	2300      	movs	r3, #0
 800063a:	e000      	b.n	800063e <CANSPI_Initialize+0x146>
  
  return 1;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <CANSPI_Transmit+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000660:	4b33      	ldr	r3, [pc, #204]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800066c:	f002 f96e 	bl	800294c <MCP2515_ReadStatus>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <CANSPI_Transmit+0xec>)
 8000676:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <CANSPI_Transmit+0xec>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d115      	bne.n	80006b2 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6858      	ldr	r0, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4a28      	ldr	r2, [pc, #160]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000690:	4619      	mov	r1, r3
 8000692:	f000 f94e 	bl	8000932 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a1a      	ldrb	r2, [r3, #8]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3309      	adds	r3, #9
 800069e:	4924      	ldr	r1, [pc, #144]	; (8000730 <CANSPI_Transmit+0xe8>)
 80006a0:	2040      	movs	r0, #64	; 0x40
 80006a2:	f002 f90f 	bl	80028c4 <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006a6:	2081      	movs	r0, #129	; 0x81
 80006a8:	f002 f936 	bl	8002918 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	e038      	b.n	8000724 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <CANSPI_Transmit+0xec>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d115      	bne.n	80006ec <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6858      	ldr	r0, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <CANSPI_Transmit+0xe8>)
 80006ca:	4619      	mov	r1, r3
 80006cc:	f000 f931 	bl	8000932 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a1a      	ldrb	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3309      	adds	r3, #9
 80006d8:	4915      	ldr	r1, [pc, #84]	; (8000730 <CANSPI_Transmit+0xe8>)
 80006da:	2042      	movs	r0, #66	; 0x42
 80006dc:	f002 f8f2 	bl	80028c4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006e0:	2082      	movs	r0, #130	; 0x82
 80006e2:	f002 f919 	bl	8002918 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	e01b      	b.n	8000724 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <CANSPI_Transmit+0xec>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d114      	bne.n	8000724 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6858      	ldr	r0, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000704:	4619      	mov	r1, r3
 8000706:	f000 f914 	bl	8000932 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a1a      	ldrb	r2, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3309      	adds	r3, #9
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <CANSPI_Transmit+0xe8>)
 8000714:	2044      	movs	r0, #68	; 0x44
 8000716:	f002 f8d5 	bl	80028c4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800071a:	2084      	movs	r0, #132	; 0x84
 800071c:	f002 f8fc 	bl	8002918 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20008e94 	.word	0x20008e94
 8000734:	20008e90 	.word	0x20008e90

08000738 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000744:	f002 f91e 	bl	8002984 <MCP2515_GetRxStatus>
 8000748:	4603      	mov	r3, r0
 800074a:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d066      	beq.n	8000826 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000758:	7b3b      	ldrb	r3, [r7, #12]
 800075a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b40      	cmp	r3, #64	; 0x40
 8000762:	bf0c      	ite	eq
 8000764:	2301      	moveq	r3, #1
 8000766:	2300      	movne	r3, #0
 8000768:	b2da      	uxtb	r2, r3
 800076a:	7b3b      	ldrb	r3, [r7, #12]
 800076c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2bc0      	cmp	r3, #192	; 0xc0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	220d      	movs	r2, #13
 800078a:	4619      	mov	r1, r3
 800078c:	2090      	movs	r0, #144	; 0x90
 800078e:	f002 f829 	bl	80027e4 <MCP2515_ReadRxSequence>
 8000792:	e00c      	b.n	80007ae <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000794:	7b3b      	ldrb	r3, [r7, #12]
 8000796:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b80      	cmp	r3, #128	; 0x80
 800079e:	d106      	bne.n	80007ae <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	220d      	movs	r2, #13
 80007a6:	4619      	mov	r1, r3
 80007a8:	2094      	movs	r0, #148	; 0x94
 80007aa:	f002 f81b 	bl	80027e4 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007ae:	7b3b      	ldrb	r3, [r7, #12]
 80007b0:	f003 0318 	and.w	r3, r3, #24
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b10      	cmp	r3, #16
 80007b8:	d10c      	bne.n	80007d4 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2202      	movs	r2, #2
 80007be:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007c0:	7cb8      	ldrb	r0, [r7, #18]
 80007c2:	7cf9      	ldrb	r1, [r7, #19]
 80007c4:	7c3a      	ldrb	r2, [r7, #16]
 80007c6:	7c7b      	ldrb	r3, [r7, #17]
 80007c8:	f000 f858 	bl	800087c <convertReg2ExtendedCANid>
 80007cc:	4602      	mov	r2, r0
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	e00b      	b.n	80007ec <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007da:	7c3b      	ldrb	r3, [r7, #16]
 80007dc:	7c7a      	ldrb	r2, [r7, #17]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f889 	bl	80008f8 <convertReg2StandardCANid>
 80007e6:	4602      	mov	r2, r0
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80007ec:	7d3a      	ldrb	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80007f2:	7d7a      	ldrb	r2, [r7, #21]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80007f8:	7dba      	ldrb	r2, [r7, #22]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80007fe:	7dfa      	ldrb	r2, [r7, #23]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000804:	7e3a      	ldrb	r2, [r7, #24]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800080a:	7e7a      	ldrb	r2, [r7, #25]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000810:	7eba      	ldrb	r2, [r7, #26]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000816:	7efa      	ldrb	r2, [r7, #27]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800081c:	7f3a      	ldrb	r2, [r7, #28]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000826:	7ffb      	ldrb	r3, [r7, #31]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <CANSPI_messagesInBuffer>:

/* 수신 버퍼에 메시지가 있는지 체크 */
uint8_t CANSPI_messagesInBuffer(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  uint8_t messageCount = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800083a:	f002 f887 	bl	800294c <MCP2515_ReadStatus>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <CANSPI_messagesInBuffer+0x48>)
 8000844:	701a      	strb	r2, [r3, #0]
  
  if(ctrlStatus.RX0IF != 0)
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <CANSPI_messagesInBuffer+0x48>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <CANSPI_messagesInBuffer+0x2a>
  {
    messageCount++;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3301      	adds	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
  }
  
  if(ctrlStatus.RX1IF != 0)
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <CANSPI_messagesInBuffer+0x48>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <CANSPI_messagesInBuffer+0x3e>
  {
    messageCount++;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	3301      	adds	r3, #1
 800086c:	71fb      	strb	r3, [r7, #7]
  }
  
  return (messageCount);
 800086e:	79fb      	ldrb	r3, [r7, #7]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20008e90 	.word	0x20008e90

0800087c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800087c:	b490      	push	{r4, r7}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	4604      	mov	r4, r0
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	4623      	mov	r3, r4
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4603      	mov	r3, r0
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	717b      	strb	r3, [r7, #5]
 8000896:	4613      	mov	r3, r2
 8000898:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008a2:	793b      	ldrb	r3, [r7, #4]
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008aa:	793b      	ldrb	r3, [r7, #4]
 80008ac:	095b      	lsrs	r3, r3, #5
 80008ae:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008b0:	797b      	ldrb	r3, [r7, #5]
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4413      	add	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4413      	add	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4413      	add	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4413      	add	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008ec:	697b      	ldr	r3, [r7, #20]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc90      	pop	{r4, r7}
 80008f6:	4770      	bx	lr

080008f8 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4413      	add	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000932:	b480      	push	{r7}
 8000934:	b087      	sub	sp, #28
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	460b      	mov	r3, r1
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000944:	7afb      	ldrb	r3, [r7, #11]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d12e      	bne.n	80009a8 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 031f 	bic.w	r3, r3, #31
 800097e:	b2da      	uxtb	r2, r3
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	4413      	add	r3, r2
 8000984:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	3308      	adds	r3, #8
 800098a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	f023 0314 	bic.w	r3, r3, #20
 8000992:	b2da      	uxtb	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	0a1b      	lsrs	r3, r3, #8
 800099c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009a6:	e013      	b.n	80009d0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	015b      	lsls	r3, r3, #5
 80009b8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	701a      	strb	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DateTime_Init>:
 * @param hours The number that identifies the hours
 * @param minutes The number that identifies the minutes
 * @param seconds The number that identifies the seconds
 */
void DateTime_Init(uint16_t year, uint8_t month, uint8_t day, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80009dc:	b4f0      	push	{r4, r5, r6, r7}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4603      	mov	r3, r0
 80009f0:	717b      	strb	r3, [r7, #5]
 80009f2:	460b      	mov	r3, r1
 80009f4:	713b      	strb	r3, [r7, #4]
 80009f6:	4613      	mov	r3, r2
 80009f8:	70fb      	strb	r3, [r7, #3]
	today.year = year;
 80009fa:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <DateTime_Init+0x84>)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	8013      	strh	r3, [r2, #0]
	today.month = month;
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <DateTime_Init+0x84>)
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	7093      	strb	r3, [r2, #2]
	today.day = day;
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <DateTime_Init+0x84>)
 8000a08:	793b      	ldrb	r3, [r7, #4]
 8000a0a:	70d3      	strb	r3, [r2, #3]

	today.hours = hours;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <DateTime_Init+0x84>)
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	7113      	strb	r3, [r2, #4]
	today.minutes = minutes;
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <DateTime_Init+0x84>)
 8000a14:	7e3b      	ldrb	r3, [r7, #24]
 8000a16:	7153      	strb	r3, [r2, #5]
	today.seconds = seconds;
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <DateTime_Init+0x84>)
 8000a1a:	7f3b      	ldrb	r3, [r7, #28]
 8000a1c:	7193      	strb	r3, [r2, #6]

	/* Update the datetime today_LastUpdate*/
	memcpy(&today_LastUpdate, &today, sizeof(DateTime));
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <DateTime_Init+0x88>)
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <DateTime_Init+0x84>)
 8000a22:	4610      	mov	r0, r2
 8000a24:	f103 0420 	add.w	r4, r3, #32
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f8d1 c000 	ldr.w	ip, [r1]
 8000a30:	684e      	ldr	r6, [r1, #4]
 8000a32:	688d      	ldr	r5, [r1, #8]
 8000a34:	68c9      	ldr	r1, [r1, #12]
 8000a36:	f8c2 c000 	str.w	ip, [r2]
 8000a3a:	6056      	str	r6, [r2, #4]
 8000a3c:	6095      	str	r5, [r2, #8]
 8000a3e:	60d1      	str	r1, [r2, #12]
 8000a40:	3310      	adds	r3, #16
 8000a42:	3010      	adds	r0, #16
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d1ef      	bne.n	8000a28 <DateTime_Init+0x4c>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	6859      	ldr	r1, [r3, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	6010      	str	r0, [r2, #0]
 8000a52:	6051      	str	r1, [r2, #4]
 8000a54:	6093      	str	r3, [r2, #8]
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20008ec4 	.word	0x20008ec4
 8000a64:	20008e98 	.word	0x20008e98

08000a68 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f003 f81c 	bl	8003ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f902 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fe1e 	bl	80016c4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a88:	f000 fa6e 	bl	8000f68 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000a8c:	f000 fa80 	bl	8000f90 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000a90:	f000 fab0 	bl	8000ff4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000a94:	f000 fdc6 	bl	8001624 <MX_FMC_Init>
  MX_LTDC_Init();
 8000a98:	f000 fc22 	bl	80012e0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a9c:	f000 fc9e 	bl	80013dc <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8000aa0:	f000 fba8 	bl	80011f4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000aa4:	f000 f9b8 	bl	8000e18 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000aa8:	f000 fa0a 	bl	8000ec0 <MX_CAN2_Init>
  MX_SPI2_Init();
 8000aac:	f000 fce2 	bl	8001474 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000ab0:	f000 f95e 	bl	8000d70 <MX_ADC1_Init>
  MX_IWDG_Init();
 8000ab4:	f000 fbfa 	bl	80012ac <MX_IWDG_Init>
  MX_TIM2_Init();
 8000ab8:	f000 fd12 	bl	80014e0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000abc:	f000 fbc8 	bl	8001250 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000ac0:	f000 fd5c 	bl	800157c <MX_USART6_UART_Init>
  MX_SDIO_SD_Init();
 8000ac4:	f000 fcb6 	bl	8001434 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000ac8:	f00b fa54 	bl	800bf74 <MX_FATFS_Init>
  MX_DMA_Init();
 8000acc:	f000 fd82 	bl	80015d4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  PSA.B1_IncomingAirPressure.Value = 710;
 8000ad0:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <main+0x164>)
 8000ad2:	f240 22c6 	movw	r2, #710	; 0x2c6
 8000ad6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  PSA.Mode.Ready = 1;
 8000ada:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <main+0x164>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	771a      	strb	r2, [r3, #28]
  AssignDefaultValue();
 8000ae0:	f000 ff28 	bl	8001934 <AssignDefaultValue>
//  HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
//  while (1) {
//	  HAL_IWDG_Refresh(&hiwdg);
//  }

  HAL_CAN_Start(&hcan2);
 8000ae4:	483e      	ldr	r0, [pc, #248]	; (8000be0 <main+0x168>)
 8000ae6:	f003 fc9b 	bl	8004420 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000aea:	2110      	movs	r1, #16
 8000aec:	483c      	ldr	r0, [pc, #240]	; (8000be0 <main+0x168>)
 8000aee:	f003 fec8 	bl	8004882 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af2:	f00b fd39 	bl	800c568 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemCAN */
  BinarySemCANHandle = osSemaphoreNew(1, 1, &BinarySemCAN_attributes);
 8000af6:	4a3b      	ldr	r2, [pc, #236]	; (8000be4 <main+0x16c>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	2001      	movs	r0, #1
 8000afc:	f00b fe2b 	bl	800c756 <osSemaphoreNew>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <main+0x170>)
 8000b04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b06:	4a39      	ldr	r2, [pc, #228]	; (8000bec <main+0x174>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4839      	ldr	r0, [pc, #228]	; (8000bf0 <main+0x178>)
 8000b0c:	f00b fd76 	bl	800c5fc <osThreadNew>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <main+0x17c>)
 8000b14:	6013      	str	r3, [r2, #0]

  /* creation of StateTask */
  StateTaskHandle = osThreadNew(StartStateTask, NULL, &StateTask_attributes);
 8000b16:	4a38      	ldr	r2, [pc, #224]	; (8000bf8 <main+0x180>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4838      	ldr	r0, [pc, #224]	; (8000bfc <main+0x184>)
 8000b1c:	f00b fd6e 	bl	800c5fc <osThreadNew>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <main+0x188>)
 8000b24:	6013      	str	r3, [r2, #0]

  /* creation of OutTask */
  OutTaskHandle = osThreadNew(StartOutTask, NULL, &OutTask_attributes);
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <main+0x18c>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4837      	ldr	r0, [pc, #220]	; (8000c08 <main+0x190>)
 8000b2c:	f00b fd66 	bl	800c5fc <osThreadNew>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a36      	ldr	r2, [pc, #216]	; (8000c0c <main+0x194>)
 8000b34:	6013      	str	r3, [r2, #0]

  /* creation of ModeTask */
  ModeTaskHandle = osThreadNew(StartModeTask, NULL, &ModeTask_attributes);
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <main+0x198>)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4836      	ldr	r0, [pc, #216]	; (8000c14 <main+0x19c>)
 8000b3c:	f00b fd5e 	bl	800c5fc <osThreadNew>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a35      	ldr	r2, [pc, #212]	; (8000c18 <main+0x1a0>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* creation of TimeTask */
  TimeTaskHandle = osThreadNew(StartTimeTask, NULL, &TimeTask_attributes);
 8000b46:	4a35      	ldr	r2, [pc, #212]	; (8000c1c <main+0x1a4>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4835      	ldr	r0, [pc, #212]	; (8000c20 <main+0x1a8>)
 8000b4c:	f00b fd56 	bl	800c5fc <osThreadNew>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a34      	ldr	r2, [pc, #208]	; (8000c24 <main+0x1ac>)
 8000b54:	6013      	str	r3, [r2, #0]

  /* creation of CAN2TxTask */
  CAN2TxTaskHandle = osThreadNew(StartCAN2TxTask, NULL, &CAN2TxTask_attributes);
 8000b56:	4a34      	ldr	r2, [pc, #208]	; (8000c28 <main+0x1b0>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4834      	ldr	r0, [pc, #208]	; (8000c2c <main+0x1b4>)
 8000b5c:	f00b fd4e 	bl	800c5fc <osThreadNew>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <main+0x1b8>)
 8000b64:	6013      	str	r3, [r2, #0]

  /* creation of ErrorManager */
  ErrorManagerHandle = osThreadNew(StartErrorManager, NULL, &ErrorManager_attributes);
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <main+0x1bc>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4833      	ldr	r0, [pc, #204]	; (8000c38 <main+0x1c0>)
 8000b6c:	f00b fd46 	bl	800c5fc <osThreadNew>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <main+0x1c4>)
 8000b74:	6013      	str	r3, [r2, #0]

  /* creation of SDTask */
  SDTaskHandle = osThreadNew(StartSDTask, NULL, &SDTask_attributes);
 8000b76:	4a32      	ldr	r2, [pc, #200]	; (8000c40 <main+0x1c8>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4832      	ldr	r0, [pc, #200]	; (8000c44 <main+0x1cc>)
 8000b7c:	f00b fd3e 	bl	800c5fc <osThreadNew>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <main+0x1d0>)
 8000b84:	6013      	str	r3, [r2, #0]

  /* creation of CAN1RxTxTask */
  CAN1RxTxTaskHandle = osThreadNew(StartCAN1RxTxTask, NULL, &CAN1RxTxTask_attributes);
 8000b86:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <main+0x1d4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4831      	ldr	r0, [pc, #196]	; (8000c50 <main+0x1d8>)
 8000b8c:	f00b fd36 	bl	800c5fc <osThreadNew>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <main+0x1dc>)
 8000b94:	6013      	str	r3, [r2, #0]

  /* creation of AlarmTask */
  AlarmTaskHandle = osThreadNew(StartAlarmTask, NULL, &AlarmTask_attributes);
 8000b96:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <main+0x1e0>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4830      	ldr	r0, [pc, #192]	; (8000c5c <main+0x1e4>)
 8000b9c:	f00b fd2e 	bl	800c5fc <osThreadNew>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <main+0x1e8>)
 8000ba4:	6013      	str	r3, [r2, #0]

  /* creation of FaultTask */
  FaultTaskHandle = osThreadNew(StartFaultTask, NULL, &FaultTask_attributes);
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <main+0x1ec>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	482f      	ldr	r0, [pc, #188]	; (8000c68 <main+0x1f0>)
 8000bac:	f00b fd26 	bl	800c5fc <osThreadNew>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <main+0x1f4>)
 8000bb4:	6013      	str	r3, [r2, #0]

  /* creation of ValveTask */
  ValveTaskHandle = osThreadNew(StartValveTask, NULL, &ValveTask_attributes);
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <main+0x1f8>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	482e      	ldr	r0, [pc, #184]	; (8000c74 <main+0x1fc>)
 8000bbc:	f00b fd1e 	bl	800c5fc <osThreadNew>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <main+0x200>)
 8000bc4:	6013      	str	r3, [r2, #0]

  /* creation of RequestTask */
  RequestTaskHandle = osThreadNew(StartRequestTask, NULL, &RequestTask_attributes);
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <main+0x204>)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	482d      	ldr	r0, [pc, #180]	; (8000c80 <main+0x208>)
 8000bcc:	f00b fd16 	bl	800c5fc <osThreadNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <main+0x20c>)
 8000bd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bd6:	f00b fceb 	bl	800c5b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <main+0x162>
 8000bdc:	20009a90 	.word	0x20009a90
 8000be0:	200095a4 	.word	0x200095a4
 8000be4:	0800f910 	.word	0x0800f910
 8000be8:	20008fb0 	.word	0x20008fb0
 8000bec:	0800f73c 	.word	0x0800f73c
 8000bf0:	08001a3d 	.word	0x08001a3d
 8000bf4:	20008f50 	.word	0x20008f50
 8000bf8:	0800f760 	.word	0x0800f760
 8000bfc:	08001a5d 	.word	0x08001a5d
 8000c00:	20008fac 	.word	0x20008fac
 8000c04:	0800f784 	.word	0x0800f784
 8000c08:	08001af1 	.word	0x08001af1
 8000c0c:	200094ac 	.word	0x200094ac
 8000c10:	0800f7a8 	.word	0x0800f7a8
 8000c14:	08001dfd 	.word	0x08001dfd
 8000c18:	200091c4 	.word	0x200091c4
 8000c1c:	0800f7cc 	.word	0x0800f7cc
 8000c20:	08001f69 	.word	0x08001f69
 8000c24:	20009a3c 	.word	0x20009a3c
 8000c28:	0800f7f0 	.word	0x0800f7f0
 8000c2c:	08002025 	.word	0x08002025
 8000c30:	20009a34 	.word	0x20009a34
 8000c34:	0800f814 	.word	0x0800f814
 8000c38:	08002161 	.word	0x08002161
 8000c3c:	200095d8 	.word	0x200095d8
 8000c40:	0800f838 	.word	0x0800f838
 8000c44:	080021fd 	.word	0x080021fd
 8000c48:	200095cc 	.word	0x200095cc
 8000c4c:	0800f85c 	.word	0x0800f85c
 8000c50:	0800221d 	.word	0x0800221d
 8000c54:	200098cc 	.word	0x200098cc
 8000c58:	0800f880 	.word	0x0800f880
 8000c5c:	080025c9 	.word	0x080025c9
 8000c60:	20009a38 	.word	0x20009a38
 8000c64:	0800f8a4 	.word	0x0800f8a4
 8000c68:	08002685 	.word	0x08002685
 8000c6c:	20009844 	.word	0x20009844
 8000c70:	0800f8c8 	.word	0x0800f8c8
 8000c74:	08002695 	.word	0x08002695
 8000c78:	200094b0 	.word	0x200094b0
 8000c7c:	0800f8ec 	.word	0x0800f8ec
 8000c80:	080026a5 	.word	0x080026a5
 8000c84:	2000948c 	.word	0x2000948c

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2234      	movs	r2, #52	; 0x34
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00e fc14 	bl	800f4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <SystemClock_Config+0xe0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <SystemClock_Config+0xe0>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <SystemClock_Config+0xe0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <SystemClock_Config+0xe4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <SystemClock_Config+0xe4>)
 8000cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <SystemClock_Config+0xe4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2309      	movs	r3, #9
 8000ce6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d00:	23b4      	movs	r3, #180	; 0xb4
 8000d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f007 f8a7 	bl	8007e68 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d20:	f001 fcda 	bl	80026d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d24:	f006 fb22 	bl	800736c <HAL_PWREx_EnableOverDrive>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d2e:	f001 fcd3 	bl	80026d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2105      	movs	r1, #5
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 fc1d 	bl	8007590 <HAL_RCC_ClockConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d5c:	f001 fcbc 	bl	80026d8 <Error_Handler>
  }
}
 8000d60:	bf00      	nop
 8000d62:	3750      	adds	r7, #80	; 0x50
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40007000 	.word	0x40007000

08000d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <MX_ADC1_Init+0x9c>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <MX_ADC1_Init+0xa0>)
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000dd2:	f002 fed7 	bl	8003b84 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f001 fc7c 	bl	80026d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_ADC1_Init+0xa4>)
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_ADC1_Init+0x98>)
 8000df2:	f002 ff0b 	bl	8003c0c <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dfc:	f001 fc6c 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000955c 	.word	0x2000955c
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	0f000001 	.word	0x0f000001
 8000e14:	10000012 	.word	0x10000012

08000e18 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <MX_CAN1_Init+0xa4>)
 8000e22:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 250;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e26:	22fa      	movs	r2, #250	; 0xfa
 8000e28:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e38:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000e3c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000e6a:	f003 f8fd 	bl	8004068 <HAL_CAN_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e74:	f001 fc30 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN1_Filter = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00e fb20 	bl	800f4c4 <memset>

  CAN1_Filter.FilterActivation = CAN_FILTER_ENABLE;		/* To enable/disable the filter */
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
  CAN1_Filter.FilterBank = 9;							/* You can assign any filterbanks from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank */
 8000e88:	2309      	movs	r3, #9
 8000e8a:	617b      	str	r3, [r7, #20]
  CAN1_Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  CAN1_Filter.FilterIdHigh = 0x0000 << 5;				/* */
 8000e90:	2300      	movs	r3, #0
 8000e92:	603b      	str	r3, [r7, #0]
  CAN1_Filter.FilterIdLow = 0x0000;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  CAN1_Filter.FilterMode = CAN_FILTERMODE_IDMASK;		/* If all the 1 matched with the sended ID. The message will be not filter out */
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  CAN1_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
  CAN1_Filter.SlaveStartFilterBank = 14; 				/* FilterBank from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank*/
 8000ea0:	230e      	movs	r3, #14
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN1_Filter);
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_CAN1_Init+0xa0>)
 8000eaa:	f003 f9d9 	bl	8004260 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200099a4 	.word	0x200099a4
 8000ebc:	40006400 	.word	0x40006400

08000ec0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ec8:	4a26      	ldr	r2, [pc, #152]	; (8000f64 <MX_CAN2_Init+0xa4>)
 8000eca:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 40;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ece:	2228      	movs	r2, #40	; 0x28
 8000ed0:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ee0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000ee4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000f12:	f003 f8a9 	bl	8004068 <HAL_CAN_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f1c:	f001 fbdc 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef CAN2_Filter = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f00e facc 	bl	800f4c4 <memset>
  CAN2_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  CAN2_Filter.FilterBank = 18;
 8000f30:	2312      	movs	r3, #18
 8000f32:	617b      	str	r3, [r7, #20]
  CAN2_Filter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  CAN2_Filter.FilterIdHigh = 0x701 << 5;
 8000f38:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000f3c:	603b      	str	r3, [r7, #0]
  CAN2_Filter.FilterIdLow = 0x0000;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  CAN2_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  CAN2_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
  CAN2_Filter.SlaveStartFilterBank = 14;
 8000f4a:	230e      	movs	r3, #14
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &CAN2_Filter);
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <MX_CAN2_Init+0xa0>)
 8000f54:	f003 f984 	bl	8004260 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200095a4 	.word	0x200095a4
 8000f64:	40006800 	.word	0x40006800

08000f68 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_CRC_Init+0x20>)
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <MX_CRC_Init+0x24>)
 8000f70:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_CRC_Init+0x20>)
 8000f74:	f003 ffbc 	bl	8004ef0 <HAL_CRC_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f7e:	f001 fbab 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20009228 	.word	0x20009228
 8000f8c:	40023000 	.word	0x40023000

08000f90 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <MX_DMA2D_Init+0x60>)
 8000f98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fc6:	f004 fb4d 	bl	8005664 <HAL_DMA2D_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fd0:	f001 fb82 	bl	80026d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_DMA2D_Init+0x5c>)
 8000fd8:	f004 fc9e 	bl	8005918 <HAL_DMA2D_ConfigLayer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000fe2:	f001 fb79 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000991c 	.word	0x2000991c
 8000ff0:	4002b000 	.word	0x4002b000

08000ff4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0aa      	sub	sp, #168	; 0xa8
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800100a:	2224      	movs	r2, #36	; 0x24
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00e fa58 	bl	800f4c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001014:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	2234      	movs	r2, #52	; 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00e fa48 	bl	800f4c4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	222c      	movs	r2, #44	; 0x2c
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00e fa42 	bl	800f4c4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001040:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001042:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <MX_DSIHOST_DSI_Init+0x1fc>)
 8001044:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001046:	4b69      	ldr	r3, [pc, #420]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800104c:	4b67      	ldr	r3, [pc, #412]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 800104e:	2204      	movs	r2, #4
 8001050:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001052:	4b66      	ldr	r3, [pc, #408]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001058:	237d      	movs	r3, #125	; 0x7d
 800105a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800106a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106e:	4619      	mov	r1, r3
 8001070:	485e      	ldr	r0, [pc, #376]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001072:	f004 fce3 	bl	8005a3c <HAL_DSI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800107c:	f001 fb2c 	bl	80026d8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80010b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010b6:	4619      	mov	r1, r3
 80010b8:	484c      	ldr	r0, [pc, #304]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 80010ba:	f005 f96d 	bl	8006398 <HAL_DSI_ConfigHostTimeouts>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80010c4:	f001 fb08 	bl	80026d8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80010c8:	231c      	movs	r3, #28
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80010cc:	2321      	movs	r3, #33	; 0x21
 80010ce:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80010d0:	230f      	movs	r3, #15
 80010d2:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80010d4:	2319      	movs	r3, #25
 80010d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80010e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010e4:	4619      	mov	r1, r3
 80010e6:	4841      	ldr	r0, [pc, #260]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 80010e8:	f005 f8ec 	bl	80062c4 <HAL_DSI_ConfigPhyTimer>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80010f2:	f001 faf1 	bl	80026d8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80010f6:	2104      	movs	r1, #4
 80010f8:	483c      	ldr	r0, [pc, #240]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 80010fa:	f005 f8bb 	bl	8006274 <HAL_DSI_ConfigFlowControl>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001104:	f001 fae8 	bl	80026d8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001108:	f242 7110 	movw	r1, #10000	; 0x2710
 800110c:	4837      	ldr	r0, [pc, #220]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 800110e:	f005 fa09 	bl	8006524 <HAL_DSI_SetLowPowerRXFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001118:	f001 fade 	bl	80026d8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4833      	ldr	r0, [pc, #204]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001120:	f004 fda6 	bl	8005c70 <HAL_DSI_ConfigErrorMonitor>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800112a:	f001 fad5 	bl	80026d8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8001140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8001152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001164:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001168:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800116a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800116e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8001170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8001176:	2302      	movs	r3, #2
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800117a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	481a      	ldr	r0, [pc, #104]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 8001182:	f005 f819 	bl	80061b8 <HAL_DSI_ConfigCommand>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 800118c:	f001 faa4 	bl	80026d8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001198:	23c8      	movs	r3, #200	; 0xc8
 800119a:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800119c:	2310      	movs	r3, #16
 800119e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80011a4:	2304      	movs	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 80011c2:	f004 ff21 	bl	8006008 <HAL_DSI_ConfigAdaptedCommandMode>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80011cc:	f001 fa84 	bl	80026d8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_DSIHOST_DSI_Init+0x1f8>)
 80011d4:	f004 fef0 	bl	8005fb8 <HAL_DSI_SetGenericVCID>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80011de:	f001 fa7b 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	37a8      	adds	r7, #168	; 0xa8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20009490 	.word	0x20009490
 80011f0:	40016c00 	.word	0x40016c00

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f005 fb9d 	bl	8006970 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f001 fa4c 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200091c8 	.word	0x200091c8
 8001248:	40005400 	.word	0x40005400
 800124c:	00061a80 	.word	0x00061a80

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_I2C2_Init+0x58>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C2_Init+0x54>)
 800125c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001260:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C2_Init+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001274:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C2_Init+0x54>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C2_Init+0x54>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_I2C2_Init+0x54>)
 8001290:	f005 fb6e 	bl	8006970 <HAL_I2C_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800129a:	f001 fa1d 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20009438 	.word	0x20009438
 80012a8:	40005800 	.word	0x40005800

080012ac <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <MX_IWDG_Init+0x30>)
 80012b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1999;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012be:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_IWDG_Init+0x2c>)
 80012c6:	f005 fc97 	bl	8006bf8 <HAL_IWDG_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80012d0:	f001 fa02 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000921c 	.word	0x2000921c
 80012dc:	40003000 	.word	0x40003000

080012e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2234      	movs	r2, #52	; 0x34
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00e f8e9 	bl	800f4c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <MX_LTDC_Init+0xf4>)
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <MX_LTDC_Init+0xf8>)
 80012f6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <MX_LTDC_Init+0xf4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001312:	2201      	movs	r2, #1
 8001314:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001318:	2201      	movs	r2, #1
 800131a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800131e:	2202      	movs	r2, #2
 8001320:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001324:	2202      	movs	r2, #2
 8001326:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800132a:	22ca      	movs	r2, #202	; 0xca
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001330:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001338:	22cb      	movs	r2, #203	; 0xcb
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800133e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_LTDC_Init+0xf4>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_LTDC_Init+0xf4>)
 800135e:	f005 fc9d 	bl	8006c9c <HAL_LTDC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001368:	f001 f9b6 	bl	80026d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8001370:	23c8      	movs	r3, #200	; 0xc8
 8001372:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001378:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800137c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001382:	23ff      	movs	r3, #255	; 0xff
 8001384:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001390:	2305      	movs	r3, #5
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001394:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 800139a:	23c8      	movs	r3, #200	; 0xc8
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800139e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_LTDC_Init+0xf4>)
 80013be:	f005 fdff 	bl	8006fc0 <HAL_LTDC_ConfigLayer>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80013c8:	f001 f986 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200094b4 	.word	0x200094b4
 80013d8:	40016800 	.word	0x40016800

080013dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_QUADSPI_Init+0x50>)
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <MX_QUADSPI_Init+0x54>)
 80013e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_QUADSPI_Init+0x50>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_QUADSPI_Init+0x50>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_QUADSPI_Init+0x50>)
 80013f4:	2210      	movs	r2, #16
 80013f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_QUADSPI_Init+0x50>)
 80013fa:	221b      	movs	r2, #27
 80013fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_QUADSPI_Init+0x50>)
 8001400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001404:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_QUADSPI_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_QUADSPI_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_QUADSPI_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_QUADSPI_Init+0x50>)
 800141a:	f005 fff7 	bl	800740c <HAL_QSPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001424:	f001 f958 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20009a40 	.word	0x20009a40
 8001430:	a0001000 	.word	0xa0001000

08001434 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_SDIO_SD_Init+0x38>)
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <MX_SDIO_SD_Init+0x3c>)
 800143c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_SDIO_SD_Init+0x38>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_SDIO_SD_Init+0x38>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_SDIO_SD_Init+0x38>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_SDIO_SD_Init+0x38>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <MX_SDIO_SD_Init+0x38>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <MX_SDIO_SD_Init+0x38>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20009848 	.word	0x20009848
 8001470:	40012c00 	.word	0x40012c00

08001474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SPI2_Init+0x64>)
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <MX_SPI2_Init+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_SPI2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_SPI2_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014a8:	2210      	movs	r2, #16
 80014aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014c0:	220a      	movs	r2, #10
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014c6:	f008 faa0 	bl	8009a0a <HAL_SPI_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014d0:	f001 f902 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20008f54 	.word	0x20008f54
 80014dc:	40003800 	.word	0x40003800

080014e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	463b      	mov	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_TIM2_Init+0x98>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 -1;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_TIM2_Init+0x98>)
 8001506:	f242 3227 	movw	r2, #8999	; 0x2327
 800150a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM2_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_TIM2_Init+0x98>)
 8001514:	f242 7210 	movw	r2, #10000	; 0x2710
 8001518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_TIM2_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_TIM2_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <MX_TIM2_Init+0x98>)
 8001528:	f009 f826 	bl	800a578 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001532:	f001 f8d1 	bl	80026d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_TIM2_Init+0x98>)
 8001544:	f009 f9e0 	bl	800a908 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800154e:	f001 f8c3 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_TIM2_Init+0x98>)
 8001560:	f009 fbfc 	bl	800ad5c <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800156a:	f001 f8b5 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000995c 	.word	0x2000995c

0800157c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_USART6_UART_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_USART6_UART_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART6_UART_Init+0x50>)
 8001588:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800158c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART6_UART_Init+0x50>)
 8001590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001594:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_USART6_UART_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART6_UART_Init+0x50>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART6_UART_Init+0x50>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART6_UART_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART6_UART_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART6_UART_Init+0x50>)
 80015b8:	f009 fc60 	bl	800ae7c <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 80015c2:	f001 f889 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200098d8 	.word	0x200098d8
 80015d0:	40011400 	.word	0x40011400

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_DMA_Init+0x4c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <MX_DMA_Init+0x4c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2105      	movs	r1, #5
 80015fa:	203b      	movs	r0, #59	; 0x3b
 80015fc:	f003 fc4e 	bl	8004e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001600:	203b      	movs	r0, #59	; 0x3b
 8001602:	f003 fc67 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	2045      	movs	r0, #69	; 0x45
 800160c:	f003 fc46 	bl	8004e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001610:	2045      	movs	r0, #69	; 0x45
 8001612:	f003 fc5f 	bl	8004ed4 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
 800163a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_FMC_Init+0x98>)
 800163e:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <MX_FMC_Init+0x9c>)
 8001640:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_FMC_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_FMC_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_FMC_Init+0x98>)
 8001650:	2204      	movs	r2, #4
 8001652:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_FMC_Init+0x98>)
 8001656:	2220      	movs	r2, #32
 8001658:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_FMC_Init+0x98>)
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_FMC_Init+0x98>)
 8001662:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001666:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_FMC_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_FMC_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_FMC_Init+0x98>)
 8001676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_FMC_Init+0x98>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001688:	2307      	movs	r3, #7
 800168a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001690:	2307      	movs	r3, #7
 8001692:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001694:	2303      	movs	r3, #3
 8001696:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800169c:	2302      	movs	r3, #2
 800169e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_FMC_Init+0x98>)
 80016a6:	f008 f97c 	bl	80099a2 <HAL_SDRAM_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016b0:	f001 f812 	bl	80026d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200099e0 	.word	0x200099e0
 80016c0:	a0000140 	.word	0xa0000140

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016de:	4b8f      	ldr	r3, [pc, #572]	; (800191c <MX_GPIO_Init+0x258>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a8e      	ldr	r2, [pc, #568]	; (800191c <MX_GPIO_Init+0x258>)
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b8c      	ldr	r3, [pc, #560]	; (800191c <MX_GPIO_Init+0x258>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <MX_GPIO_Init+0x258>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a87      	ldr	r2, [pc, #540]	; (800191c <MX_GPIO_Init+0x258>)
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b85      	ldr	r3, [pc, #532]	; (800191c <MX_GPIO_Init+0x258>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	4b81      	ldr	r3, [pc, #516]	; (800191c <MX_GPIO_Init+0x258>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a80      	ldr	r2, [pc, #512]	; (800191c <MX_GPIO_Init+0x258>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b7e      	ldr	r3, [pc, #504]	; (800191c <MX_GPIO_Init+0x258>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	623b      	str	r3, [r7, #32]
 800172c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <MX_GPIO_Init+0x258>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a79      	ldr	r2, [pc, #484]	; (800191c <MX_GPIO_Init+0x258>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b77      	ldr	r3, [pc, #476]	; (800191c <MX_GPIO_Init+0x258>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b73      	ldr	r3, [pc, #460]	; (800191c <MX_GPIO_Init+0x258>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a72      	ldr	r2, [pc, #456]	; (800191c <MX_GPIO_Init+0x258>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b70      	ldr	r3, [pc, #448]	; (800191c <MX_GPIO_Init+0x258>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b6c      	ldr	r3, [pc, #432]	; (800191c <MX_GPIO_Init+0x258>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a6b      	ldr	r2, [pc, #428]	; (800191c <MX_GPIO_Init+0x258>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <MX_GPIO_Init+0x258>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <MX_GPIO_Init+0x258>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a64      	ldr	r2, [pc, #400]	; (800191c <MX_GPIO_Init+0x258>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <MX_GPIO_Init+0x258>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <MX_GPIO_Init+0x258>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a5d      	ldr	r2, [pc, #372]	; (800191c <MX_GPIO_Init+0x258>)
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b5b      	ldr	r3, [pc, #364]	; (800191c <MX_GPIO_Init+0x258>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b57      	ldr	r3, [pc, #348]	; (800191c <MX_GPIO_Init+0x258>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <MX_GPIO_Init+0x258>)
 80017c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <MX_GPIO_Init+0x258>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <MX_GPIO_Init+0x258>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a4f      	ldr	r2, [pc, #316]	; (800191c <MX_GPIO_Init+0x258>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <MX_GPIO_Init+0x258>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <MX_GPIO_Init+0x258>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a48      	ldr	r2, [pc, #288]	; (800191c <MX_GPIO_Init+0x258>)
 80017fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <MX_GPIO_Init+0x258>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2108      	movs	r1, #8
 8001812:	4843      	ldr	r0, [pc, #268]	; (8001920 <MX_GPIO_Init+0x25c>)
 8001814:	f005 f878 	bl	8006908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2110      	movs	r1, #16
 800181c:	4841      	ldr	r0, [pc, #260]	; (8001924 <MX_GPIO_Init+0x260>)
 800181e:	f005 f873 	bl	8006908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2110      	movs	r1, #16
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <MX_GPIO_Init+0x264>)
 8001828:	f005 f86e 	bl	8006908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	21c0      	movs	r1, #192	; 0xc0
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <MX_GPIO_Init+0x268>)
 8001832:	f005 f869 	bl	8006908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_blue_Pin */
  GPIO_InitStruct.Pin = LED_blue_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800183a:	2311      	movs	r3, #17
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_blue_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4834      	ldr	r0, [pc, #208]	; (8001920 <MX_GPIO_Init+0x25c>)
 800184e:	f004 fe97 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001852:	2304      	movs	r3, #4
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	4832      	ldr	r0, [pc, #200]	; (8001930 <MX_GPIO_Init+0x26c>)
 8001866:	f004 fe8b 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800186a:	2306      	movs	r3, #6
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	4829      	ldr	r0, [pc, #164]	; (8001924 <MX_GPIO_Init+0x260>)
 800187e:	f004 fe7f 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001882:	2310      	movs	r3, #16
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	4822      	ldr	r0, [pc, #136]	; (8001924 <MX_GPIO_Init+0x260>)
 800189a:	f004 fe71 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189e:	2310      	movs	r3, #16
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	4619      	mov	r1, r3
 80018b4:	481c      	ldr	r0, [pc, #112]	; (8001928 <MX_GPIO_Init+0x264>)
 80018b6:	f004 fe63 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018be:	2311      	movs	r3, #17
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4816      	ldr	r0, [pc, #88]	; (800192c <MX_GPIO_Init+0x268>)
 80018d2:	f004 fe55 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80018d6:	23e0      	movs	r3, #224	; 0xe0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e6:	2305      	movs	r3, #5
 80018e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_GPIO_Init+0x260>)
 80018f2:	f004 fe45 	bl	8006580 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80018f6:	2340      	movs	r3, #64	; 0x40
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_GPIO_Init+0x268>)
 800190e:	f004 fe37 	bl	8006580 <HAL_GPIO_Init>

}
 8001912:	bf00      	nop
 8001914:	3740      	adds	r7, #64	; 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40022800 	.word	0x40022800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020800 	.word	0x40020800
 800192c:	40021c00 	.word	0x40021c00
 8001930:	40021800 	.word	0x40021800

08001934 <AssignDefaultValue>:
	return Value;
}


void AssignDefaultValue()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af02      	add	r7, sp, #8
	State_DebugInit(); /* Inizializza i valori dei timer per il debug */
 800193a:	f001 f8af 	bl	8002a9c <State_DebugInit>

	PSA.B1_IncomingAirPressure.LowerThreshold = 580; 	//SB1L
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001940:	f44f 7211 	mov.w	r2, #580	; 0x244
 8001944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	PSA.B1_IncomingAirPressure.UpperThreshold = 600; 	//SB1H
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <AssignDefaultValue+0xa0>)
 800194a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800194e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	PSA.B3_ProcessTankPressure.LowerThreshold = 600; 	//SB3L
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001954:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	PSA.B3_ProcessTankPressure.UpperThreshold = 650; 	//SB3H
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <AssignDefaultValue+0xa0>)
 800195e:	f240 228a 	movw	r2, #650	; 0x28a
 8001962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	PSA.B2_OutputPressure_1.LowerThreshold = 500; 		//SB2L
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001968:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800196c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	PSA.B2_OutputPressure_1.UpperThreshold = 700; 		//SB2H
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001972:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001976:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	PSA.B4_OutputPressure_2.LowerThreshold = 500; 		//SB4L
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <AssignDefaultValue+0xa0>)
 800197c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	PSA.B4_OutputPressure_2.UpperThreshold = 700; 		//SB4H
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001986:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800198a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	PSA.OUTPriority = 2;								//PR_OUT
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001990:	2202      	movs	r2, #2
 8001992:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	PSA.KE1_OxygenSensor_1.LowerThreshold = 4; 			//SO2-1
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <AssignDefaultValue+0xa0>)
 8001998:	2204      	movs	r2, #4
 800199a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	PSA.Out1.Enable = 1;
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <AssignDefaultValue+0xa0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	PSA.KE2_OxygenSensor_2.LowerThreshold = 2; 			//SO2-2
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <AssignDefaultValue+0xa0>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	PSA.Out2.Enable = 1;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <AssignDefaultValue+0xa0>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
//	PSA.ReceiveValveMessage.Timer = PSA.ReceiveValveMessage.Refresh;
//	PSA.CAN_2.TransmitAliveMessage.Refresh = 10;
//	PSA.CAN_2.TransmitAliveMessage.Timer = PSA.CAN_2.TransmitAliveMessage.Refresh;

	/* DateTime */
	DateTime_Init(2022, 7, 11, 10, 25, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	2319      	movs	r3, #25
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	230a      	movs	r3, #10
 80019c0:	220b      	movs	r2, #11
 80019c2:	2107      	movs	r1, #7
 80019c4:	f240 70e6 	movw	r0, #2022	; 0x7e6
 80019c8:	f7ff f808 	bl	80009dc <DateTime_Init>
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20009a90 	.word	0x20009a90

080019d8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	PSA.CAN_2.State = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	f107 0214 	add.w	r2, r7, #20
 80019e8:	2101      	movs	r1, #1
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f002 fe37 	bl	800465e <HAL_CAN_GetRxMessage>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80019f6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	if(!PSA.CAN_2.State)
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80019fc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d113      	bne.n	8001a2c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
	{
		if((RxHeader.StdId == 0x701) && (RxHeader.DLC == 1))
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f240 7201 	movw	r2, #1793	; 0x701
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10e      	bne.n	8001a2c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10b      	bne.n	8001a2c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		{
			/* Valve are working -> Refresh Valve Timer */
			HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
 8001a14:	2108      	movs	r1, #8
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8001a18:	f004 ff8f 	bl	800693a <HAL_GPIO_TogglePin>
			PSA.Time.ValveAlive_ReceiveMessageTimer = PSA.Time.ValveAlive_SendMessageRefresh;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001a1e:	8a5a      	ldrh	r2, [r3, #18]
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001a22:	829a      	strh	r2, [r3, #20]
			PSA.CAN_2.ReceiveAliveMessage = RxData[0];
 8001a24:	7b3a      	ldrb	r2, [r7, #12]
 8001a26:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001a28:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	; 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20009a90 	.word	0x20009a90
 8001a38:	40022800 	.word	0x40022800

08001a3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	TickType_t StateTaskDelayTimer = xTaskGetTickCount();
 8001a44:	f00c f960 	bl	800dd08 <xTaskGetTickCount>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
		 vTaskDelayUntil(&StateTaskDelayTimer, 1 * deciseconds);
 8001a4c:	2264      	movs	r2, #100	; 0x64
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00b ff89 	bl	800d96c <vTaskDelayUntil>
 8001a5a:	e7f7      	b.n	8001a4c <StartDefaultTask+0x10>

08001a5c <StartStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateTask */
void StartStateTask(void *argument)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateTask */
	/* Main purpose of StateTask is to manage the value of PSA.State. No other tasks can change its value, but they have to ask StateTask to do it for them. */
	TickType_t StateTaskDelayTimer = xTaskGetTickCount();
 8001a64:	f00c f950 	bl	800dd08 <xTaskGetTickCount>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60bb      	str	r3, [r7, #8]
	int NextState = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  if(!PSA.Time.NextStateTimer)
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <StartStateTask+0x90>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10c      	bne.n	8001a92 <StartStateTask+0x36>
	  {
		  PSA.State = NextState;
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <StartStateTask+0x90>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6213      	str	r3, [r2, #32]
		  NextState = State_NextState(PSA.State);
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <StartStateTask+0x90>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 f8c4 	bl	8002c10 <State_NextState>
 8001a88:	60f8      	str	r0, [r7, #12]
		  PSA.CAN_2.TransmitValveMessage = 0xFF;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <StartStateTask+0x90>)
 8001a8c:	22ff      	movs	r2, #255	; 0xff
 8001a8e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	  }

	  /* Check if the mode is changing */
	  if(PSA.Mode.Standby && (PSA.State > 0))
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <StartStateTask+0x90>)
 8001a94:	7f9b      	ldrb	r3, [r3, #30]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00e      	beq.n	8001ab8 <StartStateTask+0x5c>
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <StartStateTask+0x90>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	dd0a      	ble.n	8001ab8 <StartStateTask+0x5c>
	  {/* ModeTask ask to Standby */
		  PSA.State = -2;
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <StartStateTask+0x90>)
 8001aa4:	f06f 0201 	mvn.w	r2, #1
 8001aa8:	621a      	str	r2, [r3, #32]
		  NextState = State_NextState(PSA.State);
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <StartStateTask+0x90>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f8ae 	bl	8002c10 <State_NextState>
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	e010      	b.n	8001ada <StartStateTask+0x7e>
	  }
	  else if(PSA.Mode.Run && (!PSA.State))
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <StartStateTask+0x90>)
 8001aba:	7f5b      	ldrb	r3, [r3, #29]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <StartStateTask+0x7e>
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <StartStateTask+0x90>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d108      	bne.n	8001ada <StartStateTask+0x7e>
	  {/* ModeTask ask to Run */
		  PSA.State = 1;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <StartStateTask+0x90>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	621a      	str	r2, [r3, #32]
		  NextState = State_NextState(PSA.State);
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <StartStateTask+0x90>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 f89c 	bl	8002c10 <State_NextState>
 8001ad8:	60f8      	str	r0, [r7, #12]
	  }

	  vTaskDelayUntil(&StateTaskDelayTimer, 1 * deciseconds);
 8001ada:	2264      	movs	r2, #100	; 0x64
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f00b ff42 	bl	800d96c <vTaskDelayUntil>
	  if(!PSA.Time.NextStateTimer)
 8001ae8:	e7c2      	b.n	8001a70 <StartStateTask+0x14>
 8001aea:	bf00      	nop
 8001aec:	20009a90 	.word	0x20009a90

08001af0 <StartOutTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOutTask */
void StartOutTask(void *argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOutTask */
	/* Main purpose of OutTask is to manage the values of the structures PSA.Out1 and PSA.Out2. No other tasks can change their values, but they have to ask OutTask to do it for them. */
	TickType_t OutTaskDelayTimer = xTaskGetTickCount();
 8001af8:	f00c f906 	bl	800dd08 <xTaskGetTickCount>
 8001afc:	4603      	mov	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]
	  /* Infinite loop */
	  for(;;)
	  {
		  /*** MANAGE COMMAND ***/
		  if(PSA.Command.EnableOut1_DisableOut2)
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <StartOutTask+0x144>)
 8001b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d013      	beq.n	8001b32 <StartOutTask+0x42>
		  {
			  PSA.Out1.Enable = 1;
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <StartOutTask+0x144>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			  PSA.Out2.Enable = 0;
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <StartOutTask+0x144>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			  PSA.Out2.Ready = 0;
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <StartOutTask+0x144>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			  PSA.Out2.Working = 0;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <StartOutTask+0x144>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			  PSA.Command.EnableOut1_DisableOut2 = 0;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <StartOutTask+0x144>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		  }

		  if(PSA.Command.EnableOut2_DisableOut1)
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <StartOutTask+0x144>)
 8001b34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <StartOutTask+0x74>
		  {
			  PSA.Out2.Enable = 1;
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <StartOutTask+0x144>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			  PSA.Out1.Enable = 0;
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <StartOutTask+0x144>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			  PSA.Out1.Ready = 0;
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <StartOutTask+0x144>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			  PSA.Out1.Working = 0;
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <StartOutTask+0x144>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			  PSA.Command.EnableOut2_DisableOut1 = 0;
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <StartOutTask+0x144>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		  }

		  if(PSA.Command.EnableOut1_EnableOut2)
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <StartOutTask+0x144>)
 8001b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <StartOutTask+0x96>
		  {
			  PSA.Out2.Enable = 1;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <StartOutTask+0x144>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			  PSA.Out1.Enable = 1;
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <StartOutTask+0x144>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			  PSA.Command.EnableOut1_EnableOut2 = 0;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <StartOutTask+0x144>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		  }

		  if(PSA.Command.SetPriorityOut1)
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <StartOutTask+0x144>)
 8001b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <StartOutTask+0xa8>
		  {
			  PSA.OUTPriority = 1;
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <StartOutTask+0x144>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		  }

		  if(PSA.Command.SetPriorityOut2)
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <StartOutTask+0x144>)
 8001b9a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <StartOutTask+0xba>
		  {
			  PSA.OUTPriority = 2;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <StartOutTask+0x144>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		  }

//		  if(PSA.Mode.Run)
//		  {
			  /*** STARTING CONDICTION ***/
			  if((PSA.Mode.Run) && ((PSA.Out1.Enable) && (PSA.Out2.Enable)) && ((!PSA.Out1.Ready) && (!PSA.Out2.Ready)))
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <StartOutTask+0x144>)
 8001bac:	7f5b      	ldrb	r3, [r3, #29]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d046      	beq.n	8001c40 <StartOutTask+0x150>
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <StartOutTask+0x144>)
 8001bb4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d041      	beq.n	8001c40 <StartOutTask+0x150>
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <StartOutTask+0x144>)
 8001bbe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03c      	beq.n	8001c40 <StartOutTask+0x150>
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <StartOutTask+0x144>)
 8001bc8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d137      	bne.n	8001c40 <StartOutTask+0x150>
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <StartOutTask+0x144>)
 8001bd2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d132      	bne.n	8001c40 <StartOutTask+0x150>
			  {
				  if((!PSA.KE1_OxygenSensor_1.LowerThreshold) && (!PSA.KE2_OxygenSensor_2.LowerThreshold) && ((PSA.OUTPriority == 1) || (PSA.OUTPriority == 2)))
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <StartOutTask+0x144>)
 8001bdc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11d      	bne.n	8001c20 <StartOutTask+0x130>
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <StartOutTask+0x144>)
 8001be6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d118      	bne.n	8001c20 <StartOutTask+0x130>
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <StartOutTask+0x144>)
 8001bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d004      	beq.n	8001c02 <StartOutTask+0x112>
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <StartOutTask+0x144>)
 8001bfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d10e      	bne.n	8001c20 <StartOutTask+0x130>
				  {/* (SO2-1 != OFF)&&(SO2-2 != OFF) -> OUT_priority */
					  if(PSA.OUTPriority == 1)
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <StartOutTask+0x144>)
 8001c04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d104      	bne.n	8001c16 <StartOutTask+0x126>
					  {
//						  PSA.OUT_1 = 1;
						  PSA.Out1.Ready = 1;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <StartOutTask+0x144>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					  if(PSA.OUTPriority == 1)
 8001c14:	e014      	b.n	8001c40 <StartOutTask+0x150>
					  }
					  else
					  {
//						  PSA.OUT_2 = 1;
						  PSA.Out2.Ready = 1;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <StartOutTask+0x144>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
					  if(PSA.OUTPriority == 1)
 8001c1e:	e00f      	b.n	8001c40 <StartOutTask+0x150>
					  }
				  }
				  else if(!PSA.KE1_OxygenSensor_1.LowerThreshold)
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <StartOutTask+0x144>)
 8001c22:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <StartOutTask+0x148>
				  {/* (SO2-1 != OFF) -> OUT_1 else OUT_2 */
//					  PSA.OUT_1 = 1;
					  PSA.Out1.Ready = 1;
 8001c2a:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <StartOutTask+0x144>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001c32:	e005      	b.n	8001c40 <StartOutTask+0x150>
 8001c34:	20009a90 	.word	0x20009a90
				  }
				  else
				  {
//					  PSA.OUT_2 = 1;
					  PSA.Out2.Ready = 1;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <StartOutTask+0x308>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				  }
			  }

			  if ((PSA.Mode.Run) && ((PSA.Out1.Enable) && (!PSA.Out2.Enable)) && ((!PSA.Out1.Ready) && (!PSA.Out2.Ready)))
 8001c40:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <StartOutTask+0x308>)
 8001c42:	7f5b      	ldrb	r3, [r3, #29]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <StartOutTask+0x188>
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <StartOutTask+0x308>)
 8001c4a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d012      	beq.n	8001c78 <StartOutTask+0x188>
 8001c52:	4b69      	ldr	r3, [pc, #420]	; (8001df8 <StartOutTask+0x308>)
 8001c54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <StartOutTask+0x188>
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <StartOutTask+0x308>)
 8001c5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <StartOutTask+0x188>
 8001c66:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <StartOutTask+0x308>)
 8001c68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <StartOutTask+0x188>
			  {
				  PSA.Out1.Ready = 1;
 8001c70:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <StartOutTask+0x308>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			  }

			  if ((PSA.Mode.Run) && ((!PSA.Out1.Enable) && (PSA.Out2.Enable)) && ((!PSA.Out1.Ready) && (!PSA.Out2.Ready)))
 8001c78:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <StartOutTask+0x308>)
 8001c7a:	7f5b      	ldrb	r3, [r3, #29]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d017      	beq.n	8001cb0 <StartOutTask+0x1c0>
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <StartOutTask+0x308>)
 8001c82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d112      	bne.n	8001cb0 <StartOutTask+0x1c0>
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <StartOutTask+0x308>)
 8001c8c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <StartOutTask+0x1c0>
 8001c94:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <StartOutTask+0x308>)
 8001c96:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <StartOutTask+0x1c0>
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <StartOutTask+0x308>)
 8001ca0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d103      	bne.n	8001cb0 <StartOutTask+0x1c0>
			  {
				  PSA.Out2.Ready = 1;
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <StartOutTask+0x308>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			  }

			  /*** OUT-WORKING CONDICTION ***/
			  if((PSA.Mode.Run) && (PSA.Out1.Ready) && (PSA.KE1_OxygenSensor_1.Value < PSA.KE1_OxygenSensor_1.LowerThreshold))
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <StartOutTask+0x308>)
 8001cb2:	7f5b      	ldrb	r3, [r3, #29]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <StartOutTask+0x1ea>
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <StartOutTask+0x308>)
 8001cba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <StartOutTask+0x1ea>
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <StartOutTask+0x308>)
 8001cc4:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <StartOutTask+0x308>)
 8001cca:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d203      	bcs.n	8001cda <StartOutTask+0x1ea>
			  {
				  PSA.Out1.Working = 1;
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <StartOutTask+0x308>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			  }

			  if((PSA.Mode.Run) && (PSA.Out2.Ready) && (PSA.KE2_OxygenSensor_2.Value < PSA.KE2_OxygenSensor_2.LowerThreshold))
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <StartOutTask+0x308>)
 8001cdc:	7f5b      	ldrb	r3, [r3, #29]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <StartOutTask+0x214>
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <StartOutTask+0x308>)
 8001ce4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <StartOutTask+0x214>
 8001cec:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <StartOutTask+0x308>)
 8001cee:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <StartOutTask+0x308>)
 8001cf4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d203      	bcs.n	8001d04 <StartOutTask+0x214>
			  {/* If KE < SO2-1 -> OUT1 open*/
				  PSA.Out2.Working = 1;
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <StartOutTask+0x308>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			  }

			  /*** OUT-SWAPPING CONDICTION ***/
			  if((PSA.Mode.Run) && (PSA.Out1.Working) && (PSA.B2_OutputPressure_1.Value > PSA.B2_OutputPressure_1.UpperThreshold) && (PSA.KE2_OxygenSensor_2.LowerThreshold && PSA.Out2.Enable && !PSA.Alarm.AL16_HighOut2Pressure))
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <StartOutTask+0x308>)
 8001d06:	7f5b      	ldrb	r3, [r3, #29]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d027      	beq.n	8001d5c <StartOutTask+0x26c>
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <StartOutTask+0x308>)
 8001d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d022      	beq.n	8001d5c <StartOutTask+0x26c>
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <StartOutTask+0x308>)
 8001d18:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <StartOutTask+0x308>)
 8001d1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d91a      	bls.n	8001d5c <StartOutTask+0x26c>
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <StartOutTask+0x308>)
 8001d28:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <StartOutTask+0x26c>
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <StartOutTask+0x308>)
 8001d32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d010      	beq.n	8001d5c <StartOutTask+0x26c>
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <StartOutTask+0x308>)
 8001d3c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10b      	bne.n	8001d5c <StartOutTask+0x26c>
			  {/* (Run + OUT_1 working) + B2 > SB2H + SO2-2!=OFF -> OUT1=OFF + OUT2 = Ready + AL*/
				  PSA.Out1.Ready = 0;
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <StartOutTask+0x308>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				  PSA.Out1.Working = 0;
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <StartOutTask+0x308>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				  PSA.Out2.Ready = 1;
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <StartOutTask+0x308>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			  }

			  if((PSA.Mode.Run) && (PSA.Out2.Working) && (PSA.B4_OutputPressure_2.Value > PSA.B4_OutputPressure_2.UpperThreshold) && (PSA.KE1_OxygenSensor_1.LowerThreshold && PSA.Out1.Enable))
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <StartOutTask+0x308>)
 8001d5e:	7f5b      	ldrb	r3, [r3, #29]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d026      	beq.n	8001db2 <StartOutTask+0x2c2>
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <StartOutTask+0x308>)
 8001d66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d021      	beq.n	8001db2 <StartOutTask+0x2c2>
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <StartOutTask+0x308>)
 8001d70:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <StartOutTask+0x308>)
 8001d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d919      	bls.n	8001db2 <StartOutTask+0x2c2>
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <StartOutTask+0x308>)
 8001d80:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <StartOutTask+0x2c2>
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <StartOutTask+0x308>)
 8001d8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <StartOutTask+0x2c2>
			  {/* (Run + OUT_2 working) + B4 > SB4H + SO2-1=OFF -> OUT1=Ready + OUT2=OFF + AL */
				  PSA.Out1.Ready = 1;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <StartOutTask+0x308>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				  PSA.Out2.Ready = 0;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <StartOutTask+0x308>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				  PSA.Out2.Working = 0;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <StartOutTask+0x308>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				  PSA.Alarm.AL16_HighOut2Pressure = 0xFF;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <StartOutTask+0x308>)
 8001dac:	22ff      	movs	r2, #255	; 0xff
 8001dae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			  }
//	  }

			  if(/*PSA.OUT_1*/(PSA.Mode.Standby) && (PSA.Out1.Ready))
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <StartOutTask+0x308>)
 8001db4:	7f9b      	ldrb	r3, [r3, #30]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <StartOutTask+0x2dc>
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <StartOutTask+0x308>)
 8001dbc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <StartOutTask+0x2dc>
			  {
				  PSA.Out1.Working = 0;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <StartOutTask+0x308>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			  }

			  if((PSA.Mode.Standby) && (PSA.Out2.Ready))
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <StartOutTask+0x308>)
 8001dce:	7f9b      	ldrb	r3, [r3, #30]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <StartOutTask+0x2f6>
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <StartOutTask+0x308>)
 8001dd6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <StartOutTask+0x2f6>
			  {
				  PSA.Out2.Working = 0;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <StartOutTask+0x308>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			  }
//		  }

	    vTaskDelayUntil(&OutTaskDelayTimer, 1 * deciseconds);
 8001de6:	2264      	movs	r2, #100	; 0x64
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00b fdbc 	bl	800d96c <vTaskDelayUntil>
		  if(PSA.Command.EnableOut1_DisableOut2)
 8001df4:	e684      	b.n	8001b00 <StartOutTask+0x10>
 8001df6:	bf00      	nop
 8001df8:	20009a90 	.word	0x20009a90

08001dfc <StartModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModeTask */
void StartModeTask(void *argument)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModeTask */
	TickType_t ModeTaskDelayTimer = xTaskGetTickCount();
 8001e04:	f00b ff80 	bl	800dd08 <xTaskGetTickCount>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  /* Ready + not Run + not Standby -> Run */
	  if((PSA.Mode.Ready && !PSA.Mode.Run && !PSA.Mode.Standby) && ((PSA.B1_IncomingAirPressure.Value > PSA.B1_IncomingAirPressure.UpperThreshold) && ((PSA.KE1_OxygenSensor_1.LowerThreshold && PSA.Out1.Enable)||(PSA.KE2_OxygenSensor_2.LowerThreshold && PSA.Out2.Enable))))
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <StartModeTask+0x168>)
 8001e0e:	7f1b      	ldrb	r3, [r3, #28]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d029      	beq.n	8001e68 <StartModeTask+0x6c>
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <StartModeTask+0x168>)
 8001e16:	7f5b      	ldrb	r3, [r3, #29]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d125      	bne.n	8001e68 <StartModeTask+0x6c>
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <StartModeTask+0x168>)
 8001e1e:	7f9b      	ldrb	r3, [r3, #30]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d121      	bne.n	8001e68 <StartModeTask+0x6c>
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <StartModeTask+0x168>)
 8001e26:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <StartModeTask+0x168>)
 8001e2c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d919      	bls.n	8001e68 <StartModeTask+0x6c>
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <StartModeTask+0x168>)
 8001e36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <StartModeTask+0x4c>
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <StartModeTask+0x168>)
 8001e40:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <StartModeTask+0x60>
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <StartModeTask+0x168>)
 8001e4a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <StartModeTask+0x6c>
 8001e52:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <StartModeTask+0x168>)
 8001e54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <StartModeTask+0x6c>
	  {/* (Ready + NotRun + NotStb) && (B1 > SB1H) && ((SO2-1 != OFF)||(SO2-2 != OFF)): starting condition */
		  PSA.Mode.Run = 0xFF;
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <StartModeTask+0x168>)
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	775a      	strb	r2, [r3, #29]
		  PSA.Mode.Ready = 0xFF;
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <StartModeTask+0x168>)
 8001e64:	22ff      	movs	r2, #255	; 0xff
 8001e66:	771a      	strb	r2, [r3, #28]
	  }

	  /* Run + OUT1 -> Standby */
	  if((PSA.Mode.Run && PSA.Out1.Working) && ((PSA.B2_OutputPressure_1.Value > PSA.B2_OutputPressure_1.UpperThreshold) && (!PSA.KE2_OxygenSensor_2.LowerThreshold || !PSA.Out2.Enable || PSA.Alarm.AL16_HighOut2Pressure)))
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <StartModeTask+0x168>)
 8001e6a:	7f5b      	ldrb	r3, [r3, #29]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d021      	beq.n	8001eb4 <StartModeTask+0xb8>
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <StartModeTask+0x168>)
 8001e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01c      	beq.n	8001eb4 <StartModeTask+0xb8>
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <StartModeTask+0x168>)
 8001e7c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <StartModeTask+0x168>)
 8001e82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d914      	bls.n	8001eb4 <StartModeTask+0xb8>
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <StartModeTask+0x168>)
 8001e8c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <StartModeTask+0xac>
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <StartModeTask+0x168>)
 8001e96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <StartModeTask+0xac>
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <StartModeTask+0x168>)
 8001ea0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <StartModeTask+0xb8>
	  {/* Run + OUT1 + B2 > SB2H -> Standby */
		  PSA.Mode.Run = 0x00;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <StartModeTask+0x168>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	775a      	strb	r2, [r3, #29]
		  PSA.Mode.Standby = 0xFF;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <StartModeTask+0x168>)
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	779a      	strb	r2, [r3, #30]
	  }

	  /* Run + OUT2 -> Standby */
	  if(((PSA.Mode.Run && PSA.Out1.Working)) && ((PSA.B4_OutputPressure_2.Value > PSA.B4_OutputPressure_2.UpperThreshold) && (!PSA.KE1_OxygenSensor_1.LowerThreshold || !PSA.Out1.Enable)))
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <StartModeTask+0x168>)
 8001eb6:	7f5b      	ldrb	r3, [r3, #29]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01c      	beq.n	8001ef6 <StartModeTask+0xfa>
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <StartModeTask+0x168>)
 8001ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d017      	beq.n	8001ef6 <StartModeTask+0xfa>
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <StartModeTask+0x168>)
 8001ec8:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <StartModeTask+0x168>)
 8001ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d90f      	bls.n	8001ef6 <StartModeTask+0xfa>
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <StartModeTask+0x168>)
 8001ed8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <StartModeTask+0xee>
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <StartModeTask+0x168>)
 8001ee2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <StartModeTask+0xfa>
	  {/* Run + OUT2 + B4 > SB4H -> Standby */
		  PSA.Mode.Run = 0x00;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <StartModeTask+0x168>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	775a      	strb	r2, [r3, #29]
		  PSA.Mode.Standby = 0xFF;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <StartModeTask+0x168>)
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	779a      	strb	r2, [r3, #30]
	  }

	  /* Standby + OUT1 -> Run */
	  if((!PSA.State && PSA.Out1.Ready) && (PSA.B2_OutputPressure_1.Value < PSA.B2_OutputPressure_1.LowerThreshold))
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <StartModeTask+0x168>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d112      	bne.n	8001f24 <StartModeTask+0x128>
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <StartModeTask+0x168>)
 8001f00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <StartModeTask+0x128>
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <StartModeTask+0x168>)
 8001f0a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <StartModeTask+0x168>)
 8001f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d205      	bcs.n	8001f24 <StartModeTask+0x128>
	  {/* Standby & B2 < SB2L & No Alarm -> Run*/
		  PSA.Mode.Run = 0xFF;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <StartModeTask+0x168>)
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	775a      	strb	r2, [r3, #29]
		  PSA.Mode.Standby = 0x00;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <StartModeTask+0x168>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	779a      	strb	r2, [r3, #30]
	  }

	  /* Standby + OUT2 -> Run */
	  if((!PSA.State && PSA.Out2.Ready) && (PSA.B4_OutputPressure_2.Value < PSA.B4_OutputPressure_2.LowerThreshold))
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <StartModeTask+0x168>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <StartModeTask+0x156>
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <StartModeTask+0x168>)
 8001f2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <StartModeTask+0x156>
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <StartModeTask+0x168>)
 8001f38:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <StartModeTask+0x168>)
 8001f3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d205      	bcs.n	8001f52 <StartModeTask+0x156>
	  {/* Standby & B2 > SB2L & No Alarm -> Run*/
		  PSA.Mode.Run = 0xFF;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <StartModeTask+0x168>)
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	775a      	strb	r2, [r3, #29]
		  PSA.Mode.Standby = 0x00;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <StartModeTask+0x168>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	779a      	strb	r2, [r3, #30]
	  }

	  vTaskDelayUntil(&ModeTaskDelayTimer, 1 * deciseconds);
 8001f52:	2264      	movs	r2, #100	; 0x64
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00b fd06 	bl	800d96c <vTaskDelayUntil>
	  if((PSA.Mode.Ready && !PSA.Mode.Run && !PSA.Mode.Standby) && ((PSA.B1_IncomingAirPressure.Value > PSA.B1_IncomingAirPressure.UpperThreshold) && ((PSA.KE1_OxygenSensor_1.LowerThreshold && PSA.Out1.Enable)||(PSA.KE2_OxygenSensor_2.LowerThreshold && PSA.Out2.Enable))))
 8001f60:	e754      	b.n	8001e0c <StartModeTask+0x10>
 8001f62:	bf00      	nop
 8001f64:	20009a90 	.word	0x20009a90

08001f68 <StartTimeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeTask */
void StartTimeTask(void *argument)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeTask */
	/* Init Refresher */
	State_DebugInit();
 8001f70:	f000 fd94 	bl	8002a9c <State_DebugInit>
	PSA.Time.ValveAlive_ReceiveMessageRefresh = 100;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <StartTimeTask+0xa8>)
 8001f76:	2264      	movs	r2, #100	; 0x64
 8001f78:	82da      	strh	r2, [r3, #22]
	PSA.Time.ValveAlive_SendMessageRefresh = 10;
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <StartTimeTask+0xa8>)
 8001f7c:	220a      	movs	r2, #10
 8001f7e:	825a      	strh	r2, [r3, #18]
	/* Init Timer */
	PSA.Time.ValveAlive_ReceiveMessageTimer = PSA.Time.ValveAlive_ReceiveMessageRefresh;
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <StartTimeTask+0xa8>)
 8001f82:	8ada      	ldrh	r2, [r3, #22]
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <StartTimeTask+0xa8>)
 8001f86:	829a      	strh	r2, [r3, #20]
	PSA.Time.ValveAlive_SendMessageTimer = PSA.Time.ValveAlive_SendMessageRefresh;
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <StartTimeTask+0xa8>)
 8001f8a:	8a5a      	ldrh	r2, [r3, #18]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <StartTimeTask+0xa8>)
 8001f8e:	821a      	strh	r2, [r3, #16]


  /* Infinite loop */
	TickType_t TaskDelayTimer = xTaskGetTickCount();
 8001f90:	f00b feba 	bl	800dd08 <xTaskGetTickCount>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  /*** TIME COUNTER ***/
	  if(PSA.Out1.Ready)
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <StartTimeTask+0xa8>)
 8001f9a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <StartTimeTask+0x40>
		  TimeCounter_AddDecisecond(&PulldownWorking);
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <StartTimeTask+0xac>)
 8001fa4:	f001 fcd2 	bl	800394c <TimeCounter_AddDecisecond>
	  if(PSA.Out2.Ready)
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <StartTimeTask+0xa8>)
 8001faa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <StartTimeTask+0x50>
		  TimeCounter_AddDecisecond(&MaintenanceWorking);
 8001fb2:	4819      	ldr	r0, [pc, #100]	; (8002018 <StartTimeTask+0xb0>)
 8001fb4:	f001 fcca 	bl	800394c <TimeCounter_AddDecisecond>
	  TimeCounter_AddDecisecond(&TotalWorking);
 8001fb8:	4818      	ldr	r0, [pc, #96]	; (800201c <StartTimeTask+0xb4>)
 8001fba:	f001 fcc7 	bl	800394c <TimeCounter_AddDecisecond>
	  /*** TIMER ***/
	  /* When a timer reach 0, something happens and it refresh */
	  if(PSA.Time.NextStateTimer)
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <StartTimeTask+0xa8>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <StartTimeTask+0x6a>
		  PSA.Time.NextStateTimer--;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <StartTimeTask+0xa8>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <StartTimeTask+0xa8>)
 8001fd0:	801a      	strh	r2, [r3, #0]
	  if(PSA.Time.ValveAlive_ReceiveMessageTimer)
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <StartTimeTask+0xa8>)
 8001fd4:	8a9b      	ldrh	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <StartTimeTask+0x7e>
		  PSA.Time.ValveAlive_ReceiveMessageTimer--;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <StartTimeTask+0xa8>)
 8001fdc:	8a9b      	ldrh	r3, [r3, #20]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <StartTimeTask+0xa8>)
 8001fe4:	829a      	strh	r2, [r3, #20]
	  if(PSA.Time.ValveAlive_SendMessageTimer)
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <StartTimeTask+0xa8>)
 8001fe8:	8a1b      	ldrh	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <StartTimeTask+0x92>
		  PSA.Time.ValveAlive_SendMessageTimer--;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <StartTimeTask+0xa8>)
 8001ff0:	8a1b      	ldrh	r3, [r3, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <StartTimeTask+0xa8>)
 8001ff8:	821a      	strh	r2, [r3, #16]
	  /*** WATCHDOG ***/
	  /* If there's no problem, it refresh before reaching 0 */
	  HAL_IWDG_Refresh(&hiwdg);
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <StartTimeTask+0xb8>)
 8001ffc:	f004 fe3e 	bl	8006c7c <HAL_IWDG_Refresh>
	  vTaskDelayUntil(&TaskDelayTimer, 1 * deciseconds);
 8002000:	2264      	movs	r2, #100	; 0x64
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f00b fcaf 	bl	800d96c <vTaskDelayUntil>
	  if(PSA.Out1.Ready)
 800200e:	e7c3      	b.n	8001f98 <StartTimeTask+0x30>
 8002010:	20009a90 	.word	0x20009a90
 8002014:	200098d0 	.word	0x200098d0
 8002018:	200095d0 	.word	0x200095d0
 800201c:	20008fb4 	.word	0x20008fb4
 8002020:	2000921c 	.word	0x2000921c

08002024 <StartCAN2TxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN2TxTask */
void StartCAN2TxTask(void *argument)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b09a      	sub	sp, #104	; 0x68
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN2TxTask */
	/* TxAliveMxHeader */
	CAN_TxHeaderTypeDef TxAliveMxHeader;
	TxAliveMxHeader.StdId = 0x701;
 800202c:	f240 7301 	movw	r3, #1793	; 0x701
 8002030:	653b      	str	r3, [r7, #80]	; 0x50
	TxAliveMxHeader.ExtId = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
	TxAliveMxHeader.RTR = CAN_RTR_REMOTE;
 8002036:	2302      	movs	r3, #2
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
	TxAliveMxHeader.IDE = CAN_ID_STD;
 800203a:	2300      	movs	r3, #0
 800203c:	65bb      	str	r3, [r7, #88]	; 0x58
	TxAliveMxHeader.DLC = 8;
 800203e:	2308      	movs	r3, #8
 8002040:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t AliveMessage[8] = {0};
 8002042:	2300      	movs	r3, #0
 8002044:	64bb      	str	r3, [r7, #72]	; 0x48
 8002046:	2300      	movs	r3, #0
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* TxValveMxHeader */
	CAN_TxHeaderTypeDef TxValveMxHeader;
	TxValveMxHeader.StdId = 0x201;
 800204a:	f240 2301 	movw	r3, #513	; 0x201
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
	TxValveMxHeader.ExtId = 0x00;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
	TxValveMxHeader.RTR = CAN_RTR_DATA;
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxValveMxHeader.IDE = CAN_ID_STD;
 8002058:	2300      	movs	r3, #0
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38
	TxValveMxHeader.DLC = 8;
 800205c:	2308      	movs	r3, #8
 800205e:	643b      	str	r3, [r7, #64]	; 0x40

	/* TaskManagement */
	uint32_t TxMailbox;
	TickType_t TaskDelayTimer = xTaskGetTickCount();
 8002060:	f00b fe52 	bl	800dd08 <xTaskGetTickCount>
 8002064:	4603      	mov	r3, r0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Init Message */
	CAN_TxHeaderTypeDef TxInitMxHeader;
	TxInitMxHeader.StdId = 0x00;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
	TxInitMxHeader.ExtId = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
	TxInitMxHeader.RTR = CAN_RTR_DATA;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
	TxInitMxHeader.IDE = CAN_ID_STD;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
	TxInitMxHeader.DLC = 2;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
	uint8_t InitMx[2] = {0};
 800207c:	2300      	movs	r3, #0
 800207e:	81bb      	strh	r3, [r7, #12]
	InitMx[0] = 0x01;
 8002080:	2301      	movs	r3, #1
 8002082:	733b      	strb	r3, [r7, #12]
	PSA.CAN_2.State = HAL_CAN_AddTxMessage(&hcan2, &TxInitMxHeader, InitMx, &TxMailbox);
 8002084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002088:	f107 020c 	add.w	r2, r7, #12
 800208c:	f107 0110 	add.w	r1, r7, #16
 8002090:	4830      	ldr	r0, [pc, #192]	; (8002154 <StartCAN2TxTask+0x130>)
 8002092:	f002 fa09 	bl	80044a8 <HAL_CAN_AddTxMessage>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <StartCAN2TxTask+0x134>)
 800209c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

  /* Infinite loop */
  for(;;)
  {

	  if(PSA.CAN_2.State == HAL_OK)
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <StartCAN2TxTask+0x134>)
 80020a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d12c      	bne.n	8002104 <StartCAN2TxTask+0xe0>
	  {
		  if(PSA.CAN_2.TransmitValveMessage)
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <StartCAN2TxTask+0x134>)
 80020ac:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <StartCAN2TxTask+0xb2>
		  {
			  PSA.CAN_2.State = HAL_CAN_AddTxMessage(&hcan2, &TxValveMxHeader, PSA.ValveState, &TxMailbox);
 80020b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <StartCAN2TxTask+0x138>)
 80020be:	4825      	ldr	r0, [pc, #148]	; (8002154 <StartCAN2TxTask+0x130>)
 80020c0:	f002 f9f2 	bl	80044a8 <HAL_CAN_AddTxMessage>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <StartCAN2TxTask+0x134>)
 80020ca:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			  PSA.CAN_2.TransmitValveMessage = 0x00;
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <StartCAN2TxTask+0x134>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		  }
		  if(!PSA.Time.ValveAlive_SendMessageTimer)
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <StartCAN2TxTask+0x134>)
 80020d8:	8a1b      	ldrh	r3, [r3, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d12e      	bne.n	800213c <StartCAN2TxTask+0x118>
		  {
			  PSA.CAN_2.State = HAL_CAN_AddTxMessage(&hcan2, &TxAliveMxHeader, AliveMessage, &TxMailbox);
 80020de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020ea:	481a      	ldr	r0, [pc, #104]	; (8002154 <StartCAN2TxTask+0x130>)
 80020ec:	f002 f9dc 	bl	80044a8 <HAL_CAN_AddTxMessage>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <StartCAN2TxTask+0x134>)
 80020f6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			  PSA.Time.ValveAlive_SendMessageTimer = PSA.Time.ValveAlive_SendMessageRefresh;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <StartCAN2TxTask+0x134>)
 80020fc:	8a5a      	ldrh	r2, [r3, #18]
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <StartCAN2TxTask+0x134>)
 8002100:	821a      	strh	r2, [r3, #16]
 8002102:	e01b      	b.n	800213c <StartCAN2TxTask+0x118>
		  }
	  }
	  else if(PSA.CAN_2.State == HAL_ERROR)
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <StartCAN2TxTask+0x134>)
 8002106:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800210a:	2b01      	cmp	r3, #1
 800210c:	d116      	bne.n	800213c <StartCAN2TxTask+0x118>
	  {
		  PSA.CAN_2.Error = hcan2.ErrorCode;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <StartCAN2TxTask+0x130>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <StartCAN2TxTask+0x134>)
 8002114:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
		  PSA.Alarm.AL01_CANbusError = 0xFF;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <StartCAN2TxTask+0x134>)
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		  PSA.Alarm.State |= 0x0000000000000001U;
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <StartCAN2TxTask+0x134>)
 8002122:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002126:	f04f 0001 	mov.w	r0, #1
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	ea42 0400 	orr.w	r4, r2, r0
 8002132:	ea43 0501 	orr.w	r5, r3, r1
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <StartCAN2TxTask+0x134>)
 8002138:	e9c3 4522 	strd	r4, r5, [r3, #136]	; 0x88
	  }
	  vTaskDelayUntil(&TaskDelayTimer, 5 * centiseconds);
 800213c:	220a      	movs	r2, #10
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f00b fc0e 	bl	800d96c <vTaskDelayUntil>
	  if(PSA.CAN_2.State == HAL_OK)
 8002150:	e7a6      	b.n	80020a0 <StartCAN2TxTask+0x7c>
 8002152:	bf00      	nop
 8002154:	200095a4 	.word	0x200095a4
 8002158:	20009a90 	.word	0x20009a90
 800215c:	20009abe 	.word	0x20009abe

08002160 <StartErrorManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartErrorManager */
void StartErrorManager(void *argument)
{
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartErrorManager */
	TickType_t TaskDelayTimer = xTaskGetTickCount();
 8002168:	f00b fdce 	bl	800dd08 <xTaskGetTickCount>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(PSA.CAN_2.State)
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <StartErrorManager+0x94>)
 8002172:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <StartErrorManager+0x64>
	  {
		  MX_CAN2_Init();
 800217a:	f7fe fea1 	bl	8000ec0 <MX_CAN2_Init>
		  PSA.CAN_2.State = HAL_CAN_Start(&hcan2);
 800217e:	481e      	ldr	r0, [pc, #120]	; (80021f8 <StartErrorManager+0x98>)
 8002180:	f002 f94e 	bl	8004420 <HAL_CAN_Start>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <StartErrorManager+0x94>)
 800218a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 800218e:	2110      	movs	r1, #16
 8002190:	4819      	ldr	r0, [pc, #100]	; (80021f8 <StartErrorManager+0x98>)
 8002192:	f002 fb76 	bl	8004882 <HAL_CAN_ActivateNotification>
		  if(!PSA.CAN_2.State)
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <StartErrorManager+0x94>)
 8002198:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <StartErrorManager+0x64>
		  {
			  PSA.Alarm.AL01_CANbusError = 0x00;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <StartErrorManager+0x94>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			  PSA.Alarm.State &= ~0x0000000000000001U;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <StartErrorManager+0x94>)
 80021aa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80021ae:	f06f 0001 	mvn.w	r0, #1
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	ea02 0400 	and.w	r4, r2, r0
 80021ba:	ea03 0501 	and.w	r5, r3, r1
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <StartErrorManager+0x94>)
 80021c0:	e9c3 4522 	strd	r4, r5, [r3, #136]	; 0x88
		  }
	  }
	  if(!PSA.CANSPI.State)
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <StartErrorManager+0x94>)
 80021c6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <StartErrorManager+0x80>
	  {
		  MX_SPI2_Init();
 80021ce:	f7ff f951 	bl	8001474 <MX_SPI2_Init>
		  PSA.CANSPI.State = CANSPI_Initialize();
 80021d2:	f7fe f991 	bl	80004f8 <CANSPI_Initialize>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <StartErrorManager+0x94>)
 80021dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	  }
	  vTaskDelayUntil(&TaskDelayTimer, 1 * seconds);
 80021e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00b fbbe 	bl	800d96c <vTaskDelayUntil>
	  if(PSA.CAN_2.State)
 80021f0:	e7be      	b.n	8002170 <StartErrorManager+0x10>
 80021f2:	bf00      	nop
 80021f4:	20009a90 	.word	0x20009a90
 80021f8:	200095a4 	.word	0x200095a4

080021fc <StartSDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDTask */
void StartSDTask(void *argument)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDTask */
	TickType_t TaskDelayTimer = xTaskGetTickCount();
 8002204:	f00b fd80 	bl	800dd08 <xTaskGetTickCount>
 8002208:	4603      	mov	r3, r0
 800220a:	60fb      	str	r3, [r7, #12]
	  /* If the Red LED toggle we are writing */
//	  if(byteswritten){
//		  HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
//	  }

	  vTaskDelayUntil(&TaskDelayTimer, 1 * deciseconds);
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f00b fba9 	bl	800d96c <vTaskDelayUntil>
 800221a:	e7f7      	b.n	800220c <StartSDTask+0x10>

0800221c <StartCAN1RxTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCAN1RxTxTask */
void StartCAN1RxTxTask(void *argument)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN1RxTxTask */
		PSA.CANSPI.State = CANSPI_Initialize();
 8002224:	f7fe f968 	bl	80004f8 <CANSPI_Initialize>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	4bb3      	ldr	r3, [pc, #716]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 800222e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4


	  /* Infinite loop */
	  for(;;)
	  {
		  if(CANSPI_messagesInBuffer() && PSA.CANSPI.State)
 8002232:	f7fe fafd 	bl	8000830 <CANSPI_messagesInBuffer>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 81b3 	beq.w	80025a4 <StartCAN1RxTxTask+0x388>
 800223e:	4baf      	ldr	r3, [pc, #700]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002240:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 81ad 	beq.w	80025a4 <StartCAN1RxTxTask+0x388>
		  {
			  PSA.CANSPI.State = CANSPI_Receive(&rxMessage);
 800224a:	48ad      	ldr	r0, [pc, #692]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800224c:	f7fe fa74 	bl	8000738 <CANSPI_Receive>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4ba9      	ldr	r3, [pc, #676]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002256:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			  if((((rxMessage.frame.data4 << 16) | (rxMessage.frame.data5 << 8) | (rxMessage.frame.data6)) == 0x10000) && (rxMessage.frame.id == (0x600 + PSA.CANSPI.Ide)))
 800225a:	4ba9      	ldr	r3, [pc, #676]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800225c:	7b5b      	ldrb	r3, [r3, #13]
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	4ba7      	ldr	r3, [pc, #668]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002262:	7b9b      	ldrb	r3, [r3, #14]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	4313      	orrs	r3, r2
 8002268:	4aa5      	ldr	r2, [pc, #660]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800226a:	7bd2      	ldrb	r2, [r2, #15]
 800226c:	4313      	orrs	r3, r2
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	f040 8197 	bne.w	80025a4 <StartCAN1RxTxTask+0x388>
 8002276:	4ba2      	ldr	r3, [pc, #648]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4ba0      	ldr	r3, [pc, #640]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 800227c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002280:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002284:	429a      	cmp	r2, r3
 8002286:	f040 818d 	bne.w	80025a4 <StartCAN1RxTxTask+0x388>
			  {
				  rxMessage.frame.id -= 0x80;
 800228a:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	3b80      	subs	r3, #128	; 0x80
 8002290:	4a9b      	ldr	r2, [pc, #620]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002292:	6053      	str	r3, [r2, #4]

				  switch((rxMessage.frame.data0 << 16) | (rxMessage.frame.data1 << 8) | (rxMessage.frame.data2))
 8002294:	4b9a      	ldr	r3, [pc, #616]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002296:	7a5b      	ldrb	r3, [r3, #9]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	4b99      	ldr	r3, [pc, #612]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800229c:	7a9b      	ldrb	r3, [r3, #10]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	4313      	orrs	r3, r2
 80022a2:	4a97      	ldr	r2, [pc, #604]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80022a4:	7ad2      	ldrb	r2, [r2, #11]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	4a96      	ldr	r2, [pc, #600]	; (8002504 <StartCAN1RxTxTask+0x2e8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f300 816d 	bgt.w	800258a <StartCAN1RxTxTask+0x36e>
 80022b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b4:	dc06      	bgt.n	80022c4 <StartCAN1RxTxTask+0xa8>
 80022b6:	4a94      	ldr	r2, [pc, #592]	; (8002508 <StartCAN1RxTxTask+0x2ec>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05d      	beq.n	8002378 <StartCAN1RxTxTask+0x15c>
 80022bc:	4a93      	ldr	r2, [pc, #588]	; (800250c <StartCAN1RxTxTask+0x2f0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d076      	beq.n	80023b0 <StartCAN1RxTxTask+0x194>
	//			  case 0x400012:
	////				  PSA.Request.State |= (1U << 18);
	//				  break;
	//
				  default:
					  break;
 80022c2:	e162      	b.n	800258a <StartCAN1RxTxTask+0x36e>
 80022c4:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 80022c8:	3b01      	subs	r3, #1
 80022ca:	2b27      	cmp	r3, #39	; 0x27
 80022cc:	f200 815d 	bhi.w	800258a <StartCAN1RxTxTask+0x36e>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <StartCAN1RxTxTask+0xbc>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080024b1 	.word	0x080024b1
 80022dc:	080023fd 	.word	0x080023fd
 80022e0:	08002421 	.word	0x08002421
 80022e4:	08002445 	.word	0x08002445
 80022e8:	08002469 	.word	0x08002469
 80022ec:	0800248d 	.word	0x0800248d
 80022f0:	0800258b 	.word	0x0800258b
 80022f4:	0800258b 	.word	0x0800258b
 80022f8:	0800258b 	.word	0x0800258b
 80022fc:	080023d7 	.word	0x080023d7
 8002300:	08002519 	.word	0x08002519
 8002304:	0800253f 	.word	0x0800253f
 8002308:	0800258b 	.word	0x0800258b
 800230c:	0800258b 	.word	0x0800258b
 8002310:	0800258b 	.word	0x0800258b
 8002314:	0800258b 	.word	0x0800258b
 8002318:	0800258b 	.word	0x0800258b
 800231c:	0800258b 	.word	0x0800258b
 8002320:	0800258b 	.word	0x0800258b
 8002324:	0800258b 	.word	0x0800258b
 8002328:	0800258b 	.word	0x0800258b
 800232c:	0800258b 	.word	0x0800258b
 8002330:	0800258b 	.word	0x0800258b
 8002334:	0800258b 	.word	0x0800258b
 8002338:	0800258b 	.word	0x0800258b
 800233c:	0800258b 	.word	0x0800258b
 8002340:	0800258b 	.word	0x0800258b
 8002344:	0800258b 	.word	0x0800258b
 8002348:	080024d7 	.word	0x080024d7
 800234c:	0800258b 	.word	0x0800258b
 8002350:	0800258b 	.word	0x0800258b
 8002354:	0800258b 	.word	0x0800258b
 8002358:	0800258b 	.word	0x0800258b
 800235c:	0800258b 	.word	0x0800258b
 8002360:	0800258b 	.word	0x0800258b
 8002364:	0800258b 	.word	0x0800258b
 8002368:	0800258b 	.word	0x0800258b
 800236c:	0800258b 	.word	0x0800258b
 8002370:	0800258b 	.word	0x0800258b
 8002374:	08002565 	.word	0x08002565
					  if(rxMessage.frame.data7 == 0x02)
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800237a:	7c1b      	ldrb	r3, [r3, #16]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d104      	bne.n	800238a <StartCAN1RxTxTask+0x16e>
						  PSA.Command.EnableOut1_EnableOut2 = 1;
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					  break;
 8002388:	e101      	b.n	800258e <StartCAN1RxTxTask+0x372>
					  else if(rxMessage.frame.data7 == 0x01)
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800238c:	7c1b      	ldrb	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d104      	bne.n	800239c <StartCAN1RxTxTask+0x180>
						  PSA.Command.EnableOut2_DisableOut1 = 1;
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
					  break;
 800239a:	e0f8      	b.n	800258e <StartCAN1RxTxTask+0x372>
					  else if(rxMessage.frame.data7 == 0x00)
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800239e:	7c1b      	ldrb	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 80f4 	bne.w	800258e <StartCAN1RxTxTask+0x372>
						  PSA.Command.EnableOut1_DisableOut2 = 1;
 80023a6:	4b55      	ldr	r3, [pc, #340]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					  break;
 80023ae:	e0ee      	b.n	800258e <StartCAN1RxTxTask+0x372>
					  if(rxMessage.frame.data7 == 0x00)
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023b2:	7c1b      	ldrb	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <StartCAN1RxTxTask+0x1a6>
						  PSA.Command.SetPriorityOut1 = 1;
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
					  break;
 80023c0:	e0e7      	b.n	8002592 <StartCAN1RxTxTask+0x376>
					  else if(rxMessage.frame.data7 == 0x01)
 80023c2:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023c4:	7c1b      	ldrb	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	f040 80e3 	bne.w	8002592 <StartCAN1RxTxTask+0x376>
						  PSA.Command.SetPriorityOut2 = 1;
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
					  break;
 80023d4:	e0dd      	b.n	8002592 <StartCAN1RxTxTask+0x376>
					  rxMessage.frame.data0 = 0x4B;
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023d8:	224b      	movs	r2, #75	; 0x4b
 80023da:	725a      	strb	r2, [r3, #9]
					  uint16_t Oxygen_LastValue = MyQueue_GetLastValue(&Oxygen);
 80023dc:	484c      	ldr	r0, [pc, #304]	; (8002510 <StartCAN1RxTxTask+0x2f4>)
 80023de:	f000 fb44 	bl	8002a6a <MyQueue_GetLastValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	82fb      	strh	r3, [r7, #22]
					  rxMessage.frame.data4 = Oxygen_LastValue >> 8;
 80023e6:	8afb      	ldrh	r3, [r7, #22]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023f0:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = Oxygen_LastValue;
 80023f2:	8afb      	ldrh	r3, [r7, #22]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023f8:	739a      	strb	r2, [r3, #14]
					  break;
 80023fa:	e0cb      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80023fe:	224b      	movs	r2, #75	; 0x4b
 8002400:	725a      	strb	r2, [r3, #9]
					  uint16_t Dewpoint = PSA.DP_IncomingAirDewpoint.Value;
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002404:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002408:	82bb      	strh	r3, [r7, #20]
					  rxMessage.frame.data4 = Dewpoint >> 8;
 800240a:	8abb      	ldrh	r3, [r7, #20]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002414:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = Dewpoint;
 8002416:	8abb      	ldrh	r3, [r7, #20]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800241c:	739a      	strb	r2, [r3, #14]
					  break;
 800241e:	e0b9      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 8002420:	4b37      	ldr	r3, [pc, #220]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002422:	224b      	movs	r2, #75	; 0x4b
 8002424:	725a      	strb	r2, [r3, #9]
					  rxMessage.frame.data4 = PSA.B1_IncomingAirPressure.Value >> 8;
 8002426:	4b35      	ldr	r3, [pc, #212]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002428:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002434:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = PSA.B1_IncomingAirPressure.Value;
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002438:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002440:	739a      	strb	r2, [r3, #14]
					  break;
 8002442:	e0a7      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002446:	224b      	movs	r2, #75	; 0x4b
 8002448:	725a      	strb	r2, [r3, #9]
					  rxMessage.frame.data4 = PSA.B2_OutputPressure_1.Value >> 8;
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 800244c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002458:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = PSA.B2_OutputPressure_1.Value;
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 800245c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b27      	ldr	r3, [pc, #156]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002464:	739a      	strb	r2, [r3, #14]
					  break;
 8002466:	e095      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800246a:	224b      	movs	r2, #75	; 0x4b
 800246c:	725a      	strb	r2, [r3, #9]
					  rxMessage.frame.data4 = PSA.B3_ProcessTankPressure.Value >> 8;
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002470:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29b      	uxth	r3, r3
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800247c:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = PSA.B3_ProcessTankPressure.Value;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 8002488:	739a      	strb	r2, [r3, #14]
					  break;
 800248a:	e083      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 800248e:	224b      	movs	r2, #75	; 0x4b
 8002490:	725a      	strb	r2, [r3, #9]
					  rxMessage.frame.data4 = PSA.B4_OutputPressure_2.Value >> 8;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 8002494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	b29b      	uxth	r3, r3
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024a0:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = PSA.B4_OutputPressure_2.Value;
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <StartCAN1RxTxTask+0x2e0>)
 80024a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024ac:	739a      	strb	r2, [r3, #14]
					  break;
 80024ae:	e071      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024b2:	224b      	movs	r2, #75	; 0x4b
 80024b4:	725a      	strb	r2, [r3, #9]
					  uint16_t AirFlux_LastValue = MyQueue_GetLastValue(&AirFlux);
 80024b6:	4817      	ldr	r0, [pc, #92]	; (8002514 <StartCAN1RxTxTask+0x2f8>)
 80024b8:	f000 fad7 	bl	8002a6a <MyQueue_GetLastValue>
 80024bc:	4603      	mov	r3, r0
 80024be:	827b      	strh	r3, [r7, #18]
					  rxMessage.frame.data4 = AirFlux_LastValue >> 8;
 80024c0:	8a7b      	ldrh	r3, [r7, #18]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024ca:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = AirFlux_LastValue;
 80024cc:	8a7b      	ldrh	r3, [r7, #18]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024d2:	739a      	strb	r2, [r3, #14]
					  break;
 80024d4:	e05e      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024d8:	224b      	movs	r2, #75	; 0x4b
 80024da:	725a      	strb	r2, [r3, #9]
					  uint16_t AirFlux_AverageValue = MyQueue_GetAverageValue(&AirFlux);
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <StartCAN1RxTxTask+0x2f8>)
 80024de:	f000 fab7 	bl	8002a50 <MyQueue_GetAverageValue>
 80024e2:	4603      	mov	r3, r0
 80024e4:	83bb      	strh	r3, [r7, #28]
					  rxMessage.frame.data4 = AirFlux_AverageValue >> 8;
 80024e6:	8bbb      	ldrh	r3, [r7, #28]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024f0:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = AirFlux_AverageValue;
 80024f2:	8bbb      	ldrh	r3, [r7, #28]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b02      	ldr	r3, [pc, #8]	; (8002500 <StartCAN1RxTxTask+0x2e4>)
 80024f8:	739a      	strb	r2, [r3, #14]
					  break;
 80024fa:	e04b      	b.n	8002594 <StartCAN1RxTxTask+0x378>
 80024fc:	20009a90 	.word	0x20009a90
 8002500:	200099cc 	.word	0x200099cc
 8002504:	00400028 	.word	0x00400028
 8002508:	0023006e 	.word	0x0023006e
 800250c:	0023006f 	.word	0x0023006f
 8002510:	20009230 	.word	0x20009230
 8002514:	200095dc 	.word	0x200095dc
					  rxMessage.frame.data0 = 0x4B;
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 800251a:	224b      	movs	r2, #75	; 0x4b
 800251c:	725a      	strb	r2, [r3, #9]
					  uint16_t PulldownWorking_TotalHours = TimeCounter_GetTotalHours(&PulldownWorking);
 800251e:	4826      	ldr	r0, [pc, #152]	; (80025b8 <StartCAN1RxTxTask+0x39c>)
 8002520:	f001 fa8a 	bl	8003a38 <TimeCounter_GetTotalHours>
 8002524:	4603      	mov	r3, r0
 8002526:	833b      	strh	r3, [r7, #24]
					  rxMessage.frame.data4 = PulldownWorking_TotalHours >> 8;
 8002528:	8b3b      	ldrh	r3, [r7, #24]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29b      	uxth	r3, r3
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002532:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = PulldownWorking_TotalHours;
 8002534:	8b3b      	ldrh	r3, [r7, #24]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 800253a:	739a      	strb	r2, [r3, #14]
					  break;
 800253c:	e02a      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002540:	224b      	movs	r2, #75	; 0x4b
 8002542:	725a      	strb	r2, [r3, #9]
					  uint16_t MaintenanceWorking_TotalHours = TimeCounter_GetTotalHours(&MaintenanceWorking);
 8002544:	481d      	ldr	r0, [pc, #116]	; (80025bc <StartCAN1RxTxTask+0x3a0>)
 8002546:	f001 fa77 	bl	8003a38 <TimeCounter_GetTotalHours>
 800254a:	4603      	mov	r3, r0
 800254c:	837b      	strh	r3, [r7, #26]
					  rxMessage.frame.data4 = MaintenanceWorking_TotalHours >> 8;
 800254e:	8b7b      	ldrh	r3, [r7, #26]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002558:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = MaintenanceWorking_TotalHours;
 800255a:	8b7b      	ldrh	r3, [r7, #26]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002560:	739a      	strb	r2, [r3, #14]
					  break;
 8002562:	e017      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  rxMessage.frame.data0 = 0x4B;
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002566:	224b      	movs	r2, #75	; 0x4b
 8002568:	725a      	strb	r2, [r3, #9]
					  uint16_t TotalWorking_TotalHours = TimeCounter_GetTotalHours(&TotalWorking);
 800256a:	4815      	ldr	r0, [pc, #84]	; (80025c0 <StartCAN1RxTxTask+0x3a4>)
 800256c:	f001 fa64 	bl	8003a38 <TimeCounter_GetTotalHours>
 8002570:	4603      	mov	r3, r0
 8002572:	83fb      	strh	r3, [r7, #30]
					  rxMessage.frame.data4 = TotalWorking_TotalHours >> 8;
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 800257e:	735a      	strb	r2, [r3, #13]
					  rxMessage.frame.data5 = TotalWorking_TotalHours;
 8002580:	8bfb      	ldrh	r3, [r7, #30]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002586:	739a      	strb	r2, [r3, #14]
					  break;
 8002588:	e004      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <StartCAN1RxTxTask+0x378>
					  break;
 8002592:	bf00      	nop
				  }
				  PSA.CANSPI.State = CANSPI_Transmit(&rxMessage);
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <StartCAN1RxTxTask+0x398>)
 8002596:	f7fe f857 	bl	8000648 <CANSPI_Transmit>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <StartCAN1RxTxTask+0x3a8>)
 80025a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			  }
		  }
		  vTaskDelayUntil(&TaskDelayTimer, 1 * centiseconds);
 80025a4:	220a      	movs	r2, #10
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00b f9dd 	bl	800d96c <vTaskDelayUntil>
		  if(CANSPI_messagesInBuffer() && PSA.CANSPI.State)
 80025b2:	e63e      	b.n	8002232 <StartCAN1RxTxTask+0x16>
 80025b4:	200099cc 	.word	0x200099cc
 80025b8:	200098d0 	.word	0x200098d0
 80025bc:	200095d0 	.word	0x200095d0
 80025c0:	20008fb4 	.word	0x20008fb4
 80025c4:	20009a90 	.word	0x20009a90

080025c8 <StartAlarmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmTask */
void StartAlarmTask(void *argument)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlarmTask */
  /* Infinite loop */
  TickType_t StateTaskDelayTimer = xTaskGetTickCount();
 80025d0:	f00b fb9a 	bl	800dd08 <xTaskGetTickCount>
 80025d4:	4603      	mov	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	  if((PSA.B1_IncomingAirPressure.Value < PSA.B1_IncomingAirPressure.LowerThreshold) && (!PSA.Time.LowAirPressureTimer))
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <StartAlarmTask+0xb8>)
 80025da:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <StartAlarmTask+0xb8>)
 80025e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d208      	bcs.n	80025fa <StartAlarmTask+0x32>
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <StartAlarmTask+0xb8>)
 80025ea:	8b1b      	ldrh	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <StartAlarmTask+0x32>
	  {/* (B1 < SB1L) */
		  PSA.Alarm.AL02_LowAirPressure = PSA_ALARM_ON;
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <StartAlarmTask+0xb8>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80025f8:	e007      	b.n	800260a <StartAlarmTask+0x42>
	  }
	  else if((1))
	  {/* (B1 > SB1H)  */
		  PSA.Alarm.AL02_LowAirPressure = PSA_ALARM_OFF;
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <StartAlarmTask+0xb8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		  PSA.Time.LowAirPressureTimer = PSA.Time.LowAirPressureRefresh;
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <StartAlarmTask+0xb8>)
 8002604:	8b5a      	ldrh	r2, [r3, #26]
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <StartAlarmTask+0xb8>)
 8002608:	831a      	strh	r2, [r3, #24]
	  }

	  if((PSA.B3_ProcessTankPressure.Value < PSA.B3_ProcessTankPressure.LowerThreshold))
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <StartAlarmTask+0xb8>)
 800260c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <StartAlarmTask+0xb8>)
 8002612:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002616:	429a      	cmp	r2, r3
 8002618:	d204      	bcs.n	8002624 <StartAlarmTask+0x5c>
	  {/* (B3 < SB3L) */
		  PSA.Alarm.AL05_LowProcessTankPressure = PSA_ALARM_ON;
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <StartAlarmTask+0xb8>)
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8002622:	e00b      	b.n	800263c <StartAlarmTask+0x74>
	  }
	  else if((PSA.B3_ProcessTankPressure.Value > PSA.B3_ProcessTankPressure.UpperThreshold))
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <StartAlarmTask+0xb8>)
 8002626:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <StartAlarmTask+0xb8>)
 800262c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002630:	429a      	cmp	r2, r3
 8002632:	d903      	bls.n	800263c <StartAlarmTask+0x74>
	  {/* (B3 > SB3H) */
		  PSA.Alarm.AL05_LowProcessTankPressure = PSA_ALARM_OFF;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <StartAlarmTask+0xb8>)
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	  }

	  if((PSA.B4_OutputPressure_2.Value > PSA.B4_OutputPressure_2.UpperThreshold))
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <StartAlarmTask+0xb8>)
 800263e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <StartAlarmTask+0xb8>)
 8002644:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002648:	429a      	cmp	r2, r3
 800264a:	d904      	bls.n	8002656 <StartAlarmTask+0x8e>
	  {/* (B4 > SB4H) */
		  PSA.Alarm.AL16_HighOut2Pressure = PSA_ALARM_ON;
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <StartAlarmTask+0xb8>)
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8002654:	e00b      	b.n	800266e <StartAlarmTask+0xa6>
	  }
	  else if((PSA.B4_OutputPressure_2.Value < PSA.B4_OutputPressure_2.LowerThreshold))
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <StartAlarmTask+0xb8>)
 8002658:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <StartAlarmTask+0xb8>)
 800265e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002662:	429a      	cmp	r2, r3
 8002664:	d203      	bcs.n	800266e <StartAlarmTask+0xa6>
	  {/* (B4 < SB4L)  */
		  PSA.Alarm.AL16_HighOut2Pressure = PSA_ALARM_OFF;
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <StartAlarmTask+0xb8>)
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	  }

	  vTaskDelayUntil(&StateTaskDelayTimer, 1 * deciseconds);
 800266e:	2264      	movs	r2, #100	; 0x64
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f00b f978 	bl	800d96c <vTaskDelayUntil>
	  if((PSA.B1_IncomingAirPressure.Value < PSA.B1_IncomingAirPressure.LowerThreshold) && (!PSA.Time.LowAirPressureTimer))
 800267c:	e7ac      	b.n	80025d8 <StartAlarmTask+0x10>
 800267e:	bf00      	nop
 8002680:	20009a90 	.word	0x20009a90

08002684 <StartFaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFaultTask */
void StartFaultTask(void *argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800268c:	2001      	movs	r0, #1
 800268e:	f00a f847 	bl	800c720 <osDelay>
 8002692:	e7fb      	b.n	800268c <StartFaultTask+0x8>

08002694 <StartValveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartValveTask */
void StartValveTask(void *argument)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartValveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800269c:	2001      	movs	r0, #1
 800269e:	f00a f83f 	bl	800c720 <osDelay>
 80026a2:	e7fb      	b.n	800269c <StartValveTask+0x8>

080026a4 <StartRequestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRequestTask */
void StartRequestTask(void *argument)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRequestTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f00a f837 	bl	800c720 <osDelay>
 80026b2:	e7fb      	b.n	80026ac <StartRequestTask+0x8>

080026b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026c6:	f001 fa19 	bl	8003afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40001000 	.word	0x40001000

080026d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <Error_Handler+0x8>
	...

080026e4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
uint8_t MCP2515_Initialize(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80026ea:	2201      	movs	r2, #1
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	480c      	ldr	r0, [pc, #48]	; (8002720 <MCP2515_Initialize+0x3c>)
 80026f0:	f004 f90a 	bl	8006908 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80026f4:	230a      	movs	r3, #10
 80026f6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80026f8:	480a      	ldr	r0, [pc, #40]	; (8002724 <MCP2515_Initialize+0x40>)
 80026fa:	f007 fdfe 	bl	800a2fa <HAL_SPI_GetState>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <MCP2515_Initialize+0x24>
      return 1;
 8002704:	2301      	movs	r3, #1
 8002706:	e006      	b.n	8002716 <MCP2515_Initialize+0x32>
    
    loop--;
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	3b01      	subs	r3, #1
 800270c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f1      	bne.n	80026f8 <MCP2515_Initialize+0x14>
      
  return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021c00 	.word	0x40021c00
 8002724:	20008f54 	.word	0x20008f54

08002728 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
uint8_t MCP2515_SetConfigMode(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	200f      	movs	r0, #15
 8002732:	f000 f879 	bl	8002828 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8002736:	230a      	movs	r3, #10
 8002738:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800273a:	200e      	movs	r0, #14
 800273c:	f000 f830 	bl	80027a0 <MCP2515_ReadByte>
 8002740:	4603      	mov	r3, r0
 8002742:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d101      	bne.n	800274e <MCP2515_SetConfigMode+0x26>
      return 1;
 800274a:	2301      	movs	r3, #1
 800274c:	e006      	b.n	800275c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	3b01      	subs	r3, #1
 8002752:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ef      	bne.n	800273a <MCP2515_SetConfigMode+0x12>
  
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
uint8_t MCP2515_SetNormalMode(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800276a:	2100      	movs	r1, #0
 800276c:	200f      	movs	r0, #15
 800276e:	f000 f85b 	bl	8002828 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8002772:	230a      	movs	r3, #10
 8002774:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8002776:	200e      	movs	r0, #14
 8002778:	f000 f812 	bl	80027a0 <MCP2515_ReadByte>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <MCP2515_SetNormalMode+0x26>
      return 1;
 8002786:	2301      	movs	r3, #1
 8002788:	e006      	b.n	8002798 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	3b01      	subs	r3, #1
 800278e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <MCP2515_SetNormalMode+0x12>
  
  return 0;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80027aa:	2200      	movs	r2, #0
 80027ac:	2140      	movs	r1, #64	; 0x40
 80027ae:	480c      	ldr	r0, [pc, #48]	; (80027e0 <MCP2515_ReadByte+0x40>)
 80027b0:	f004 f8aa 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 f901 	bl	80029bc <SPI_Tx>
  SPI_Tx(address);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f8fd 	bl	80029bc <SPI_Tx>
  retVal = SPI_Rx();
 80027c2:	f000 f921 	bl	8002a08 <SPI_Rx>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80027ca:	2201      	movs	r2, #1
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <MCP2515_ReadByte+0x40>)
 80027d0:	f004 f89a 	bl	8006908 <HAL_GPIO_WritePin>
  
  return retVal;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021c00 	.word	0x40021c00

080027e4 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	480a      	ldr	r0, [pc, #40]	; (8002824 <MCP2515_ReadRxSequence+0x40>)
 80027fa:	f004 f885 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f8db 	bl	80029bc <SPI_Tx>
  SPI_RxBuffer(data, length);
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	4619      	mov	r1, r3
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	f000 f90c 	bl	8002a28 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8002810:	2201      	movs	r2, #1
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	4803      	ldr	r0, [pc, #12]	; (8002824 <MCP2515_ReadRxSequence+0x40>)
 8002816:	f004 f877 	bl	8006908 <HAL_GPIO_WritePin>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40021c00 	.word	0x40021c00

08002828 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	460a      	mov	r2, r1
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	4613      	mov	r3, r2
 8002836:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8002838:	2200      	movs	r2, #0
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	480b      	ldr	r0, [pc, #44]	; (800286c <MCP2515_WriteByte+0x44>)
 800283e:	f004 f863 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8002842:	2002      	movs	r0, #2
 8002844:	f000 f8ba 	bl	80029bc <SPI_Tx>
  SPI_Tx(address);
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f8b6 	bl	80029bc <SPI_Tx>
  SPI_Tx(data);  
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f8b2 	bl	80029bc <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8002858:	2201      	movs	r2, #1
 800285a:	2140      	movs	r1, #64	; 0x40
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <MCP2515_WriteByte+0x44>)
 800285e:	f004 f853 	bl	8006908 <HAL_GPIO_WritePin>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021c00 	.word	0x40021c00

08002870 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	603a      	str	r2, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	460b      	mov	r3, r1
 800287e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002880:	2200      	movs	r2, #0
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	480e      	ldr	r0, [pc, #56]	; (80028c0 <MCP2515_WriteByteSequence+0x50>)
 8002886:	f004 f83f 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 800288a:	2002      	movs	r0, #2
 800288c:	f000 f896 	bl	80029bc <SPI_Tx>
  SPI_Tx(startAddress);
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f892 	bl	80029bc <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8002898:	79ba      	ldrb	r2, [r7, #6]
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4619      	mov	r1, r3
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f000 f89a 	bl	80029e0 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80028ac:	2201      	movs	r2, #1
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <MCP2515_WriteByteSequence+0x50>)
 80028b2:	f004 f829 	bl	8006908 <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021c00 	.word	0x40021c00

080028c4 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4603      	mov	r3, r0
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	4613      	mov	r3, r2
 80028d4:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80028d6:	2200      	movs	r2, #0
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	480e      	ldr	r0, [pc, #56]	; (8002914 <MCP2515_LoadTxSequence+0x50>)
 80028dc:	f004 f814 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f86a 	bl	80029bc <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80028e8:	2104      	movs	r1, #4
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	f000 f878 	bl	80029e0 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f862 	bl	80029bc <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f86f 	bl	80029e0 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8002902:	2201      	movs	r2, #1
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4803      	ldr	r0, [pc, #12]	; (8002914 <MCP2515_LoadTxSequence+0x50>)
 8002908:	f003 fffe 	bl	8006908 <HAL_GPIO_WritePin>
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021c00 	.word	0x40021c00

08002918 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8002922:	2200      	movs	r2, #0
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4808      	ldr	r0, [pc, #32]	; (8002948 <MCP2515_RequestToSend+0x30>)
 8002928:	f003 ffee 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f844 	bl	80029bc <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8002934:	2201      	movs	r2, #1
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	4803      	ldr	r0, [pc, #12]	; (8002948 <MCP2515_RequestToSend+0x30>)
 800293a:	f003 ffe5 	bl	8006908 <HAL_GPIO_WritePin>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021c00 	.word	0x40021c00

0800294c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8002952:	2200      	movs	r2, #0
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	480a      	ldr	r0, [pc, #40]	; (8002980 <MCP2515_ReadStatus+0x34>)
 8002958:	f003 ffd6 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 800295c:	20a0      	movs	r0, #160	; 0xa0
 800295e:	f000 f82d 	bl	80029bc <SPI_Tx>
  retVal = SPI_Rx();
 8002962:	f000 f851 	bl	8002a08 <SPI_Rx>
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800296a:	2201      	movs	r2, #1
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4804      	ldr	r0, [pc, #16]	; (8002980 <MCP2515_ReadStatus+0x34>)
 8002970:	f003 ffca 	bl	8006908 <HAL_GPIO_WritePin>
  
  return retVal;
 8002974:	79fb      	ldrb	r3, [r7, #7]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021c00 	.word	0x40021c00

08002984 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800298a:	2200      	movs	r2, #0
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	480a      	ldr	r0, [pc, #40]	; (80029b8 <MCP2515_GetRxStatus+0x34>)
 8002990:	f003 ffba 	bl	8006908 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8002994:	20b0      	movs	r0, #176	; 0xb0
 8002996:	f000 f811 	bl	80029bc <SPI_Tx>
  retVal = SPI_Rx();
 800299a:	f000 f835 	bl	8002a08 <SPI_Rx>
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80029a2:	2201      	movs	r2, #1
 80029a4:	2140      	movs	r1, #64	; 0x40
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <MCP2515_GetRxStatus+0x34>)
 80029a8:	f003 ffae 	bl	8006908 <HAL_GPIO_WritePin>
  
  return retVal;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40021c00 	.word	0x40021c00

080029bc <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80029c6:	1df9      	adds	r1, r7, #7
 80029c8:	2314      	movs	r3, #20
 80029ca:	2201      	movs	r2, #1
 80029cc:	4803      	ldr	r0, [pc, #12]	; (80029dc <SPI_Tx+0x20>)
 80029ce:	f007 f8a5 	bl	8009b1c <HAL_SPI_Transmit>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20008f54 	.word	0x20008f54

080029e0 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <SPI_TxBuffer+0x24>)
 80029f6:	f007 f891 	bl	8009b1c <HAL_SPI_Transmit>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20008f54 	.word	0x20008f54

08002a08 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8002a0e:	1df9      	adds	r1, r7, #7
 8002a10:	2314      	movs	r3, #20
 8002a12:	2201      	movs	r2, #1
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <SPI_Rx+0x1c>)
 8002a16:	f007 f9bd 	bl	8009d94 <HAL_SPI_Receive>
  return retVal;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20008f54 	.word	0x20008f54

08002a28 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2314      	movs	r3, #20
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4803      	ldr	r0, [pc, #12]	; (8002a4c <SPI_RxBuffer+0x24>)
 8002a3e:	f007 f9a9 	bl	8009d94 <HAL_SPI_Receive>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20008f54 	.word	0x20008f54

08002a50 <MyQueue_GetAverageValue>:
	Prototype->Sum = Prototype->Sum + ElementToInsert - ElementToEliminate;
	Prototype->AverageValue = Prototype->Sum / Prototype->Size;
}

uint16_t MyQueue_GetAverageValue(QueueStruct *Prototype)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	return Prototype->AverageValue;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <MyQueue_GetLastValue>:

/*
 *
 */
uint16_t MyQueue_GetLastValue(QueueStruct *Prototype)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	if(Prototype->Size)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <MyQueue_GetLastValue+0x22>
		return Prototype->Queue[Prototype->NextElementPositionPointer-1];
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a8a:	e000      	b.n	8002a8e <MyQueue_GetLastValue+0x24>
	return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <State_DebugInit>:
//uint8_t charState[2]; /* Send the state by UART communication during DEBUG */
extern PSAStruct PSA;

#if DEBUG
void State_DebugInit()
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
	PSA.Time.Adsorption_1 = 27;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <State_DebugInit+0x38>)
 8002aa2:	221b      	movs	r2, #27
 8002aa4:	805a      	strh	r2, [r3, #2]
	PSA.Time.Adsorption_2 = 27;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <State_DebugInit+0x38>)
 8002aa8:	221b      	movs	r2, #27
 8002aaa:	809a      	strh	r2, [r3, #4]
	PSA.Time.Compensation_0 = 1;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <State_DebugInit+0x38>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	80da      	strh	r2, [r3, #6]
	PSA.Time.Compensation_1 = 1;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <State_DebugInit+0x38>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	811a      	strh	r2, [r3, #8]
	PSA.Time.Compensation_2 = 1;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <State_DebugInit+0x38>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	815a      	strh	r2, [r3, #10]
	PSA.Time.PreStandby_1 = 5;
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <State_DebugInit+0x38>)
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	819a      	strh	r2, [r3, #12]
	PSA.Time.PreStandby_2 = 5;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <State_DebugInit+0x38>)
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	81da      	strh	r2, [r3, #14]
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	20009a90 	.word	0x20009a90

08002ad8 <State_OutValve>:
#endif /* DEBUG */

void State_OutValve()
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
	PSA.ValveState[1] = 0;
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <State_OutValve+0x4c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	if(/*PSA.OUT_1 == 2*/ PSA.Out1.Working)
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <State_OutValve+0x4c>)
 8002ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <State_OutValve+0x28>
	{
		PSA.ValveState[0]++;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <State_OutValve+0x4c>)
 8002af0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002af4:	3301      	adds	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <State_OutValve+0x4c>)
 8002afa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	else if(/*PSA.OUT_2 == 2*/ PSA.Out2.Working)
	{
		PSA.ValveState[1]++;
	}
}
 8002afe:	e00c      	b.n	8002b1a <State_OutValve+0x42>
	else if(/*PSA.OUT_2 == 2*/ PSA.Out2.Working)
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <State_OutValve+0x4c>)
 8002b02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <State_OutValve+0x42>
		PSA.ValveState[1]++;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <State_OutValve+0x4c>)
 8002b0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <State_OutValve+0x4c>)
 8002b16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20009a90 	.word	0x20009a90

08002b28 <State_Adsorption1>:

void State_Adsorption1()
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0

	PSA.ValveState[0] = 0xC6;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <State_Adsorption1+0x1c>)
 8002b2e:	22c6      	movs	r2, #198	; 0xc6
 8002b30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	State_OutValve();
 8002b34:	f7ff ffd0 	bl	8002ad8 <State_OutValve>
	PSA.Time.NextStateTimer = PSA.Time.Adsorption_1; /* 275 ds */
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <State_Adsorption1+0x1c>)
 8002b3a:	885a      	ldrh	r2, [r3, #2]
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <State_Adsorption1+0x1c>)
 8002b3e:	801a      	strh	r2, [r3, #0]

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20009a90 	.word	0x20009a90

08002b48 <State_Compensation1>:
	PSA.Time.NextStateTimer = PSA.Time.Compensation_0; /* 5 ds */

}

void State_Compensation1()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0xA0;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <State_Compensation1+0x1c>)
 8002b4e:	22a0      	movs	r2, #160	; 0xa0
 8002b50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	State_OutValve();
 8002b54:	f7ff ffc0 	bl	8002ad8 <State_OutValve>
	PSA.Time.NextStateTimer = PSA.Time.Compensation_1; /* 5 ds */
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <State_Compensation1+0x1c>)
 8002b5a:	891a      	ldrh	r2, [r3, #8]
 8002b5c:	4b01      	ldr	r3, [pc, #4]	; (8002b64 <State_Compensation1+0x1c>)
 8002b5e:	801a      	strh	r2, [r3, #0]

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20009a90 	.word	0x20009a90

08002b68 <State_Compensation2>:

void State_Compensation2()
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0x24;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <State_Compensation2+0x1c>)
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	State_OutValve();
 8002b74:	f7ff ffb0 	bl	8002ad8 <State_OutValve>
	PSA.Time.NextStateTimer = PSA.Time.Compensation_2; /* 5 ds */
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <State_Compensation2+0x1c>)
 8002b7a:	895a      	ldrh	r2, [r3, #10]
 8002b7c:	4b01      	ldr	r3, [pc, #4]	; (8002b84 <State_Compensation2+0x1c>)
 8002b7e:	801a      	strh	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20009a90 	.word	0x20009a90

08002b88 <State_Adsorption2>:
void State_Adsorption2()
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0xB8;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <State_Adsorption2+0x1c>)
 8002b8e:	22b8      	movs	r2, #184	; 0xb8
 8002b90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	State_OutValve();
 8002b94:	f7ff ffa0 	bl	8002ad8 <State_OutValve>
	PSA.Time.NextStateTimer = PSA.Time.Adsorption_2; /* 275 ds */
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <State_Adsorption2+0x1c>)
 8002b9a:	889a      	ldrh	r2, [r3, #4]
 8002b9c:	4b01      	ldr	r3, [pc, #4]	; (8002ba4 <State_Adsorption2+0x1c>)
 8002b9e:	801a      	strh	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20009a90 	.word	0x20009a90

08002ba8 <State_PreStandby1>:

/* -> Standby1 -> Standby2 -> Standby3 -> */
void State_PreStandby1()
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0x08;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <State_PreStandby1+0x20>)
 8002bae:	2208      	movs	r2, #8
 8002bb0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	PSA.Time.NextStateTimer = PSA.Time.PreStandby_1; /* 50 ds */
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <State_PreStandby1+0x20>)
 8002bb6:	899a      	ldrh	r2, [r3, #12]
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <State_PreStandby1+0x20>)
 8002bba:	801a      	strh	r2, [r3, #0]

}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20009a90 	.word	0x20009a90

08002bcc <State_PreStandby2>:
void State_PreStandby2()
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0x48;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <State_PreStandby2+0x20>)
 8002bd2:	2248      	movs	r2, #72	; 0x48
 8002bd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	PSA.Time.NextStateTimer = PSA.Time.PreStandby_2; /* 50 ds */
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <State_PreStandby2+0x20>)
 8002bda:	89da      	ldrh	r2, [r3, #14]
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <State_PreStandby2+0x20>)
 8002bde:	801a      	strh	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20009a90 	.word	0x20009a90

08002bf0 <State_Standby>:
void State_Standby()
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
	PSA.ValveState[0] = 0x00;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <State_Standby+0x1c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	PSA.Time.NextStateTimer = 0; /* ds */
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <State_Standby+0x1c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	20009a90 	.word	0x20009a90

08002c10 <State_NextState>:

#ifdef STATE_COMPENSATION2
#ifndef STATE_COMPENSATION0
//if((define STATE_COMPENSATION2) && !(define STATE_COMPENSATION0))
int State_NextState(int n)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d83a      	bhi.n	8002c96 <State_NextState+0x86>
 8002c20:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <State_NextState+0x18>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c4d 	.word	0x08002c4d
 8002c2c:	08002c57 	.word	0x08002c57
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c67 	.word	0x08002c67
 8002c38:	08002c6f 	.word	0x08002c6f
 8002c3c:	08002c77 	.word	0x08002c77
 8002c40:	08002c7f 	.word	0x08002c7f
 8002c44:	08002c87 	.word	0x08002c87
 8002c48:	08002c8f 	.word	0x08002c8f
	switch(n)
	{
	/* STANDBY */
	case -2:
		State_PreStandby1();
 8002c4c:	f7ff ffac 	bl	8002ba8 <State_PreStandby1>
		return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e020      	b.n	8002c98 <State_NextState+0x88>
	case -1:
		State_PreStandby2();
 8002c56:	f7ff ffb9 	bl	8002bcc <State_PreStandby2>
		return 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e01c      	b.n	8002c98 <State_NextState+0x88>
	case 0:
		State_Standby();
 8002c5e:	f7ff ffc7 	bl	8002bf0 <State_Standby>
		return 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e018      	b.n	8002c98 <State_NextState+0x88>

	/* ADSORPTION_CYCLE */
	case 1:
		State_Adsorption1();
 8002c66:	f7ff ff5f 	bl	8002b28 <State_Adsorption1>
		return 2;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e014      	b.n	8002c98 <State_NextState+0x88>
	case 2:
		State_Compensation1();
 8002c6e:	f7ff ff6b 	bl	8002b48 <State_Compensation1>
		return 3;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e010      	b.n	8002c98 <State_NextState+0x88>
	case 3:
		State_Compensation2();
 8002c76:	f7ff ff77 	bl	8002b68 <State_Compensation2>
		return 4;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e00c      	b.n	8002c98 <State_NextState+0x88>
	case 4:
		State_Adsorption2();
 8002c7e:	f7ff ff83 	bl	8002b88 <State_Adsorption2>
		return 5;
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <State_NextState+0x88>
	case 5:
		State_Compensation1();
 8002c86:	f7ff ff5f 	bl	8002b48 <State_Compensation1>
		return 6;
 8002c8a:	2306      	movs	r3, #6
 8002c8c:	e004      	b.n	8002c98 <State_NextState+0x88>
	case 6:
		State_Compensation2();
 8002c8e:	f7ff ff6b 	bl	8002b68 <State_Compensation2>
		return 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <State_NextState+0x88>
	}
	return 0;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_MspInit+0x54>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a11      	ldr	r2, [pc, #68]	; (8002cf4 <HAL_MspInit+0x54>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_MspInit+0x54>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_MspInit+0x54>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_MspInit+0x54>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_MspInit+0x54>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	210f      	movs	r1, #15
 8002ce2:	f06f 0001 	mvn.w	r0, #1
 8002ce6:	f002 f8d9 	bl	8004e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_ADC_MspInit+0x3c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10d      	bne.n	8002d26 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_ADC_MspInit+0x40>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_ADC_MspInit+0x40>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <HAL_ADC_MspInit+0x40>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40012000 	.word	0x40012000
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4b      	ldr	r2, [pc, #300]	; (8002e88 <HAL_CAN_MspInit+0x14c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d13e      	bne.n	8002ddc <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002d5e:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a49      	ldr	r2, [pc, #292]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002d66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002d68:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10d      	bne.n	8002d8c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	4a45      	ldr	r2, [pc, #276]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a3e      	ldr	r2, [pc, #248]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002da8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dba:	2309      	movs	r3, #9
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4833      	ldr	r0, [pc, #204]	; (8002e94 <HAL_CAN_MspInit+0x158>)
 8002dc6:	f003 fbdb 	bl	8006580 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2105      	movs	r1, #5
 8002dce:	2014      	movs	r0, #20
 8002dd0:	f002 f864 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002dd4:	2014      	movs	r0, #20
 8002dd6:	f002 f87d 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002dda:	e050      	b.n	8002e7e <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_CAN_MspInit+0x15c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d14b      	bne.n	8002e7e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_CAN_MspInit+0x150>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10d      	bne.n	8002e30 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e22:	6413      	str	r3, [r2, #64]	; 0x40
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_CAN_MspInit+0x154>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002e4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002e5e:	2309      	movs	r3, #9
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <HAL_CAN_MspInit+0x160>)
 8002e6a:	f003 fb89 	bl	8006580 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2105      	movs	r1, #5
 8002e72:	2041      	movs	r0, #65	; 0x41
 8002e74:	f002 f812 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002e78:	2041      	movs	r0, #65	; 0x41
 8002e7a:	f002 f82b 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3730      	adds	r7, #48	; 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40006400 	.word	0x40006400
 8002e8c:	20000094 	.word	0x20000094
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40006800 	.word	0x40006800
 8002e9c:	40020400 	.word	0x40020400

08002ea0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <HAL_CRC_MspInit+0x3c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10d      	bne.n	8002ece <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_CRC_MspInit+0x40>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_CRC_MspInit+0x40>)
 8002ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_CRC_MspInit+0x40>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023000 	.word	0x40023000
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_DMA2D_MspInit+0x48>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d115      	bne.n	8002f22 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_DMA2D_MspInit+0x4c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a0c      	ldr	r2, [pc, #48]	; (8002f30 <HAL_DMA2D_MspInit+0x4c>)
 8002f00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_DMA2D_MspInit+0x4c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2105      	movs	r1, #5
 8002f16:	205a      	movs	r0, #90	; 0x5a
 8002f18:	f001 ffc0 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002f1c:	205a      	movs	r0, #90	; 0x5a
 8002f1e:	f001 ffd9 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	4002b000 	.word	0x4002b000
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_DSI_MspInit+0x94>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d133      	bne.n	8002fbe <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f64:	6453      	str	r3, [r2, #68]	; 0x44
 8002f66:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_DSI_MspInit+0x98>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002f9e:	230d      	movs	r3, #13
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <HAL_DSI_MspInit+0x9c>)
 8002faa:	f003 fae9 	bl	8006580 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	205c      	movs	r0, #92	; 0x5c
 8002fb4:	f001 ff72 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002fb8:	205c      	movs	r0, #92	; 0x5c
 8002fba:	f001 ff8b 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002fbe:	bf00      	nop
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40016c00 	.word	0x40016c00
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40022400 	.word	0x40022400

08002fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a32      	ldr	r2, [pc, #200]	; (80030bc <HAL_I2C_MspInit+0xe8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d12d      	bne.n	8003052 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003018:	2312      	movs	r3, #18
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800301c:	2301      	movs	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003024:	2304      	movs	r3, #4
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <HAL_I2C_MspInit+0xf0>)
 8003030:	f003 faa6 	bl	8006580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 800303e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003050:	e030      	b.n	80030b4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_I2C_MspInit+0xf4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12b      	bne.n	80030b4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	6313      	str	r3, [r2, #48]	; 0x30
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003078:	2330      	movs	r3, #48	; 0x30
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307c:	2312      	movs	r3, #18
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003084:	2303      	movs	r3, #3
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003088:	2304      	movs	r3, #4
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	480e      	ldr	r0, [pc, #56]	; (80030cc <HAL_I2C_MspInit+0xf8>)
 8003094:	f003 fa74 	bl	8006580 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 80030a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030a6:	6413      	str	r3, [r2, #64]	; 0x40
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_I2C_MspInit+0xec>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40005400 	.word	0x40005400
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40005800 	.word	0x40005800
 80030cc:	40021c00 	.word	0x40021c00

080030d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b092      	sub	sp, #72	; 0x48
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	223c      	movs	r2, #60	; 0x3c
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f00c f9ef 	bl	800f4c4 <memset>
  if(hltdc->Instance==LTDC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_LTDC_MspInit+0x78>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d127      	bne.n	8003140 <HAL_LTDC_MspInit+0x70>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030f0:	2308      	movs	r3, #8
 80030f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80030f4:	2332      	movs	r3, #50	; 0x32
 80030f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80030f8:	2302      	movs	r3, #2
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fc71 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8003110:	f7ff fae2 	bl	80026d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_LTDC_MspInit+0x7c>)
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	4a0b      	ldr	r2, [pc, #44]	; (800314c <HAL_LTDC_MspInit+0x7c>)
 800311e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003122:	6453      	str	r3, [r2, #68]	; 0x44
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_LTDC_MspInit+0x7c>)
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	2058      	movs	r0, #88	; 0x58
 8003136:	f001 feb1 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800313a:	2058      	movs	r0, #88	; 0x58
 800313c:	f001 feca 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3748      	adds	r7, #72	; 0x48
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40016800 	.word	0x40016800
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a31      	ldr	r2, [pc, #196]	; (8003234 <HAL_QSPI_MspInit+0xe4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d15b      	bne.n	800322a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6393      	str	r3, [r2, #56]	; 0x38
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a21      	ldr	r2, [pc, #132]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 80031b4:	f043 0320 	orr.w	r3, r3, #32
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <HAL_QSPI_MspInit+0xe8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d2:	2303      	movs	r3, #3
 80031d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80031d6:	230a      	movs	r3, #10
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	4619      	mov	r1, r3
 80031e0:	4816      	ldr	r0, [pc, #88]	; (800323c <HAL_QSPI_MspInit+0xec>)
 80031e2:	f003 f9cd 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 80031e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80031ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031f8:	2309      	movs	r3, #9
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	480f      	ldr	r0, [pc, #60]	; (8003240 <HAL_QSPI_MspInit+0xf0>)
 8003204:	f003 f9bc 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8003208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800320c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003216:	2303      	movs	r3, #3
 8003218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800321a:	230a      	movs	r3, #10
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	4619      	mov	r1, r3
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <HAL_QSPI_MspInit+0xf0>)
 8003226:	f003 f9ab 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800322a:	bf00      	nop
 800322c:	3728      	adds	r7, #40	; 0x28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	a0001000 	.word	0xa0001000
 8003238:	40023800 	.word	0x40023800
 800323c:	40020400 	.word	0x40020400
 8003240:	40021400 	.word	0x40021400

08003244 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b09a      	sub	sp, #104	; 0x68
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	223c      	movs	r2, #60	; 0x3c
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f00c f92d 	bl	800f4c4 <memset>
  if(hsd->Instance==SDIO)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a79      	ldr	r2, [pc, #484]	; (8003454 <HAL_SD_MspInit+0x210>)
 8003270:	4293      	cmp	r3, r2
 8003272:	f040 80eb 	bne.w	800344c <HAL_SD_MspInit+0x208>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 8003276:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800327a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003280:	2300      	movs	r3, #0
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	4618      	mov	r0, r3
 800328a:	f004 fbaf 	bl	80079ec <HAL_RCCEx_PeriphCLKConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003294:	f7ff fa20 	bl	80026d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <HAL_SD_MspInit+0x214>)
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032a6:	6453      	str	r3, [r2, #68]	; 0x44
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	4b67      	ldr	r3, [pc, #412]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	4a66      	ldr	r2, [pc, #408]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6313      	str	r3, [r2, #48]	; 0x30
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	4b60      	ldr	r3, [pc, #384]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032da:	f043 0308 	orr.w	r3, r3, #8
 80032de:	6313      	str	r3, [r2, #48]	; 0x30
 80032e0:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_SD_MspInit+0x214>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032fe:	230c      	movs	r3, #12
 8003300:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003302:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003306:	4619      	mov	r1, r3
 8003308:	4854      	ldr	r0, [pc, #336]	; (800345c <HAL_SD_MspInit+0x218>)
 800330a:	f003 f939 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800330e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003318:	2301      	movs	r3, #1
 800331a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331c:	2303      	movs	r3, #3
 800331e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003320:	230c      	movs	r3, #12
 8003322:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003324:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003328:	4619      	mov	r1, r3
 800332a:	484c      	ldr	r0, [pc, #304]	; (800345c <HAL_SD_MspInit+0x218>)
 800332c:	f003 f928 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003330:	2304      	movs	r3, #4
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003338:	2301      	movs	r3, #1
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003340:	230c      	movs	r3, #12
 8003342:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003344:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003348:	4619      	mov	r1, r3
 800334a:	4845      	ldr	r0, [pc, #276]	; (8003460 <HAL_SD_MspInit+0x21c>)
 800334c:	f003 f918 	bl	8006580 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003352:	4a45      	ldr	r2, [pc, #276]	; (8003468 <HAL_SD_MspInit+0x224>)
 8003354:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003358:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800335c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003360:	2200      	movs	r2, #0
 8003362:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003366:	2200      	movs	r2, #0
 8003368:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <HAL_SD_MspInit+0x220>)
 800336c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003370:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003372:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003374:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003378:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800337a:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_SD_MspInit+0x220>)
 800337c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003380:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003384:	2220      	movs	r2, #32
 8003386:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_SD_MspInit+0x220>)
 800338a:	2200      	movs	r2, #0
 800338c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003390:	2204      	movs	r2, #4
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_SD_MspInit+0x220>)
 8003396:	2203      	movs	r2, #3
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_SD_MspInit+0x220>)
 800339c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <HAL_SD_MspInit+0x220>)
 80033a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80033aa:	482e      	ldr	r0, [pc, #184]	; (8003464 <HAL_SD_MspInit+0x220>)
 80033ac:	f001 fdbc 	bl	8004f28 <HAL_DMA_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_SD_MspInit+0x176>
    {
      Error_Handler();
 80033b6:	f7ff f98f 	bl	80026d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_SD_MspInit+0x220>)
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
 80033c0:	4a28      	ldr	r2, [pc, #160]	; (8003464 <HAL_SD_MspInit+0x220>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_SD_MspInit+0x228>)
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_SD_MspInit+0x22c>)
 80033ca:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80033cc:	4b27      	ldr	r3, [pc, #156]	; (800346c <HAL_SD_MspInit+0x228>)
 80033ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033d2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_SD_MspInit+0x228>)
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_SD_MspInit+0x228>)
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_SD_MspInit+0x228>)
 80033e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_SD_MspInit+0x228>)
 80033ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ee:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_SD_MspInit+0x228>)
 80033f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033f6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_SD_MspInit+0x228>)
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_SD_MspInit+0x228>)
 8003400:	2200      	movs	r2, #0
 8003402:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_SD_MspInit+0x228>)
 8003406:	2204      	movs	r2, #4
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <HAL_SD_MspInit+0x228>)
 800340c:	2203      	movs	r2, #3
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <HAL_SD_MspInit+0x228>)
 8003412:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_SD_MspInit+0x228>)
 800341a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003420:	4812      	ldr	r0, [pc, #72]	; (800346c <HAL_SD_MspInit+0x228>)
 8003422:	f001 fd81 	bl	8004f28 <HAL_DMA_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_SD_MspInit+0x1ec>
    {
      Error_Handler();
 800342c:	f7ff f954 	bl	80026d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <HAL_SD_MspInit+0x228>)
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c
 8003436:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_SD_MspInit+0x228>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2105      	movs	r1, #5
 8003440:	2031      	movs	r0, #49	; 0x31
 8003442:	f001 fd2b 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003446:	2031      	movs	r0, #49	; 0x31
 8003448:	f001 fd44 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800344c:	bf00      	nop
 800344e:	3768      	adds	r7, #104	; 0x68
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40023800 	.word	0x40023800
 800345c:	40020800 	.word	0x40020800
 8003460:	40020c00 	.word	0x40020c00
 8003464:	20008ef0 	.word	0x20008ef0
 8003468:	40026458 	.word	0x40026458
 800346c:	200097e4 	.word	0x200097e4
 8003470:	400264a0 	.word	0x400264a0

08003474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <HAL_SPI_MspInit+0xc0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d14a      	bne.n	800352c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a26      	ldr	r2, [pc, #152]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_SPI_MspInit+0xc4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ea:	2308      	movs	r3, #8
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034f6:	2302      	movs	r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034fa:	2305      	movs	r3, #5
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <HAL_SPI_MspInit+0xc8>)
 8003506:	f003 f83b 	bl	8006580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800350a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800350e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003514:	2301      	movs	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003518:	2302      	movs	r3, #2
 800351a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800351c:	2305      	movs	r3, #5
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4619      	mov	r1, r3
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <HAL_SPI_MspInit+0xcc>)
 8003528:	f003 f82a 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40003800 	.word	0x40003800
 8003538:	40023800 	.word	0x40023800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40020400 	.word	0x40020400

08003544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d115      	bne.n	8003582 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_TIM_Base_MspInit+0x48>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <HAL_TIM_Base_MspInit+0x48>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_TIM_Base_MspInit+0x48>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2105      	movs	r1, #5
 8003576:	201c      	movs	r0, #28
 8003578:	f001 fc90 	bl	8004e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800357c:	201c      	movs	r0, #28
 800357e:	f001 fca9 	bl	8004ed4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12c      	bne.n	800360c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035bc:	f043 0320 	orr.w	r3, r3, #32
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_UART_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80035ea:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035fc:	2308      	movs	r3, #8
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4805      	ldr	r0, [pc, #20]	; (800361c <HAL_UART_MspInit+0x8c>)
 8003608:	f002 ffba 	bl	8006580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40011400 	.word	0x40011400
 8003618:	40023800 	.word	0x40023800
 800361c:	40021800 	.word	0x40021800

08003620 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_FMC_MspInit+0x128>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 8081 	bne.w	8003740 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <HAL_FMC_MspInit+0x128>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_FMC_MspInit+0x12c>)
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	4a3f      	ldr	r2, [pc, #252]	; (800374c <HAL_FMC_MspInit+0x12c>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6393      	str	r3, [r2, #56]	; 0x38
 8003654:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_FMC_MspInit+0x12c>)
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003660:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003664:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003672:	230c      	movs	r3, #12
 8003674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4835      	ldr	r0, [pc, #212]	; (8003750 <HAL_FMC_MspInit+0x130>)
 800367c:	f002 ff80 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003680:	f248 1333 	movw	r3, #33075	; 0x8133
 8003684:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003692:	230c      	movs	r3, #12
 8003694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	482e      	ldr	r0, [pc, #184]	; (8003754 <HAL_FMC_MspInit+0x134>)
 800369c:	f002 ff70 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80036a0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80036a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036b2:	230c      	movs	r3, #12
 80036b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4827      	ldr	r0, [pc, #156]	; (8003758 <HAL_FMC_MspInit+0x138>)
 80036bc:	f002 ff60 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80036c0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80036c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d2:	230c      	movs	r3, #12
 80036d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4820      	ldr	r0, [pc, #128]	; (800375c <HAL_FMC_MspInit+0x13c>)
 80036dc:	f002 ff50 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80036e0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80036e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036f2:	230c      	movs	r3, #12
 80036f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4819      	ldr	r0, [pc, #100]	; (8003760 <HAL_FMC_MspInit+0x140>)
 80036fc:	f002 ff40 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8003700:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003704:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4812      	ldr	r0, [pc, #72]	; (8003764 <HAL_FMC_MspInit+0x144>)
 800371c:	f002 ff30 	bl	8006580 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2;
 8003720:	230d      	movs	r3, #13
 8003722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003730:	230c      	movs	r3, #12
 8003732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	4619      	mov	r1, r3
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <HAL_FMC_MspInit+0x148>)
 800373a:	f002 ff21 	bl	8006580 <HAL_GPIO_Init>
 800373e:	e000      	b.n	8003742 <HAL_FMC_MspInit+0x122>
    return;
 8003740:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000098 	.word	0x20000098
 800374c:	40023800 	.word	0x40023800
 8003750:	40021000 	.word	0x40021000
 8003754:	40021800 	.word	0x40021800
 8003758:	40020c00 	.word	0x40020c00
 800375c:	40022000 	.word	0x40022000
 8003760:	40021400 	.word	0x40021400
 8003764:	40021c00 	.word	0x40021c00
 8003768:	40020800 	.word	0x40020800

0800376c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003774:	f7ff ff54 	bl	8003620 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003790:	2200      	movs	r2, #0
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	2036      	movs	r0, #54	; 0x36
 8003796:	f001 fb81 	bl	8004e9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800379a:	2036      	movs	r0, #54	; 0x36
 800379c:	f001 fb9a 	bl	8004ed4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_InitTick+0xa4>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_InitTick+0xa4>)
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	6413      	str	r3, [r2, #64]	; 0x40
 80037b0:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_InitTick+0xa4>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037bc:	f107 0210 	add.w	r2, r7, #16
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 f8de 	bl	8007988 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037cc:	f004 f8b4 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 80037d0:	4603      	mov	r3, r0
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_InitTick+0xa8>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	3b01      	subs	r3, #1
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_InitTick+0xac>)
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_InitTick+0xb0>)
 80037e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_InitTick+0xac>)
 80037ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_InitTick+0xac>)
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_InitTick+0xac>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_InitTick+0xac>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <HAL_InitTick+0xac>)
 8003806:	f006 feb7 	bl	800a578 <HAL_TIM_Base_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003810:	4806      	ldr	r0, [pc, #24]	; (800382c <HAL_InitTick+0xac>)
 8003812:	f006 ff01 	bl	800a618 <HAL_TIM_Base_Start_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3730      	adds	r7, #48	; 0x30
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	431bde83 	.word	0x431bde83
 800382c:	20009b48 	.word	0x20009b48
 8003830:	40001000 	.word	0x40001000

08003834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003838:	e7fe      	b.n	8003838 <NMI_Handler+0x4>

0800383a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800383e:	e7fe      	b.n	800383e <HardFault_Handler+0x4>

08003840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003844:	e7fe      	b.n	8003844 <MemManage_Handler+0x4>

08003846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800384a:	e7fe      	b.n	800384a <BusFault_Handler+0x4>

0800384c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <UsageFault_Handler+0x4>

08003852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <CAN1_RX0_IRQHandler+0x10>)
 8003866:	f001 f832 	bl	80048ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200099a4 	.word	0x200099a4

08003874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <TIM2_IRQHandler+0x10>)
 800387a:	f006 ff3d 	bl	800a6f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000995c 	.word	0x2000995c

08003888 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <SDIO_IRQHandler+0x10>)
 800388e:	f004 ffdf 	bl	8008850 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20009848 	.word	0x20009848

0800389c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <TIM6_DAC_IRQHandler+0x10>)
 80038a2:	f006 ff29 	bl	800a6f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20009b48 	.word	0x20009b48

080038b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA2_Stream3_IRQHandler+0x10>)
 80038b6:	f001 fc5f 	bl	8005178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20008ef0 	.word	0x20008ef0

080038c4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <CAN2_RX1_IRQHandler+0x10>)
 80038ca:	f001 f800 	bl	80048ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200095a4 	.word	0x200095a4

080038d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA2_Stream6_IRQHandler+0x10>)
 80038de:	f001 fc4b 	bl	8005178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200097e4 	.word	0x200097e4

080038ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <LTDC_IRQHandler+0x10>)
 80038f2:	f003 faa3 	bl	8006e3c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200094b4 	.word	0x200094b4

08003900 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <DMA2D_IRQHandler+0x10>)
 8003906:	f001 fef6 	bl	80056f6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	2000991c 	.word	0x2000991c

08003914 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <DSI_IRQHandler+0x10>)
 800391a:	f002 fa66 	bl	8005dea <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20009490 	.word	0x20009490

08003928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <SystemInit+0x20>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <SystemInit+0x20>)
 8003934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <TimeCounter_AddDecisecond>:

#include <timecounter.h>

/*** TIME ADDING ***/
void TimeCounter_AddDecisecond(TimeCounter *TimeCounter)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	TimeCounter->Deciseconds++;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	795b      	ldrb	r3, [r3, #5]
 8003958:	3301      	adds	r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	715a      	strb	r2, [r3, #5]
	TimeCounter->Deciseconds %= 10;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	795a      	ldrb	r2, [r3, #5]
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <TimeCounter_AddDecisecond+0xe0>)
 8003966:	fba3 1302 	umull	r1, r3, r3, r2
 800396a:	08d9      	lsrs	r1, r3, #3
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	715a      	strb	r2, [r3, #5]
	if(TimeCounter->Deciseconds == 0)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	795b      	ldrb	r3, [r3, #5]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d14d      	bne.n	8003a20 <TimeCounter_AddDecisecond+0xd4>
	{/* If you are inside here, Seconds++ */
		TimeCounter->Seconds++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	3301      	adds	r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	711a      	strb	r2, [r3, #4]
		TimeCounter->Seconds %= 60;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	791a      	ldrb	r2, [r3, #4]
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <TimeCounter_AddDecisecond+0xe4>)
 8003996:	fba3 1302 	umull	r1, r3, r3, r2
 800399a:	0959      	lsrs	r1, r3, #5
 800399c:	460b      	mov	r3, r1
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a5b      	subs	r3, r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	711a      	strb	r2, [r3, #4]
		if(TimeCounter->Seconds == 0)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	791b      	ldrb	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d135      	bne.n	8003a20 <TimeCounter_AddDecisecond+0xd4>
		{
			TimeCounter->Minutes++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	78db      	ldrb	r3, [r3, #3]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	70da      	strb	r2, [r3, #3]
			TimeCounter->Minutes %= 60;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	78da      	ldrb	r2, [r3, #3]
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <TimeCounter_AddDecisecond+0xe4>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	0959      	lsrs	r1, r3, #5
 80039cc:	460b      	mov	r3, r1
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a5b      	subs	r3, r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	70da      	strb	r2, [r3, #3]
			if(TimeCounter->Minutes == 0)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	78db      	ldrb	r3, [r3, #3]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11d      	bne.n	8003a20 <TimeCounter_AddDecisecond+0xd4>
			{
				TimeCounter->Hours++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	789b      	ldrb	r3, [r3, #2]
 80039e8:	3301      	adds	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	709a      	strb	r2, [r3, #2]
				TimeCounter->Hours %= 24;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	789a      	ldrb	r2, [r3, #2]
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <TimeCounter_AddDecisecond+0xe8>)
 80039f6:	fba3 1302 	umull	r1, r3, r3, r2
 80039fa:	0919      	lsrs	r1, r3, #4
 80039fc:	460b      	mov	r3, r1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	440b      	add	r3, r1
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	709a      	strb	r2, [r3, #2]
				if(TimeCounter->Hours == 0)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	789b      	ldrb	r3, [r3, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <TimeCounter_AddDecisecond+0xd4>
				{
					TimeCounter->Days++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	cccccccd 	.word	0xcccccccd
 8003a30:	88888889 	.word	0x88888889
 8003a34:	aaaaaaab 	.word	0xaaaaaaab

08003a38 <TimeCounter_GetTotalHours>:

/*** TIME READER ***/
uint32_t TimeCounter_GetTotalHours(TimeCounter *TimeCounter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	return TimeCounter->Hours + (TimeCounter->Days*24);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	4619      	mov	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a6a:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a70:	e002      	b.n	8003a78 <LoopCopyDataInit>

08003a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a76:	3304      	adds	r3, #4

08003a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a7c:	d3f9      	bcc.n	8003a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7e:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a80:	4c0b      	ldr	r4, [pc, #44]	; (8003ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a84:	e001      	b.n	8003a8a <LoopFillZerobss>

08003a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a88:	3204      	adds	r2, #4

08003a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a8c:	d3fb      	bcc.n	8003a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a8e:	f7ff ff4b 	bl	8003928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a92:	f00b fce3 	bl	800f45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a96:	f7fc ffef 	bl	8000a78 <main>
  bx  lr    
 8003a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003aa8:	0800f9c4 	.word	0x0800f9c4
  ldr r2, =_sbss
 8003aac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003ab0:	2000a04c 	.word	0x2000a04c

08003ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ab4:	e7fe      	b.n	8003ab4 <ADC_IRQHandler>
	...

08003ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_Init+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <HAL_Init+0x40>)
 8003ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_Init+0x40>)
 8003ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_Init+0x40>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <HAL_Init+0x40>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f001 f9d0 	bl	8004e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff fe4a 	bl	8003780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aec:	f7ff f8d8 	bl	8002ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023c00 	.word	0x40023c00

08003afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_IncTick+0x20>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_IncTick+0x24>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_IncTick+0x24>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000008 	.word	0x20000008
 8003b20:	20009b90 	.word	0x20009b90

08003b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return uwTick;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_GetTick+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20009b90 	.word	0x20009b90

08003b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff ffee 	bl	8003b24 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d005      	beq.n	8003b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_Delay+0x44>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b62:	bf00      	nop
 8003b64:	f7ff ffde 	bl	8003b24 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8f7      	bhi.n	8003b64 <HAL_Delay+0x28>
  {
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e033      	b.n	8003c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff f8a8 	bl	8002cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d118      	bne.n	8003bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bca:	f023 0302 	bic.w	r3, r3, #2
 8003bce:	f043 0202 	orr.w	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f94a 	bl	8003e70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bf2:	e001      	b.n	8003bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e113      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x244>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d925      	bls.n	8003c84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68d9      	ldr	r1, [r3, #12]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3b1e      	subs	r3, #30
 8003c4e:	2207      	movs	r2, #7
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43da      	mvns	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68d9      	ldr	r1, [r3, #12]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	4603      	mov	r3, r0
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4403      	add	r3, r0
 8003c76:	3b1e      	subs	r3, #30
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	e022      	b.n	8003cca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6919      	ldr	r1, [r3, #16]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	2207      	movs	r2, #7
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6919      	ldr	r1, [r3, #16]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4403      	add	r3, r0
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d824      	bhi.n	8003d1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3b05      	subs	r3, #5
 8003ce4:	221f      	movs	r2, #31
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43da      	mvns	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3b05      	subs	r3, #5
 8003d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
 8003d1a:	e04c      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d824      	bhi.n	8003d6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	3b23      	subs	r3, #35	; 0x23
 8003d36:	221f      	movs	r2, #31
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	400a      	ands	r2, r1
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b23      	subs	r3, #35	; 0x23
 8003d60:	fa00 f203 	lsl.w	r2, r0, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d6c:	e023      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3b41      	subs	r3, #65	; 0x41
 8003d80:	221f      	movs	r2, #31
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	3b41      	subs	r3, #65	; 0x41
 8003daa:	fa00 f203 	lsl.w	r2, r0, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_ADC_ConfigChannel+0x250>)
 8003db8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a28      	ldr	r2, [pc, #160]	; (8003e60 <HAL_ADC_ConfigChannel+0x254>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10f      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x1d8>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b12      	cmp	r3, #18
 8003dca:	d10b      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_ADC_ConfigChannel+0x254>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d12b      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x23a>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_ADC_ConfigChannel+0x258>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0x1f4>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d122      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_ADC_ConfigChannel+0x258>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d111      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_ADC_ConfigChannel+0x25c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <HAL_ADC_ConfigChannel+0x260>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	0c9a      	lsrs	r2, r3, #18
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f9      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40012300 	.word	0x40012300
 8003e60:	40012000 	.word	0x40012000
 8003e64:	10000012 	.word	0x10000012
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	431bde83 	.word	0x431bde83

08003e70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <ADC_Init+0x1f0>)
 8003e7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	4a58      	ldr	r2, [pc, #352]	; (8004064 <ADC_Init+0x1f4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6899      	ldr	r1, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e00f      	b.n	8003f6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0202 	bic.w	r2, r2, #2
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7e1b      	ldrb	r3, [r3, #24]
 8003f88:	005a      	lsls	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01b      	beq.n	8003fd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003faa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	035a      	lsls	r2, r3, #13
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e007      	b.n	8003fe4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	051a      	lsls	r2, r3, #20
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6899      	ldr	r1, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004026:	025a      	lsls	r2, r3, #9
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	029a      	lsls	r2, r3, #10
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012300 	.word	0x40012300
 8004064:	0f000001 	.word	0x0f000001

08004068 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0ed      	b.n	8004256 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fe58 	bl	8002d3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800409c:	f7ff fd42 	bl	8003b24 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040a2:	e012      	b.n	80040ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040a4:	f7ff fd3e 	bl	8003b24 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b0a      	cmp	r3, #10
 80040b0:	d90b      	bls.n	80040ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2205      	movs	r2, #5
 80040c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0c5      	b.n	8004256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0e5      	beq.n	80040a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0202 	bic.w	r2, r2, #2
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7ff fd1c 	bl	8003b24 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040ee:	e012      	b.n	8004116 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040f0:	f7ff fd18 	bl	8003b24 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b0a      	cmp	r3, #10
 80040fc:	d90b      	bls.n	8004116 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2205      	movs	r2, #5
 800410e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e09f      	b.n	8004256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7e1b      	ldrb	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e007      	b.n	800414e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7e5b      	ldrb	r3, [r3, #25]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d108      	bne.n	8004168 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e007      	b.n	8004178 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004176:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7e9b      	ldrb	r3, [r3, #26]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d108      	bne.n	8004192 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0220 	orr.w	r2, r2, #32
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e007      	b.n	80041a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0220 	bic.w	r2, r2, #32
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7edb      	ldrb	r3, [r3, #27]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d108      	bne.n	80041bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0210 	bic.w	r2, r2, #16
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e007      	b.n	80041cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0210 	orr.w	r2, r2, #16
 80041ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7f1b      	ldrb	r3, [r3, #28]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d108      	bne.n	80041e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e007      	b.n	80041f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0208 	bic.w	r2, r2, #8
 80041f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7f5b      	ldrb	r3, [r3, #29]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d108      	bne.n	8004210 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0204 	orr.w	r2, r2, #4
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e007      	b.n	8004220 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	ea42 0103 	orr.w	r1, r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004276:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d003      	beq.n	8004286 <HAL_CAN_ConfigFilter+0x26>
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f040 80be 	bne.w	8004402 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004286:	4b65      	ldr	r3, [pc, #404]	; (800441c <HAL_CAN_ConfigFilter+0x1bc>)
 8004288:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	431a      	orrs	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	401a      	ands	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d123      	bne.n	8004330 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800430a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3248      	adds	r2, #72	; 0x48
 8004310:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004324:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	3348      	adds	r3, #72	; 0x48
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d122      	bne.n	800437e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004358:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3248      	adds	r2, #72	; 0x48
 800435e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004372:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	3348      	adds	r3, #72	; 0x48
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43db      	mvns	r3, r3
 8004390:	401a      	ands	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004398:	e007      	b.n	80043aa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	401a      	ands	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043c4:	e007      	b.n	80043d6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043f4:	f023 0201 	bic.w	r2, r3, #1
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e006      	b.n	8004410 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40006400 	.word	0x40006400

08004420 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d12e      	bne.n	8004492 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444c:	f7ff fb6a 	bl	8003b24 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004452:	e012      	b.n	800447a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004454:	f7ff fb66 	bl	8003b24 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b0a      	cmp	r3, #10
 8004460:	d90b      	bls.n	800447a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2205      	movs	r2, #5
 8004472:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e012      	b.n	80044a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e006      	b.n	80044a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d003      	beq.n	80044d4 <HAL_CAN_AddTxMessage+0x2c>
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	f040 80b8 	bne.w	8004644 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a0 	beq.w	8004634 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	0e1b      	lsrs	r3, r3, #24
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d907      	bls.n	8004514 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e09e      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004514:	2201      	movs	r2, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	409a      	lsls	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	6809      	ldr	r1, [r1, #0]
 8004534:	431a      	orrs	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3318      	adds	r3, #24
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	440b      	add	r3, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e00f      	b.n	8004562 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800454c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004556:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3318      	adds	r3, #24
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	440b      	add	r3, r1
 8004560:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	3318      	adds	r3, #24
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	440b      	add	r3, r1
 8004572:	3304      	adds	r3, #4
 8004574:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	7d1b      	ldrb	r3, [r3, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d111      	bne.n	80045a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3318      	adds	r3, #24
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3318      	adds	r3, #24
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	440b      	add	r3, r1
 800459e:	3304      	adds	r3, #4
 80045a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3307      	adds	r3, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	061a      	lsls	r2, r3, #24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3306      	adds	r3, #6
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3305      	adds	r3, #5
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	4313      	orrs	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	3204      	adds	r2, #4
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	6811      	ldr	r1, [r2, #0]
 80045ca:	ea43 0200 	orr.w	r2, r3, r0
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	440b      	add	r3, r1
 80045d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3303      	adds	r3, #3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	061a      	lsls	r2, r3, #24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3302      	adds	r3, #2
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3301      	adds	r3, #1
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4313      	orrs	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	4610      	mov	r0, r2
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6811      	ldr	r1, [r2, #0]
 8004600:	ea43 0200 	orr.w	r2, r3, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	440b      	add	r3, r1
 800460a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800460e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3318      	adds	r3, #24
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	6811      	ldr	r1, [r2, #0]
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3318      	adds	r3, #24
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	440b      	add	r3, r1
 800462e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e00e      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e006      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004672:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d003      	beq.n	8004682 <HAL_CAN_GetRxMessage+0x24>
 800467a:	7dfb      	ldrb	r3, [r7, #23]
 800467c:	2b02      	cmp	r3, #2
 800467e:	f040 80f3 	bne.w	8004868 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e0e7      	b.n	8004876 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d8      	b.n	8004876 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	331b      	adds	r3, #27
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	4413      	add	r3, r2
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0204 	and.w	r2, r3, #4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10c      	bne.n	80046fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	331b      	adds	r3, #27
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0d5b      	lsrs	r3, r3, #21
 80046f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	331b      	adds	r3, #27
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	4413      	add	r3, r2
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	331b      	adds	r3, #27
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	4413      	add	r3, r2
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0202 	and.w	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	331b      	adds	r3, #27
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	4413      	add	r3, r2
 8004736:	3304      	adds	r3, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	331b      	adds	r3, #27
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b2da      	uxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	331b      	adds	r3, #27
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0a1a      	lsrs	r2, r3, #8
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0c1a      	lsrs	r2, r3, #16
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	3302      	adds	r3, #2
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0e1a      	lsrs	r2, r3, #24
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	3303      	adds	r3, #3
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	0a1a      	lsrs	r2, r3, #8
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	3305      	adds	r3, #5
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	4413      	add	r3, r2
 8004812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0c1a      	lsrs	r2, r3, #16
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	3306      	adds	r3, #6
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	4413      	add	r3, r2
 800482c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	0e1a      	lsrs	r2, r3, #24
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	3307      	adds	r3, #7
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0220 	orr.w	r2, r2, #32
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e007      	b.n	8004864 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	e006      	b.n	8004876 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004892:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d002      	beq.n	80048a0 <HAL_CAN_ActivateNotification+0x1e>
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d109      	bne.n	80048b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6959      	ldr	r1, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e006      	b.n	80048c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b08a      	sub	sp, #40	; 0x28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d07c      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f983 	bl	8004c3c <HAL_CAN_TxMailbox0CompleteCallback>
 8004936:	e016      	b.n	8004966 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e00c      	b.n	8004966 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
 800495e:	e002      	b.n	8004966 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f989 	bl	8004c78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d024      	beq.n	80049ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004978:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f963 	bl	8004c50 <HAL_CAN_TxMailbox1CompleteCallback>
 800498a:	e016      	b.n	80049ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
 800499e:	e00c      	b.n	80049ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e002      	b.n	80049ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f969 	bl	8004c8c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d024      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f943 	bl	8004c64 <HAL_CAN_TxMailbox2CompleteCallback>
 80049de:	e016      	b.n	8004a0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	e00c      	b.n	8004a0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	e002      	b.n	8004a0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f949 	bl	8004ca0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f93a 	bl	8004cc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f921 	bl	8004cb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00c      	beq.n	8004a96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2210      	movs	r2, #16
 8004a94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2208      	movs	r2, #8
 8004ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f912 	bl	8004cdc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc ff81 	bl	80019d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8fc 	bl	8004cf0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8f5 	bl	8004d04 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d07b      	beq.n	8004c1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d072      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	f043 0304 	orr.w	r3, r3, #4
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d043      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d03e      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b9c:	2b60      	cmp	r3, #96	; 0x60
 8004b9e:	d02b      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x32a>
 8004ba0:	2b60      	cmp	r3, #96	; 0x60
 8004ba2:	d82e      	bhi.n	8004c02 <HAL_CAN_IRQHandler+0x334>
 8004ba4:	2b50      	cmp	r3, #80	; 0x50
 8004ba6:	d022      	beq.n	8004bee <HAL_CAN_IRQHandler+0x320>
 8004ba8:	2b50      	cmp	r3, #80	; 0x50
 8004baa:	d82a      	bhi.n	8004c02 <HAL_CAN_IRQHandler+0x334>
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d019      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x316>
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d826      	bhi.n	8004c02 <HAL_CAN_IRQHandler+0x334>
 8004bb4:	2b30      	cmp	r3, #48	; 0x30
 8004bb6:	d010      	beq.n	8004bda <HAL_CAN_IRQHandler+0x30c>
 8004bb8:	2b30      	cmp	r3, #48	; 0x30
 8004bba:	d822      	bhi.n	8004c02 <HAL_CAN_IRQHandler+0x334>
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d002      	beq.n	8004bc6 <HAL_CAN_IRQHandler+0x2f8>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d005      	beq.n	8004bd0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004bc4:	e01d      	b.n	8004c02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	f043 0308 	orr.w	r3, r3, #8
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bce:	e019      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f043 0310 	orr.w	r3, r3, #16
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bd8:	e014      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004be2:	e00f      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bec:	e00a      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bf6:	e005      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c00:	e000      	b.n	8004c04 <HAL_CAN_IRQHandler+0x336>
            break;
 8004c02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f872 	bl	8004d18 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c34:	bf00      	nop
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <__NVIC_SetPriorityGrouping+0x44>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d5e:	4a04      	ldr	r2, [pc, #16]	; (8004d70 <__NVIC_SetPriorityGrouping+0x44>)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	60d3      	str	r3, [r2, #12]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <__NVIC_GetPriorityGrouping+0x18>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 0307 	and.w	r3, r3, #7
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	db0b      	blt.n	8004dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004da2:	79fb      	ldrb	r3, [r7, #7]
 8004da4:	f003 021f 	and.w	r2, r3, #31
 8004da8:	4907      	ldr	r1, [pc, #28]	; (8004dc8 <__NVIC_EnableIRQ+0x38>)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2001      	movs	r0, #1
 8004db2:	fa00 f202 	lsl.w	r2, r0, r2
 8004db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000e100 	.word	0xe000e100

08004dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	db0a      	blt.n	8004df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	490c      	ldr	r1, [pc, #48]	; (8004e18 <__NVIC_SetPriority+0x4c>)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	440b      	add	r3, r1
 8004df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df4:	e00a      	b.n	8004e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4908      	ldr	r1, [pc, #32]	; (8004e1c <__NVIC_SetPriority+0x50>)
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	3b04      	subs	r3, #4
 8004e04:	0112      	lsls	r2, r2, #4
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	440b      	add	r3, r1
 8004e0a:	761a      	strb	r2, [r3, #24]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	e000e100 	.word	0xe000e100
 8004e1c:	e000ed00 	.word	0xe000ed00

08004e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b089      	sub	sp, #36	; 0x24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f1c3 0307 	rsb	r3, r3, #7
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	bf28      	it	cs
 8004e3e:	2304      	movcs	r3, #4
 8004e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3304      	adds	r3, #4
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d902      	bls.n	8004e50 <NVIC_EncodePriority+0x30>
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3b03      	subs	r3, #3
 8004e4e:	e000      	b.n	8004e52 <NVIC_EncodePriority+0x32>
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e54:	f04f 32ff 	mov.w	r2, #4294967295
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43da      	mvns	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	401a      	ands	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e68:	f04f 31ff 	mov.w	r1, #4294967295
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	43d9      	mvns	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e78:	4313      	orrs	r3, r2
         );
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3724      	adds	r7, #36	; 0x24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff4c 	bl	8004d2c <__NVIC_SetPriorityGrouping>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eae:	f7ff ff61 	bl	8004d74 <__NVIC_GetPriorityGrouping>
 8004eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	6978      	ldr	r0, [r7, #20]
 8004eba:	f7ff ffb1 	bl	8004e20 <NVIC_EncodePriority>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff ff80 	bl	8004dcc <__NVIC_SetPriority>
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff ff54 	bl	8004d90 <__NVIC_EnableIRQ>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00e      	b.n	8004f20 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	795b      	ldrb	r3, [r3, #5]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd ffc4 	bl	8002ea0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f34:	f7fe fdf6 	bl	8003b24 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e099      	b.n	8005078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f64:	e00f      	b.n	8004f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f66:	f7fe fddd 	bl	8003b24 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b05      	cmp	r3, #5
 8004f72:	d908      	bls.n	8004f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e078      	b.n	8005078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e8      	bne.n	8004f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4b38      	ldr	r3, [pc, #224]	; (8005080 <HAL_DMA_Init+0x158>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d107      	bne.n	8004ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0307 	bic.w	r3, r3, #7
 8005006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b04      	cmp	r3, #4
 8005018:	d117      	bne.n	800504a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa9d 	bl	800556c <DMA_CheckFifoParam>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005046:	2301      	movs	r3, #1
 8005048:	e016      	b.n	8005078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa54 	bl	8005500 <DMA_CalcBaseAndBitshift>
 8005058:	4603      	mov	r3, r0
 800505a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	223f      	movs	r2, #63	; 0x3f
 8005062:	409a      	lsls	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	f010803f 	.word	0xf010803f

08005084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_DMA_Start_IT+0x26>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e040      	b.n	800512c <HAL_DMA_Start_IT+0xa8>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d12f      	bne.n	800511e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f9e6 	bl	80054a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050dc:	223f      	movs	r2, #63	; 0x3f
 80050de:	409a      	lsls	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0216 	orr.w	r2, r2, #22
 80050f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e005      	b.n	800512a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800512a:	7dfb      	ldrb	r3, [r7, #23]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d004      	beq.n	8005152 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e00c      	b.n	800516c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005184:	4b92      	ldr	r3, [pc, #584]	; (80053d0 <HAL_DMA_IRQHandler+0x258>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a92      	ldr	r2, [pc, #584]	; (80053d4 <HAL_DMA_IRQHandler+0x25c>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a2:	2208      	movs	r2, #8
 80051a4:	409a      	lsls	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01a      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d013      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	2208      	movs	r2, #8
 80051d2:	409a      	lsls	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d012      	beq.n	800521a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	2201      	movs	r2, #1
 8005208:	409a      	lsls	r2, r3
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	2204      	movs	r2, #4
 8005220:	409a      	lsls	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d012      	beq.n	8005250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00b      	beq.n	8005250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	2204      	movs	r2, #4
 800523e:	409a      	lsls	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	2210      	movs	r2, #16
 8005256:	409a      	lsls	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d043      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d03c      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005272:	2210      	movs	r2, #16
 8005274:	409a      	lsls	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d018      	beq.n	80052ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d024      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
 80052a6:	e01f      	b.n	80052e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
 80052b8:	e016      	b.n	80052e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d107      	bne.n	80052d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0208 	bic.w	r2, r2, #8
 80052d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ec:	2220      	movs	r2, #32
 80052ee:	409a      	lsls	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 808e 	beq.w	8005416 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8086 	beq.w	8005416 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	2220      	movs	r2, #32
 8005310:	409a      	lsls	r2, r3
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b05      	cmp	r3, #5
 8005320:	d136      	bne.n	8005390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0216 	bic.w	r2, r2, #22
 8005330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_DMA_IRQHandler+0x1da>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0208 	bic.w	r2, r2, #8
 8005360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	223f      	movs	r2, #63	; 0x3f
 8005368:	409a      	lsls	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07d      	beq.n	8005482 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
        }
        return;
 800538e:	e078      	b.n	8005482 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01c      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d108      	bne.n	80053be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d030      	beq.n	8005416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
 80053bc:	e02b      	b.n	8005416 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d027      	beq.n	8005416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
 80053ce:	e022      	b.n	8005416 <HAL_DMA_IRQHandler+0x29e>
 80053d0:	20000000 	.word	0x20000000
 80053d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0210 	bic.w	r2, r2, #16
 80053f4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	2b00      	cmp	r3, #0
 800541c:	d032      	beq.n	8005484 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d022      	beq.n	8005470 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2205      	movs	r2, #5
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3301      	adds	r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	429a      	cmp	r2, r3
 800544c:	d307      	bcc.n	800545e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f2      	bne.n	8005442 <HAL_DMA_IRQHandler+0x2ca>
 800545c:	e000      	b.n	8005460 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800545e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
 8005480:	e000      	b.n	8005484 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005482:	bf00      	nop
    }
  }
}
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop

0800548c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d108      	bne.n	80054e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054e2:	e007      	b.n	80054f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	60da      	str	r2, [r3, #12]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	3b10      	subs	r3, #16
 8005510:	4a14      	ldr	r2, [pc, #80]	; (8005564 <DMA_CalcBaseAndBitshift+0x64>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <DMA_CalcBaseAndBitshift+0x68>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d909      	bls.n	8005542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	659a      	str	r2, [r3, #88]	; 0x58
 8005540:	e007      	b.n	8005552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	aaaaaaab 	.word	0xaaaaaaab
 8005568:	0800f938 	.word	0x0800f938

0800556c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11f      	bne.n	80055c6 <DMA_CheckFifoParam+0x5a>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d856      	bhi.n	800563a <DMA_CheckFifoParam+0xce>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <DMA_CheckFifoParam+0x28>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b7 	.word	0x080055b7
 800559c:	080055a5 	.word	0x080055a5
 80055a0:	0800563b 	.word	0x0800563b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d046      	beq.n	800563e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b4:	e043      	b.n	800563e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055be:	d140      	bne.n	8005642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c4:	e03d      	b.n	8005642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	d121      	bne.n	8005614 <DMA_CheckFifoParam+0xa8>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d837      	bhi.n	8005646 <DMA_CheckFifoParam+0xda>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <DMA_CheckFifoParam+0x70>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055f3 	.word	0x080055f3
 80055e4:	080055ed 	.word	0x080055ed
 80055e8:	08005605 	.word	0x08005605
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e030      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d025      	beq.n	800564a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005602:	e022      	b.n	800564a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800560c:	d11f      	bne.n	800564e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005612:	e01c      	b.n	800564e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d903      	bls.n	8005622 <DMA_CheckFifoParam+0xb6>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d003      	beq.n	8005628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005620:	e018      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
      break;
 8005626:	e015      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      break;
 8005638:	e00b      	b.n	8005652 <DMA_CheckFifoParam+0xe6>
      break;
 800563a:	bf00      	nop
 800563c:	e00a      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 800563e:	bf00      	nop
 8005640:	e008      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005642:	bf00      	nop
 8005644:	e006      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;   
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
      break;
 8005652:	bf00      	nop
    }
  } 
  
  return status; 
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e03b      	b.n	80056ee <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fd fc2a 	bl	8002ee4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	f023 0107 	bic.w	r1, r3, #7
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68d1      	ldr	r1, [r2, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	430b      	orrs	r3, r1
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d026      	beq.n	8005766 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d021      	beq.n	8005766 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005730:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d026      	beq.n	80057be <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d021      	beq.n	80057be <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005788:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2220      	movs	r2, #32
 8005790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d026      	beq.n	8005816 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d021      	beq.n	8005816 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2208      	movs	r2, #8
 80057e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	f043 0204 	orr.w	r2, r3, #4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2204      	movs	r2, #4
 80057fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2204      	movs	r2, #4
 8005840:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f853 	bl	80058ee <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d024      	beq.n	800589c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01f      	beq.n	800589c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800586a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2202      	movs	r2, #2
 8005872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01f      	beq.n	80058e6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01a      	beq.n	80058e6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058be:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2210      	movs	r2, #16
 80058c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f80e 	bl	8005902 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_DMA2D_ConfigLayer+0x20>
 8005934:	2302      	movs	r3, #2
 8005936:	e079      	b.n	8005a2c <HAL_DMA2D_ConfigLayer+0x114>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	3318      	adds	r3, #24
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005962:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <HAL_DMA2D_ConfigLayer+0x120>)
 8005964:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b0a      	cmp	r3, #10
 800596c:	d003      	beq.n	8005976 <HAL_DMA2D_ConfigLayer+0x5e>
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b09      	cmp	r3, #9
 8005974:	d107      	bne.n	8005986 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e005      	b.n	8005992 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d120      	bne.n	80059da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	ea02 0103 	and.w	r1, r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b0a      	cmp	r3, #10
 80059c0:	d003      	beq.n	80059ca <HAL_DMA2D_ConfigLayer+0xb2>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b09      	cmp	r3, #9
 80059c8:	d127      	bne.n	8005a1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
 80059d8:	e01f      	b.n	8005a1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	ea02 0103 	and.w	r1, r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b0a      	cmp	r3, #10
 8005a02:	d003      	beq.n	8005a0c <HAL_DMA2D_ConfigLayer+0xf4>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b09      	cmp	r3, #9
 8005a0a:	d106      	bne.n	8005a1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a18:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	ff03000f 	.word	0xff03000f

08005a3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e108      	b.n	8005c62 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7c5b      	ldrb	r3, [r3, #17]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fd fa6a 	bl	8002f34 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2203      	movs	r2, #3
 8005a64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005a7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a8e:	f7fe f849 	bl	8003b24 <HAL_GetTick>
 8005a92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005a94:	e009      	b.n	8005aaa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005a96:	f7fe f845 	bl	8003b24 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa4:	d901      	bls.n	8005aaa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e0db      	b.n	8005c62 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ed      	beq.n	8005a96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8005aca:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8005ace:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	02db      	lsls	r3, r3, #11
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b22:	f7fd ffff 	bl	8003b24 <HAL_GetTick>
 8005b26:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005b28:	e009      	b.n	8005b3e <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005b2a:	f7fd fffb 	bl	8003b24 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b38:	d901      	bls.n	8005b3e <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e091      	b.n	8005c62 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ed      	beq.n	8005b2a <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0206 	orr.w	r2, r2, #6
 8005b5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0203 	bic.w	r2, r2, #3
 8005b72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0203 	bic.w	r2, r2, #3
 8005ba0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bc8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6899      	ldr	r1, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_DSI_Init+0x1ae>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	e000      	b.n	8005bec <HAL_DSI_Init+0x1b0>
 8005bea:	2301      	movs	r3, #1
 8005bec:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_DSI_Init+0x230>)
 8005bf2:	fb02 f203 	mul.w	r2, r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005c22:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	003d0900 	.word	0x003d0900

08005c70 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7c1b      	ldrb	r3, [r3, #16]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_DSI_ConfigErrorMonitor+0x16>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0ab      	b.n	8005dde <HAL_DSI_ConfigErrorMonitor+0x16e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005cc0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005cc4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8005ce2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0202 	orr.w	r2, r2, #2
 8005d1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 020c 	orr.w	r2, r2, #12
 8005d3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0210 	orr.w	r2, r2, #16
 8005d5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0220 	orr.w	r2, r2, #32
 8005d78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005db4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8005dd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8ad 	bl	8005f7c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f89f 	bl	8005f90 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 808c 	beq.w	8005f74 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005e64:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e7c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f043 0201 	orr.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f043 0202 	orr.w	r2, r3, #2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f043 0208 	orr.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 030c 	and.w	r3, r3, #12
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f818 	bl	8005fa4 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7c1b      	ldrb	r3, [r3, #16]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_DSI_SetGenericVCID+0x16>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e016      	b.n	8005ffc <HAL_DSI_SetGenericVCID+0x44>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0203 	bic.w	r2, r2, #3
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800601a:	2302      	movs	r3, #2
 800601c:	e0c5      	b.n	80061aa <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0203 	bic.w	r2, r2, #3
 800606a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68d9      	ldr	r1, [r3, #12]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0207 	bic.w	r2, r2, #7
 800608c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6959      	ldr	r1, [r3, #20]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	431a      	orrs	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 020f 	bic.w	r2, r2, #15
 80060ba:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6919      	ldr	r1, [r3, #16]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 020e 	bic.w	r2, r2, #14
 80060de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	005a      	lsls	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800612c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	431a      	orrs	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0202 	orr.w	r2, r2, #2
 800619e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7c1b      	ldrb	r3, [r3, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_DSI_ConfigCommand+0x16>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e049      	b.n	8006262 <HAL_DSI_ConfigCommand+0xaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b24      	ldr	r3, [pc, #144]	; (8006270 <HAL_DSI_ConfigCommand+0xb8>)
 80061e0:	400b      	ands	r3, r1
 80061e2:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80061f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80061f8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80061fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8006204:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800620a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8006210:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8006216:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800621c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8006222:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8006228:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800622e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0202 	bic.w	r2, r2, #2
 8006246:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	fef080ff 	.word	0xfef080ff

08006274 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7c1b      	ldrb	r3, [r3, #16]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_DSI_ConfigFlowControl+0x16>
 8006286:	2302      	movs	r3, #2
 8006288:	e016      	b.n	80062b8 <HAL_DSI_ConfigFlowControl+0x44>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 021f 	bic.w	r2, r2, #31
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7c1b      	ldrb	r3, [r3, #16]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_DSI_ConfigPhyTimer+0x16>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e058      	b.n	800638c <HAL_DSI_ConfigPhyTimer+0xc8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bf38      	it	cc
 80062ec:	4613      	movcc	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8006300:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	041a      	lsls	r2, r3, #16
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800632e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	041b      	lsls	r3, r3, #16
 8006344:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006368:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	021a      	lsls	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_DSI_ConfigHostTimeouts+0x16>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e0b4      	b.n	8006518 <HAL_DSI_ConfigHostTimeouts+0x180>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80063c2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6899      	ldr	r1, [r3, #8]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b292      	uxth	r2, r2
 80063e4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	041a      	lsls	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	041b      	lsls	r3, r3, #16
 8006408:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7c1b      	ldrb	r3, [r3, #16]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8006536:	2302      	movs	r3, #2
 8006538:	e01b      	b.n	8006572 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006550:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	065a      	lsls	r2, r3, #25
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e177      	b.n	800688c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800659c:	2201      	movs	r2, #1
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	f040 8166 	bne.w	8006886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d005      	beq.n	80065d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d130      	bne.n	8006634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	2203      	movs	r2, #3
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006608:	2201      	movs	r2, #1
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 0201 	and.w	r2, r3, #1
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	2b03      	cmp	r3, #3
 800663e:	d017      	beq.n	8006670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d123      	bne.n	80066c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	08da      	lsrs	r2, r3, #3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3208      	adds	r2, #8
 8006684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	220f      	movs	r2, #15
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	08da      	lsrs	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3208      	adds	r2, #8
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	2203      	movs	r2, #3
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 0203 	and.w	r2, r3, #3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80c0 	beq.w	8006886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4b66      	ldr	r3, [pc, #408]	; (80068a4 <HAL_GPIO_Init+0x324>)
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	4a65      	ldr	r2, [pc, #404]	; (80068a4 <HAL_GPIO_Init+0x324>)
 8006710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006714:	6453      	str	r3, [r2, #68]	; 0x44
 8006716:	4b63      	ldr	r3, [pc, #396]	; (80068a4 <HAL_GPIO_Init+0x324>)
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006722:	4a61      	ldr	r2, [pc, #388]	; (80068a8 <HAL_GPIO_Init+0x328>)
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	089b      	lsrs	r3, r3, #2
 8006728:	3302      	adds	r3, #2
 800672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	220f      	movs	r2, #15
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_GPIO_Init+0x32c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d037      	beq.n	80067be <HAL_GPIO_Init+0x23e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a57      	ldr	r2, [pc, #348]	; (80068b0 <HAL_GPIO_Init+0x330>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d031      	beq.n	80067ba <HAL_GPIO_Init+0x23a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <HAL_GPIO_Init+0x334>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02b      	beq.n	80067b6 <HAL_GPIO_Init+0x236>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a55      	ldr	r2, [pc, #340]	; (80068b8 <HAL_GPIO_Init+0x338>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d025      	beq.n	80067b2 <HAL_GPIO_Init+0x232>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a54      	ldr	r2, [pc, #336]	; (80068bc <HAL_GPIO_Init+0x33c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01f      	beq.n	80067ae <HAL_GPIO_Init+0x22e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a53      	ldr	r2, [pc, #332]	; (80068c0 <HAL_GPIO_Init+0x340>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d019      	beq.n	80067aa <HAL_GPIO_Init+0x22a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a52      	ldr	r2, [pc, #328]	; (80068c4 <HAL_GPIO_Init+0x344>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_GPIO_Init+0x226>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a51      	ldr	r2, [pc, #324]	; (80068c8 <HAL_GPIO_Init+0x348>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00d      	beq.n	80067a2 <HAL_GPIO_Init+0x222>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a50      	ldr	r2, [pc, #320]	; (80068cc <HAL_GPIO_Init+0x34c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <HAL_GPIO_Init+0x21e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a4f      	ldr	r2, [pc, #316]	; (80068d0 <HAL_GPIO_Init+0x350>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_GPIO_Init+0x21a>
 8006796:	2309      	movs	r3, #9
 8006798:	e012      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 800679a:	230a      	movs	r3, #10
 800679c:	e010      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 800679e:	2308      	movs	r3, #8
 80067a0:	e00e      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067a2:	2307      	movs	r3, #7
 80067a4:	e00c      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067a6:	2306      	movs	r3, #6
 80067a8:	e00a      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067aa:	2305      	movs	r3, #5
 80067ac:	e008      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067ae:	2304      	movs	r3, #4
 80067b0:	e006      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067b2:	2303      	movs	r3, #3
 80067b4:	e004      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e002      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <HAL_GPIO_Init+0x240>
 80067be:	2300      	movs	r3, #0
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	f002 0203 	and.w	r2, r2, #3
 80067c6:	0092      	lsls	r2, r2, #2
 80067c8:	4093      	lsls	r3, r2
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067d0:	4935      	ldr	r1, [pc, #212]	; (80068a8 <HAL_GPIO_Init+0x328>)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	3302      	adds	r3, #2
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067de:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <HAL_GPIO_Init+0x354>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006802:	4a34      	ldr	r2, [pc, #208]	; (80068d4 <HAL_GPIO_Init+0x354>)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006808:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <HAL_GPIO_Init+0x354>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	43db      	mvns	r3, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4013      	ands	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <HAL_GPIO_Init+0x354>)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006832:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <HAL_GPIO_Init+0x354>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006856:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <HAL_GPIO_Init+0x354>)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <HAL_GPIO_Init+0x354>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006880:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <HAL_GPIO_Init+0x354>)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	3301      	adds	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b0f      	cmp	r3, #15
 8006890:	f67f ae84 	bls.w	800659c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3724      	adds	r7, #36	; 0x24
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40013800 	.word	0x40013800
 80068ac:	40020000 	.word	0x40020000
 80068b0:	40020400 	.word	0x40020400
 80068b4:	40020800 	.word	0x40020800
 80068b8:	40020c00 	.word	0x40020c00
 80068bc:	40021000 	.word	0x40021000
 80068c0:	40021400 	.word	0x40021400
 80068c4:	40021800 	.word	0x40021800
 80068c8:	40021c00 	.word	0x40021c00
 80068cc:	40022000 	.word	0x40022000
 80068d0:	40022400 	.word	0x40022400
 80068d4:	40013c00 	.word	0x40013c00

080068d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	887b      	ldrh	r3, [r7, #2]
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e001      	b.n	80068fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	807b      	strh	r3, [r7, #2]
 8006914:	4613      	mov	r3, r2
 8006916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006918:	787b      	ldrb	r3, [r7, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800691e:	887a      	ldrh	r2, [r7, #2]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006924:	e003      	b.n	800692e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006926:	887b      	ldrh	r3, [r7, #2]
 8006928:	041a      	lsls	r2, r3, #16
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	619a      	str	r2, [r3, #24]
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800694c:	887a      	ldrh	r2, [r7, #2]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4013      	ands	r3, r2
 8006952:	041a      	lsls	r2, r3, #16
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	43d9      	mvns	r1, r3
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	400b      	ands	r3, r1
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	619a      	str	r2, [r3, #24]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
	...

08006970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e12b      	b.n	8006bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fc fb1c 	bl	8002fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2224      	movs	r2, #36	; 0x24
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069d4:	f000 ffb0 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 80069d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4a81      	ldr	r2, [pc, #516]	; (8006be4 <HAL_I2C_Init+0x274>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d807      	bhi.n	80069f4 <HAL_I2C_Init+0x84>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a80      	ldr	r2, [pc, #512]	; (8006be8 <HAL_I2C_Init+0x278>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bf94      	ite	ls
 80069ec:	2301      	movls	r3, #1
 80069ee:	2300      	movhi	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e006      	b.n	8006a02 <HAL_I2C_Init+0x92>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a7d      	ldr	r2, [pc, #500]	; (8006bec <HAL_I2C_Init+0x27c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	bf94      	ite	ls
 80069fc:	2301      	movls	r3, #1
 80069fe:	2300      	movhi	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e0e7      	b.n	8006bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a78      	ldr	r2, [pc, #480]	; (8006bf0 <HAL_I2C_Init+0x280>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	0c9b      	lsrs	r3, r3, #18
 8006a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a6a      	ldr	r2, [pc, #424]	; (8006be4 <HAL_I2C_Init+0x274>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d802      	bhi.n	8006a44 <HAL_I2C_Init+0xd4>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	3301      	adds	r3, #1
 8006a42:	e009      	b.n	8006a58 <HAL_I2C_Init+0xe8>
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	4a69      	ldr	r2, [pc, #420]	; (8006bf4 <HAL_I2C_Init+0x284>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	099b      	lsrs	r3, r3, #6
 8006a56:	3301      	adds	r3, #1
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	495c      	ldr	r1, [pc, #368]	; (8006be4 <HAL_I2C_Init+0x274>)
 8006a74:	428b      	cmp	r3, r1
 8006a76:	d819      	bhi.n	8006aac <HAL_I2C_Init+0x13c>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1e59      	subs	r1, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a8c:	400b      	ands	r3, r1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_I2C_Init+0x138>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1e59      	subs	r1, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa6:	e051      	b.n	8006b4c <HAL_I2C_Init+0x1dc>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	e04f      	b.n	8006b4c <HAL_I2C_Init+0x1dc>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d111      	bne.n	8006ad8 <HAL_I2C_Init+0x168>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	1e58      	subs	r0, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6859      	ldr	r1, [r3, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	440b      	add	r3, r1
 8006ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf0c      	ite	eq
 8006ad0:	2301      	moveq	r3, #1
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e012      	b.n	8006afe <HAL_I2C_Init+0x18e>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	1e58      	subs	r0, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	0099      	lsls	r1, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aee:	3301      	adds	r3, #1
 8006af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bf0c      	ite	eq
 8006af8:	2301      	moveq	r3, #1
 8006afa:	2300      	movne	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_Init+0x196>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e022      	b.n	8006b4c <HAL_I2C_Init+0x1dc>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10e      	bne.n	8006b2c <HAL_I2C_Init+0x1bc>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1e58      	subs	r0, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6859      	ldr	r1, [r3, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	440b      	add	r3, r1
 8006b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b20:	3301      	adds	r3, #1
 8006b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	e00f      	b.n	8006b4c <HAL_I2C_Init+0x1dc>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1e58      	subs	r0, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6859      	ldr	r1, [r3, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	0099      	lsls	r1, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b42:	3301      	adds	r3, #1
 8006b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	6809      	ldr	r1, [r1, #0]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6911      	ldr	r1, [r2, #16]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68d2      	ldr	r2, [r2, #12]
 8006b86:	4311      	orrs	r1, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	000186a0 	.word	0x000186a0
 8006be8:	001e847f 	.word	0x001e847f
 8006bec:	003d08ff 	.word	0x003d08ff
 8006bf0:	431bde83 	.word	0x431bde83
 8006bf4:	10624dd3 	.word	0x10624dd3

08006bf8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e034      	b.n	8006c74 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006c12:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f245 5255 	movw	r2, #21845	; 0x5555
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6892      	ldr	r2, [r2, #8]
 8006c30:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c32:	f7fc ff77 	bl	8003b24 <HAL_GetTick>
 8006c36:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c38:	e00f      	b.n	8006c5a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c3a:	f7fc ff73 	bl	8003b24 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b31      	cmp	r3, #49	; 0x31
 8006c46:	d908      	bls.n	8006c5a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e00c      	b.n	8006c74 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e8      	bne.n	8006c3a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0bf      	b.n	8006e2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fc fa04 	bl	80030d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006cde:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6999      	ldr	r1, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cf4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6899      	ldr	r1, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	; (8006e38 <HAL_LTDC_Init+0x19c>)
 8006d10:	400b      	ands	r3, r1
 8006d12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6899      	ldr	r1, [r3, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68d9      	ldr	r1, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b3e      	ldr	r3, [pc, #248]	; (8006e38 <HAL_LTDC_Init+0x19c>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68d9      	ldr	r1, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6919      	ldr	r1, [r3, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b33      	ldr	r3, [pc, #204]	; (8006e38 <HAL_LTDC_Init+0x19c>)
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6919      	ldr	r1, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6959      	ldr	r1, [r3, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <HAL_LTDC_Init+0x19c>)
 8006d9a:	400b      	ands	r3, r1
 8006d9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6959      	ldr	r1, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dc2:	021b      	lsls	r3, r3, #8
 8006dc4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0206 	orr.w	r2, r2, #6
 8006e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	f000f800 	.word	0xf000f800

08006e3c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0304 	and.w	r3, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d023      	beq.n	8006ea6 <HAL_LTDC_IRQHandler+0x6a>
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01e      	beq.n	8006ea6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2204      	movs	r2, #4
 8006e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f86f 	bl	8006f84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d023      	beq.n	8006ef8 <HAL_LTDC_IRQHandler+0xbc>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01e      	beq.n	8006ef8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0202 	bic.w	r2, r2, #2
 8006ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ed8:	f043 0202 	orr.w	r2, r3, #2
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f846 	bl	8006f84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <HAL_LTDC_IRQHandler+0xfe>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d016      	beq.n	8006f3a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2201      	movs	r2, #1
 8006f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f82f 	bl	8006f98 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <HAL_LTDC_IRQHandler+0x140>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0208 	bic.w	r2, r2, #8
 8006f5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2208      	movs	r2, #8
 8006f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f818 	bl	8006fac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_LTDC_ConfigLayer+0x1a>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e02c      	b.n	8007034 <HAL_LTDC_ConfigLayer+0x74>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2134      	movs	r1, #52	; 0x34
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	461d      	mov	r5, r3
 8007000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f811 	bl	800703c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bdb0      	pop	{r4, r5, r7, pc}

0800703c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800703c:	b480      	push	{r7}
 800703e:	b089      	sub	sp, #36	; 0x24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007058:	4413      	add	r3, r2
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	01db      	lsls	r3, r3, #7
 8007068:	4413      	add	r3, r2
 800706a:	3384      	adds	r3, #132	; 0x84
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	4611      	mov	r1, r2
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	01d2      	lsls	r2, r2, #7
 8007078:	440a      	add	r2, r1
 800707a:	3284      	adds	r2, #132	; 0x84
 800707c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007080:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	0c1b      	lsrs	r3, r3, #16
 800708e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007092:	4413      	add	r3, r2
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	01db      	lsls	r3, r3, #7
 80070a0:	440b      	add	r3, r1
 80070a2:	3384      	adds	r3, #132	; 0x84
 80070a4:	4619      	mov	r1, r3
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ba:	4413      	add	r3, r2
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	01db      	lsls	r3, r3, #7
 80070ca:	4413      	add	r3, r2
 80070cc:	3384      	adds	r3, #132	; 0x84
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	4611      	mov	r1, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	01d2      	lsls	r2, r2, #7
 80070da:	440a      	add	r2, r1
 80070dc:	3284      	adds	r2, #132	; 0x84
 80070de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80070e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f2:	4413      	add	r3, r2
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	01db      	lsls	r3, r3, #7
 8007100:	440b      	add	r3, r1
 8007102:	3384      	adds	r3, #132	; 0x84
 8007104:	4619      	mov	r1, r3
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4313      	orrs	r3, r2
 800710a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	01db      	lsls	r3, r3, #7
 8007116:	4413      	add	r3, r2
 8007118:	3384      	adds	r3, #132	; 0x84
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	4611      	mov	r1, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	01d2      	lsls	r2, r2, #7
 8007126:	440a      	add	r2, r1
 8007128:	3284      	adds	r2, #132	; 0x84
 800712a:	f023 0307 	bic.w	r3, r3, #7
 800712e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	01db      	lsls	r3, r3, #7
 800713a:	4413      	add	r3, r2
 800713c:	3384      	adds	r3, #132	; 0x84
 800713e:	461a      	mov	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	061b      	lsls	r3, r3, #24
 8007160:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	01db      	lsls	r3, r3, #7
 800716c:	4413      	add	r3, r2
 800716e:	3384      	adds	r3, #132	; 0x84
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	01db      	lsls	r3, r3, #7
 800717c:	4413      	add	r3, r2
 800717e:	3384      	adds	r3, #132	; 0x84
 8007180:	461a      	mov	r2, r3
 8007182:	2300      	movs	r3, #0
 8007184:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800718c:	461a      	mov	r2, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	431a      	orrs	r2, r3
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	431a      	orrs	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4619      	mov	r1, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	01db      	lsls	r3, r3, #7
 80071a0:	440b      	add	r3, r1
 80071a2:	3384      	adds	r3, #132	; 0x84
 80071a4:	4619      	mov	r1, r3
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	01db      	lsls	r3, r3, #7
 80071b6:	4413      	add	r3, r2
 80071b8:	3384      	adds	r3, #132	; 0x84
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	4611      	mov	r1, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	01d2      	lsls	r2, r2, #7
 80071c6:	440a      	add	r2, r1
 80071c8:	3284      	adds	r2, #132	; 0x84
 80071ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	01db      	lsls	r3, r3, #7
 80071da:	4413      	add	r3, r2
 80071dc:	3384      	adds	r3, #132	; 0x84
 80071de:	461a      	mov	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	01db      	lsls	r3, r3, #7
 80071f0:	4413      	add	r3, r2
 80071f2:	3384      	adds	r3, #132	; 0x84
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	4611      	mov	r1, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	01d2      	lsls	r2, r2, #7
 8007200:	440a      	add	r2, r1
 8007202:	3284      	adds	r2, #132	; 0x84
 8007204:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007208:	f023 0307 	bic.w	r3, r3, #7
 800720c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	6809      	ldr	r1, [r1, #0]
 800721a:	4608      	mov	r0, r1
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	01c9      	lsls	r1, r1, #7
 8007220:	4401      	add	r1, r0
 8007222:	3184      	adds	r1, #132	; 0x84
 8007224:	4313      	orrs	r3, r2
 8007226:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	01db      	lsls	r3, r3, #7
 8007232:	4413      	add	r3, r2
 8007234:	3384      	adds	r3, #132	; 0x84
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	01db      	lsls	r3, r3, #7
 8007242:	4413      	add	r3, r2
 8007244:	3384      	adds	r3, #132	; 0x84
 8007246:	461a      	mov	r2, r3
 8007248:	2300      	movs	r3, #0
 800724a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	01db      	lsls	r3, r3, #7
 8007256:	4413      	add	r3, r2
 8007258:	3384      	adds	r3, #132	; 0x84
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800726a:	2304      	movs	r3, #4
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	e01b      	b.n	80072a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007278:	2303      	movs	r3, #3
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e014      	b.n	80072a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b04      	cmp	r3, #4
 8007284:	d00b      	beq.n	800729e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800728a:	2b02      	cmp	r3, #2
 800728c:	d007      	beq.n	800729e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007292:	2b03      	cmp	r3, #3
 8007294:	d003      	beq.n	800729e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800729a:	2b07      	cmp	r3, #7
 800729c:	d102      	bne.n	80072a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800729e:	2302      	movs	r3, #2
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	e001      	b.n	80072a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80072a4:	2301      	movs	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	01db      	lsls	r3, r3, #7
 80072b2:	4413      	add	r3, r2
 80072b4:	3384      	adds	r3, #132	; 0x84
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	4611      	mov	r1, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	01d2      	lsls	r2, r2, #7
 80072c2:	440a      	add	r2, r1
 80072c4:	3284      	adds	r2, #132	; 0x84
 80072c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80072ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	041a      	lsls	r2, r3, #16
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	1acb      	subs	r3, r1, r3
 80072e2:	69f9      	ldr	r1, [r7, #28]
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	3303      	adds	r3, #3
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	6809      	ldr	r1, [r1, #0]
 80072ee:	4608      	mov	r0, r1
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	01c9      	lsls	r1, r1, #7
 80072f4:	4401      	add	r1, r0
 80072f6:	3184      	adds	r1, #132	; 0x84
 80072f8:	4313      	orrs	r3, r2
 80072fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	01db      	lsls	r3, r3, #7
 8007306:	4413      	add	r3, r2
 8007308:	3384      	adds	r3, #132	; 0x84
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	4611      	mov	r1, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	01d2      	lsls	r2, r2, #7
 8007316:	440a      	add	r2, r1
 8007318:	3284      	adds	r2, #132	; 0x84
 800731a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800731e:	f023 0307 	bic.w	r3, r3, #7
 8007322:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	01db      	lsls	r3, r3, #7
 800732e:	4413      	add	r3, r2
 8007330:	3384      	adds	r3, #132	; 0x84
 8007332:	461a      	mov	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	01db      	lsls	r3, r3, #7
 8007344:	4413      	add	r3, r2
 8007346:	3384      	adds	r3, #132	; 0x84
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	4611      	mov	r1, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	01d2      	lsls	r2, r2, #7
 8007354:	440a      	add	r2, r1
 8007356:	3284      	adds	r2, #132	; 0x84
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	6013      	str	r3, [r2, #0]
}
 800735e:	bf00      	nop
 8007360:	3724      	adds	r7, #36	; 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <HAL_PWREx_EnableOverDrive+0x90>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <HAL_PWREx_EnableOverDrive+0x90>)
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007384:	6413      	str	r3, [r2, #64]	; 0x40
 8007386:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <HAL_PWREx_EnableOverDrive+0x90>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007392:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <HAL_PWREx_EnableOverDrive+0x94>)
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007398:	f7fc fbc4 	bl	8003b24 <HAL_GetTick>
 800739c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800739e:	e009      	b.n	80073b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073a0:	f7fc fbc0 	bl	8003b24 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ae:	d901      	bls.n	80073b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e01f      	b.n	80073f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073b4:	4b13      	ldr	r3, [pc, #76]	; (8007404 <HAL_PWREx_EnableOverDrive+0x98>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d1ee      	bne.n	80073a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073c2:	4b11      	ldr	r3, [pc, #68]	; (8007408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073c8:	f7fc fbac 	bl	8003b24 <HAL_GetTick>
 80073cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073ce:	e009      	b.n	80073e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073d0:	f7fc fba8 	bl	8003b24 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073de:	d901      	bls.n	80073e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e007      	b.n	80073f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <HAL_PWREx_EnableOverDrive+0x98>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f0:	d1ee      	bne.n	80073d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40023800 	.word	0x40023800
 8007400:	420e0040 	.word	0x420e0040
 8007404:	40007000 	.word	0x40007000
 8007408:	420e0044 	.word	0x420e0044

0800740c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007414:	f7fc fb86 	bl	8003b24 <HAL_GetTick>
 8007418:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e069      	b.n	80074f8 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fb fe89 	bl	8003150 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800743e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f85e 	bl	8007504 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	3b01      	subs	r3, #1
 8007458:	021a      	lsls	r2, r3, #8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	2120      	movs	r1, #32
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f856 	bl	8007520 <QSPI_WaitFlagStateUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d137      	bne.n	80074ee <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007488:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6852      	ldr	r2, [r2, #4]
 8007490:	0611      	lsls	r1, r2, #24
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68d2      	ldr	r2, [r2, #12]
 8007496:	4311      	orrs	r1, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	69d2      	ldr	r2, [r2, #28]
 800749c:	4311      	orrs	r1, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6a12      	ldr	r2, [r2, #32]
 80074a2:	4311      	orrs	r1, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <HAL_QSPI_Init+0xf4>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6912      	ldr	r2, [r2, #16]
 80074ba:	0411      	lsls	r1, r2, #16
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6952      	ldr	r2, [r2, #20]
 80074c0:	4311      	orrs	r1, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6992      	ldr	r2, [r2, #24]
 80074c6:	4311      	orrs	r1, r2
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80074f6:	7afb      	ldrb	r3, [r7, #11]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	ffe0f8fe 	.word	0xffe0f8fe

08007504 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007530:	e01a      	b.n	8007568 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d016      	beq.n	8007568 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fc faf3 	bl	8003b24 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2204      	movs	r2, #4
 8007554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	f043 0201 	orr.w	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e00e      	b.n	8007586 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d1d6      	bne.n	8007532 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0cc      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075a4:	4b68      	ldr	r3, [pc, #416]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d90c      	bls.n	80075cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b2:	4b65      	ldr	r3, [pc, #404]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ba:	4b63      	ldr	r3, [pc, #396]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d001      	beq.n	80075cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e0b8      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e4:	4b59      	ldr	r3, [pc, #356]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a58      	ldr	r2, [pc, #352]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075fc:	4b53      	ldr	r3, [pc, #332]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	4a52      	ldr	r2, [pc, #328]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007608:	4b50      	ldr	r3, [pc, #320]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	494d      	ldr	r1, [pc, #308]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d044      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d107      	bne.n	800763e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	4b47      	ldr	r3, [pc, #284]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d119      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e07f      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d003      	beq.n	800764e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764a:	2b03      	cmp	r3, #3
 800764c:	d107      	bne.n	800765e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764e:	4b3f      	ldr	r3, [pc, #252]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e06f      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765e:	4b3b      	ldr	r3, [pc, #236]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e067      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800766e:	4b37      	ldr	r3, [pc, #220]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f023 0203 	bic.w	r2, r3, #3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4934      	ldr	r1, [pc, #208]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	4313      	orrs	r3, r2
 800767e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007680:	f7fc fa50 	bl	8003b24 <HAL_GetTick>
 8007684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007686:	e00a      	b.n	800769e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007688:	f7fc fa4c 	bl	8003b24 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	f241 3288 	movw	r2, #5000	; 0x1388
 8007696:	4293      	cmp	r3, r2
 8007698:	d901      	bls.n	800769e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e04f      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769e:	4b2b      	ldr	r3, [pc, #172]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 020c 	and.w	r2, r3, #12
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d1eb      	bne.n	8007688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076b0:	4b25      	ldr	r3, [pc, #148]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d20c      	bcs.n	80076d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b22      	ldr	r3, [pc, #136]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b20      	ldr	r3, [pc, #128]	; (8007748 <HAL_RCC_ClockConfig+0x1b8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e032      	b.n	800773e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4916      	ldr	r1, [pc, #88]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	490e      	ldr	r1, [pc, #56]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	4313      	orrs	r3, r2
 8007714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007716:	f000 f821 	bl	800775c <HAL_RCC_GetSysClockFreq>
 800771a:	4602      	mov	r2, r0
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	091b      	lsrs	r3, r3, #4
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	490a      	ldr	r1, [pc, #40]	; (8007750 <HAL_RCC_ClockConfig+0x1c0>)
 8007728:	5ccb      	ldrb	r3, [r1, r3]
 800772a:	fa22 f303 	lsr.w	r3, r2, r3
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <HAL_RCC_ClockConfig+0x1c4>)
 8007730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <HAL_RCC_ClockConfig+0x1c8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc f822 	bl	8003780 <HAL_InitTick>

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40023c00 	.word	0x40023c00
 800774c:	40023800 	.word	0x40023800
 8007750:	0800f920 	.word	0x0800f920
 8007754:	20000000 	.word	0x20000000
 8007758:	20000004 	.word	0x20000004

0800775c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800775c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	2300      	movs	r3, #0
 800776e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007774:	4b67      	ldr	r3, [pc, #412]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 030c 	and.w	r3, r3, #12
 800777c:	2b08      	cmp	r3, #8
 800777e:	d00d      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0x40>
 8007780:	2b08      	cmp	r3, #8
 8007782:	f200 80bd 	bhi.w	8007900 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x34>
 800778a:	2b04      	cmp	r3, #4
 800778c:	d003      	beq.n	8007796 <HAL_RCC_GetSysClockFreq+0x3a>
 800778e:	e0b7      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007790:	4b61      	ldr	r3, [pc, #388]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007792:	60bb      	str	r3, [r7, #8]
       break;
 8007794:	e0b7      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007796:	4b61      	ldr	r3, [pc, #388]	; (800791c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007798:	60bb      	str	r3, [r7, #8]
      break;
 800779a:	e0b4      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800779c:	4b5d      	ldr	r3, [pc, #372]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077a6:	4b5b      	ldr	r3, [pc, #364]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d04d      	beq.n	800784e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077b2:	4b58      	ldr	r3, [pc, #352]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	461a      	mov	r2, r3
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077c2:	f04f 0100 	mov.w	r1, #0
 80077c6:	ea02 0800 	and.w	r8, r2, r0
 80077ca:	ea03 0901 	and.w	r9, r3, r1
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	014b      	lsls	r3, r1, #5
 80077dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077e0:	0142      	lsls	r2, r0, #5
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	ebb0 0008 	subs.w	r0, r0, r8
 80077ea:	eb61 0109 	sbc.w	r1, r1, r9
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	018b      	lsls	r3, r1, #6
 80077f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077fc:	0182      	lsls	r2, r0, #6
 80077fe:	1a12      	subs	r2, r2, r0
 8007800:	eb63 0301 	sbc.w	r3, r3, r1
 8007804:	f04f 0000 	mov.w	r0, #0
 8007808:	f04f 0100 	mov.w	r1, #0
 800780c:	00d9      	lsls	r1, r3, #3
 800780e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007812:	00d0      	lsls	r0, r2, #3
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	eb12 0208 	adds.w	r2, r2, r8
 800781c:	eb43 0309 	adc.w	r3, r3, r9
 8007820:	f04f 0000 	mov.w	r0, #0
 8007824:	f04f 0100 	mov.w	r1, #0
 8007828:	0259      	lsls	r1, r3, #9
 800782a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800782e:	0250      	lsls	r0, r2, #9
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4610      	mov	r0, r2
 8007836:	4619      	mov	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	461a      	mov	r2, r3
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	f7f8 fcde 	bl	8000200 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4613      	mov	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e04a      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800784e:	4b31      	ldr	r3, [pc, #196]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	099b      	lsrs	r3, r3, #6
 8007854:	461a      	mov	r2, r3
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800785e:	f04f 0100 	mov.w	r1, #0
 8007862:	ea02 0400 	and.w	r4, r2, r0
 8007866:	ea03 0501 	and.w	r5, r3, r1
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	014b      	lsls	r3, r1, #5
 8007878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800787c:	0142      	lsls	r2, r0, #5
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	1b00      	subs	r0, r0, r4
 8007884:	eb61 0105 	sbc.w	r1, r1, r5
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	018b      	lsls	r3, r1, #6
 8007892:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007896:	0182      	lsls	r2, r0, #6
 8007898:	1a12      	subs	r2, r2, r0
 800789a:	eb63 0301 	sbc.w	r3, r3, r1
 800789e:	f04f 0000 	mov.w	r0, #0
 80078a2:	f04f 0100 	mov.w	r1, #0
 80078a6:	00d9      	lsls	r1, r3, #3
 80078a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078ac:	00d0      	lsls	r0, r2, #3
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	1912      	adds	r2, r2, r4
 80078b4:	eb45 0303 	adc.w	r3, r5, r3
 80078b8:	f04f 0000 	mov.w	r0, #0
 80078bc:	f04f 0100 	mov.w	r1, #0
 80078c0:	0299      	lsls	r1, r3, #10
 80078c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80078c6:	0290      	lsls	r0, r2, #10
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	f7f8 fc92 	bl	8000200 <__aeabi_uldivmod>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4613      	mov	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	0c1b      	lsrs	r3, r3, #16
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	60bb      	str	r3, [r7, #8]
      break;
 80078fe:	e002      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007902:	60bb      	str	r3, [r7, #8]
      break;
 8007904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007906:	68bb      	ldr	r3, [r7, #8]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007912:	bf00      	nop
 8007914:	40023800 	.word	0x40023800
 8007918:	00f42400 	.word	0x00f42400
 800791c:	007a1200 	.word	0x007a1200

08007920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007924:	4b03      	ldr	r3, [pc, #12]	; (8007934 <HAL_RCC_GetHCLKFreq+0x14>)
 8007926:	681b      	ldr	r3, [r3, #0]
}
 8007928:	4618      	mov	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000000 	.word	0x20000000

08007938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800793c:	f7ff fff0 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007940:	4602      	mov	r2, r0
 8007942:	4b05      	ldr	r3, [pc, #20]	; (8007958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	0a9b      	lsrs	r3, r3, #10
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	4903      	ldr	r1, [pc, #12]	; (800795c <HAL_RCC_GetPCLK1Freq+0x24>)
 800794e:	5ccb      	ldrb	r3, [r1, r3]
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40023800 	.word	0x40023800
 800795c:	0800f930 	.word	0x0800f930

08007960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007964:	f7ff ffdc 	bl	8007920 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0b5b      	lsrs	r3, r3, #13
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	; (8007984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	0800f930 	.word	0x0800f930

08007988 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220f      	movs	r2, #15
 8007996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007998:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <HAL_RCC_GetClockConfig+0x5c>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 0203 	and.w	r2, r3, #3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <HAL_RCC_GetClockConfig+0x5c>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <HAL_RCC_GetClockConfig+0x5c>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCC_GetClockConfig+0x5c>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	08db      	lsrs	r3, r3, #3
 80079c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <HAL_RCC_GetClockConfig+0x60>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 020f 	and.w	r2, r3, #15
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	601a      	str	r2, [r3, #0]
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40023c00 	.word	0x40023c00

080079ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00a      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a14:	4b66      	ldr	r3, [pc, #408]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	4963      	ldr	r1, [pc, #396]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007a36:	4b5e      	ldr	r3, [pc, #376]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	495a      	ldr	r1, [pc, #360]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d075      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a70:	4b50      	ldr	r3, [pc, #320]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a76:	f7fc f855 	bl	8003b24 <HAL_GetTick>
 8007a7a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a7e:	f7fc f851 	bl	8003b24 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e1dc      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a90:	4b47      	ldr	r3, [pc, #284]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f0      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	019a      	lsls	r2, r3, #6
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	071b      	lsls	r3, r3, #28
 8007ab4:	493e      	ldr	r1, [pc, #248]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01f      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ac8:	4b39      	ldr	r3, [pc, #228]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	019a      	lsls	r2, r3, #6
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	061b      	lsls	r3, r3, #24
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	071b      	lsls	r3, r3, #28
 8007ae8:	4931      	ldr	r1, [pc, #196]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007af0:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af6:	f023 021f 	bic.w	r2, r3, #31
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	492b      	ldr	r1, [pc, #172]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00d      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	019a      	lsls	r2, r3, #6
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	071b      	lsls	r3, r3, #28
 8007b28:	4921      	ldr	r1, [pc, #132]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b30:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b36:	f7fb fff5 	bl	8003b24 <HAL_GetTick>
 8007b3a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b3e:	f7fb fff1 	bl	8003b24 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e17c      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b50:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d112      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10c      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80ce 	beq.w	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b8a:	f040 80c8 	bne.w	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b94:	f7fb ffc6 	bl	8003b24 <HAL_GetTick>
 8007b98:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b9a:	e00f      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b9c:	f7fb ffc2 	bl	8003b24 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d908      	bls.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e14d      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007bae:	bf00      	nop
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	42470068 	.word	0x42470068
 8007bb8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bbc:	4ba5      	ldr	r3, [pc, #660]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc8:	d0e8      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02e      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bd6:	4b9f      	ldr	r3, [pc, #636]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	3301      	adds	r3, #1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007be8:	4b9a      	ldr	r3, [pc, #616]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	0f1b      	lsrs	r3, r3, #28
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	019a      	lsls	r2, r3, #6
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	085b      	lsrs	r3, r3, #1
 8007c00:	3b01      	subs	r3, #1
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	061b      	lsls	r3, r3, #24
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	071b      	lsls	r3, r3, #28
 8007c12:	4990      	ldr	r1, [pc, #576]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c1a:	4b8e      	ldr	r3, [pc, #568]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	4989      	ldr	r1, [pc, #548]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d02c      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007c40:	4b84      	ldr	r3, [pc, #528]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c46:	0c1b      	lsrs	r3, r3, #16
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c52:	4b80      	ldr	r3, [pc, #512]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	019a      	lsls	r2, r3, #6
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	041b      	lsls	r3, r3, #16
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	071b      	lsls	r3, r3, #28
 8007c7c:	4975      	ldr	r1, [pc, #468]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007c84:	4b73      	ldr	r3, [pc, #460]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	4970      	ldr	r1, [pc, #448]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d024      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cae:	d11f      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cb0:	4b68      	ldr	r3, [pc, #416]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	0e1b      	lsrs	r3, r3, #24
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cbe:	4b65      	ldr	r3, [pc, #404]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc4:	0f1b      	lsrs	r3, r3, #28
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	019a      	lsls	r2, r3, #6
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	061b      	lsls	r3, r3, #24
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	071b      	lsls	r3, r3, #28
 8007ce8:	495a      	ldr	r1, [pc, #360]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007cf0:	4b59      	ldr	r3, [pc, #356]	; (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cf6:	f7fb ff15 	bl	8003b24 <HAL_GetTick>
 8007cfa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cfc:	e008      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007cfe:	f7fb ff11 	bl	8003b24 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d901      	bls.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e09c      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d10:	4b50      	ldr	r3, [pc, #320]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d1c:	d1ef      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8083 	beq.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	4b48      	ldr	r3, [pc, #288]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	4a47      	ldr	r2, [pc, #284]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8007d3c:	4b45      	ldr	r3, [pc, #276]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d48:	4b44      	ldr	r3, [pc, #272]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a43      	ldr	r2, [pc, #268]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d52:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d54:	f7fb fee6 	bl	8003b24 <HAL_GetTick>
 8007d58:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d5c:	f7fb fee2 	bl	8003b24 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e06d      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d7a:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d82:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d02f      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d028      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d98:	4b2e      	ldr	r3, [pc, #184]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007da2:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007da4:	2201      	movs	r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007da8:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007dae:	4a29      	ldr	r2, [pc, #164]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007db4:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d114      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007dc0:	f7fb feb0 	bl	8003b24 <HAL_GetTick>
 8007dc4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc6:	e00a      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc8:	f7fb feac 	bl	8003b24 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e035      	b.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ee      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007df6:	d10d      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007df8:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0c:	4911      	ldr	r1, [pc, #68]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
 8007e12:	e005      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	4a0e      	ldr	r2, [pc, #56]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e1e:	6093      	str	r3, [r2, #8]
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2c:	4909      	ldr	r1, [pc, #36]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007e46:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800
 8007e58:	42470070 	.word	0x42470070
 8007e5c:	40007000 	.word	0x40007000
 8007e60:	42470e40 	.word	0x42470e40
 8007e64:	424711e0 	.word	0x424711e0

08007e68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e270      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d075      	beq.n	8007f72 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e86:	4ba3      	ldr	r3, [pc, #652]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d00c      	beq.n	8007eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e92:	4ba0      	ldr	r3, [pc, #640]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d112      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e9e:	4b9d      	ldr	r3, [pc, #628]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eaa:	d10b      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eac:	4b99      	ldr	r3, [pc, #612]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d05b      	beq.n	8007f70 <HAL_RCC_OscConfig+0x108>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d157      	bne.n	8007f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e24b      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d106      	bne.n	8007edc <HAL_RCC_OscConfig+0x74>
 8007ece:	4b91      	ldr	r3, [pc, #580]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a90      	ldr	r2, [pc, #576]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	e01d      	b.n	8007f18 <HAL_RCC_OscConfig+0xb0>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ee4:	d10c      	bne.n	8007f00 <HAL_RCC_OscConfig+0x98>
 8007ee6:	4b8b      	ldr	r3, [pc, #556]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a8a      	ldr	r2, [pc, #552]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	4b88      	ldr	r3, [pc, #544]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a87      	ldr	r2, [pc, #540]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e00b      	b.n	8007f18 <HAL_RCC_OscConfig+0xb0>
 8007f00:	4b84      	ldr	r3, [pc, #528]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a83      	ldr	r2, [pc, #524]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4b81      	ldr	r3, [pc, #516]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a80      	ldr	r2, [pc, #512]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d013      	beq.n	8007f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fb fe00 	bl	8003b24 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f28:	f7fb fdfc 	bl	8003b24 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	; 0x64
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e210      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3a:	4b76      	ldr	r3, [pc, #472]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0xc0>
 8007f46:	e014      	b.n	8007f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fb fdec 	bl	8003b24 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f50:	f7fb fde8 	bl	8003b24 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b64      	cmp	r3, #100	; 0x64
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e1fc      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f62:	4b6c      	ldr	r3, [pc, #432]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0xe8>
 8007f6e:	e000      	b.n	8007f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d063      	beq.n	8008046 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f7e:	4b65      	ldr	r3, [pc, #404]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 030c 	and.w	r3, r3, #12
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f8a:	4b62      	ldr	r3, [pc, #392]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d11c      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f96:	4b5f      	ldr	r3, [pc, #380]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d116      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fa2:	4b5c      	ldr	r3, [pc, #368]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_RCC_OscConfig+0x152>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d001      	beq.n	8007fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e1d0      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fba:	4b56      	ldr	r3, [pc, #344]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	4952      	ldr	r1, [pc, #328]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fce:	e03a      	b.n	8008046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d020      	beq.n	800801a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fd8:	4b4f      	ldr	r3, [pc, #316]	; (8008118 <HAL_RCC_OscConfig+0x2b0>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fde:	f7fb fda1 	bl	8003b24 <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fe6:	f7fb fd9d 	bl	8003b24 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e1b1      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ff8:	4b46      	ldr	r3, [pc, #280]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008004:	4b43      	ldr	r3, [pc, #268]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4940      	ldr	r1, [pc, #256]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 8008014:	4313      	orrs	r3, r2
 8008016:	600b      	str	r3, [r1, #0]
 8008018:	e015      	b.n	8008046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800801a:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <HAL_RCC_OscConfig+0x2b0>)
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7fb fd80 	bl	8003b24 <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008028:	f7fb fd7c 	bl	8003b24 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e190      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1f0      	bne.n	8008028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d030      	beq.n	80080b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d016      	beq.n	8008088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800805a:	4b30      	ldr	r3, [pc, #192]	; (800811c <HAL_RCC_OscConfig+0x2b4>)
 800805c:	2201      	movs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008060:	f7fb fd60 	bl	8003b24 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008068:	f7fb fd5c 	bl	8003b24 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e170      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800807a:	4b26      	ldr	r3, [pc, #152]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 800807c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f0      	beq.n	8008068 <HAL_RCC_OscConfig+0x200>
 8008086:	e015      	b.n	80080b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008088:	4b24      	ldr	r3, [pc, #144]	; (800811c <HAL_RCC_OscConfig+0x2b4>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fb fd49 	bl	8003b24 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008096:	f7fb fd45 	bl	8003b24 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e159      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 80080aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f0      	bne.n	8008096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80a0 	beq.w	8008202 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080c6:	4b13      	ldr	r3, [pc, #76]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10f      	bne.n	80080f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	4a0e      	ldr	r2, [pc, #56]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 80080dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e0:	6413      	str	r3, [r2, #64]	; 0x40
 80080e2:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <HAL_RCC_OscConfig+0x2ac>)
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ea:	60bb      	str	r3, [r7, #8]
 80080ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080ee:	2301      	movs	r3, #1
 80080f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080f2:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <HAL_RCC_OscConfig+0x2b8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d121      	bne.n	8008142 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080fe:	4b08      	ldr	r3, [pc, #32]	; (8008120 <HAL_RCC_OscConfig+0x2b8>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a07      	ldr	r2, [pc, #28]	; (8008120 <HAL_RCC_OscConfig+0x2b8>)
 8008104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800810a:	f7fb fd0b 	bl	8003b24 <HAL_GetTick>
 800810e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008110:	e011      	b.n	8008136 <HAL_RCC_OscConfig+0x2ce>
 8008112:	bf00      	nop
 8008114:	40023800 	.word	0x40023800
 8008118:	42470000 	.word	0x42470000
 800811c:	42470e80 	.word	0x42470e80
 8008120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008124:	f7fb fcfe 	bl	8003b24 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e112      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008136:	4b8b      	ldr	r3, [pc, #556]	; (8008364 <HAL_RCC_OscConfig+0x4fc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0f0      	beq.n	8008124 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d106      	bne.n	8008158 <HAL_RCC_OscConfig+0x2f0>
 800814a:	4b87      	ldr	r3, [pc, #540]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	4a86      	ldr	r2, [pc, #536]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	6713      	str	r3, [r2, #112]	; 0x70
 8008156:	e01c      	b.n	8008192 <HAL_RCC_OscConfig+0x32a>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	2b05      	cmp	r3, #5
 800815e:	d10c      	bne.n	800817a <HAL_RCC_OscConfig+0x312>
 8008160:	4b81      	ldr	r3, [pc, #516]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	4a80      	ldr	r2, [pc, #512]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008166:	f043 0304 	orr.w	r3, r3, #4
 800816a:	6713      	str	r3, [r2, #112]	; 0x70
 800816c:	4b7e      	ldr	r3, [pc, #504]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	4a7d      	ldr	r2, [pc, #500]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	6713      	str	r3, [r2, #112]	; 0x70
 8008178:	e00b      	b.n	8008192 <HAL_RCC_OscConfig+0x32a>
 800817a:	4b7b      	ldr	r3, [pc, #492]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817e:	4a7a      	ldr	r2, [pc, #488]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	6713      	str	r3, [r2, #112]	; 0x70
 8008186:	4b78      	ldr	r3, [pc, #480]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	4a77      	ldr	r2, [pc, #476]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800818c:	f023 0304 	bic.w	r3, r3, #4
 8008190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d015      	beq.n	80081c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819a:	f7fb fcc3 	bl	8003b24 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a0:	e00a      	b.n	80081b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081a2:	f7fb fcbf 	bl	8003b24 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e0d1      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b8:	4b6b      	ldr	r3, [pc, #428]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0ee      	beq.n	80081a2 <HAL_RCC_OscConfig+0x33a>
 80081c4:	e014      	b.n	80081f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c6:	f7fb fcad 	bl	8003b24 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fb fca9 	bl	8003b24 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e0bb      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081e4:	4b60      	ldr	r3, [pc, #384]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1ee      	bne.n	80081ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f6:	4b5c      	ldr	r3, [pc, #368]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	4a5b      	ldr	r2, [pc, #364]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80081fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80a7 	beq.w	800835a <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800820c:	4b56      	ldr	r3, [pc, #344]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b08      	cmp	r3, #8
 8008216:	d060      	beq.n	80082da <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d145      	bne.n	80082ac <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008220:	4b52      	ldr	r3, [pc, #328]	; (800836c <HAL_RCC_OscConfig+0x504>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008226:	f7fb fc7d 	bl	8003b24 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800822e:	f7fb fc79 	bl	8003b24 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e08d      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008240:	4b49      	ldr	r3, [pc, #292]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f0      	bne.n	800822e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69da      	ldr	r2, [r3, #28]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	019b      	lsls	r3, r3, #6
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	3b01      	subs	r3, #1
 8008266:	041b      	lsls	r3, r3, #16
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	061b      	lsls	r3, r3, #24
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	071b      	lsls	r3, r3, #28
 8008278:	493b      	ldr	r1, [pc, #236]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 800827a:	4313      	orrs	r3, r2
 800827c:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800827e:	4b3b      	ldr	r3, [pc, #236]	; (800836c <HAL_RCC_OscConfig+0x504>)
 8008280:	2201      	movs	r2, #1
 8008282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fb fc4e 	bl	8003b24 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800828c:	f7fb fc4a 	bl	8003b24 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e05e      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800829e:	4b32      	ldr	r3, [pc, #200]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0x424>
 80082aa:	e056      	b.n	800835a <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ac:	4b2f      	ldr	r3, [pc, #188]	; (800836c <HAL_RCC_OscConfig+0x504>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fb fc37 	bl	8003b24 <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082b8:	e008      	b.n	80082cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ba:	f7fb fc33 	bl	8003b24 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e047      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082cc:	4b26      	ldr	r3, [pc, #152]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <HAL_RCC_OscConfig+0x452>
 80082d8:	e03f      	b.n	800835a <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e03a      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082e6:	4b20      	ldr	r3, [pc, #128]	; (8008368 <HAL_RCC_OscConfig+0x500>)
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d030      	beq.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d129      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800830c:	429a      	cmp	r2, r3
 800830e:	d122      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008316:	4013      	ands	r3, r2
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800831c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800831e:	4293      	cmp	r3, r2
 8008320:	d119      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008332:	429a      	cmp	r2, r3
 8008334:	d10f      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008342:	429a      	cmp	r2, r3
 8008344:	d107      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008352:	429a      	cmp	r2, r3
 8008354:	d001      	beq.n	800835a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e000      	b.n	800835c <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	40007000 	.word	0x40007000
 8008368:	40023800 	.word	0x40023800
 800836c:	42470060 	.word	0x42470060

08008370 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e022      	b.n	80083c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7fa ff55 	bl	8003244 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2203      	movs	r2, #3
 800839e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f814 	bl	80083d0 <HAL_SD_InitCard>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e00a      	b.n	80083c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083d0:	b5b0      	push	{r4, r5, r7, lr}
 80083d2:	b08e      	sub	sp, #56	; 0x38
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80083d8:	2300      	movs	r3, #0
 80083da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80083ec:	2376      	movs	r3, #118	; 0x76
 80083ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681d      	ldr	r5, [r3, #0]
 80083f4:	466c      	mov	r4, sp
 80083f6:	f107 0314 	add.w	r3, r7, #20
 80083fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008408:	4628      	mov	r0, r5
 800840a:	f003 f83f 	bl	800b48c <SDIO_Init>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e04c      	b.n	80084ba <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008420:	4b28      	ldr	r3, [pc, #160]	; (80084c4 <HAL_SD_InitCard+0xf4>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f003 f877 	bl	800b51e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008430:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <HAL_SD_InitCard+0xf4>)
 8008432:	2201      	movs	r2, #1
 8008434:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 ffee 	bl	8009418 <SD_PowerON>
 800843c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e02e      	b.n	80084ba <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 ff0f 	bl	8009280 <SD_InitCard>
 8008462:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e01b      	b.n	80084ba <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800848a:	4618      	mov	r0, r3
 800848c:	f003 f8da 	bl	800b644 <SDMMC_CmdBlockLength>
 8008490:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00f      	beq.n	80084b8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <HAL_SD_InitCard+0xf8>)
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3728      	adds	r7, #40	; 0x28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bdb0      	pop	{r4, r5, r7, pc}
 80084c2:	bf00      	nop
 80084c4:	422580a0 	.word	0x422580a0
 80084c8:	004005ff 	.word	0x004005ff

080084cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08c      	sub	sp, #48	; 0x30
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d107      	bne.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0be      	b.n	8008672 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 80b7 	bne.w	8008670 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	441a      	add	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008512:	429a      	cmp	r2, r3
 8008514:	d907      	bls.n	8008526 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e0a5      	b.n	8008672 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2203      	movs	r2, #3
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008544:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	4a4c      	ldr	r2, [pc, #304]	; (800867c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800854c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	4a4b      	ldr	r2, [pc, #300]	; (8008680 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008554:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	2200      	movs	r2, #0
 800855c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	2200      	movs	r2, #0
 8008564:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3380      	adds	r3, #128	; 0x80
 800858c:	4619      	mov	r1, r3
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	025b      	lsls	r3, r3, #9
 8008594:	089b      	lsrs	r3, r3, #2
 8008596:	f7fc fd75 	bl	8005084 <HAL_DMA_Start_IT>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d017      	beq.n	80085d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80085ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a33      	ldr	r2, [pc, #204]	; (8008684 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e050      	b.n	8008672 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80085d2:	2201      	movs	r2, #1
 80085d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d002      	beq.n	80085e4 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	025b      	lsls	r3, r3, #9
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085e4:	f04f 33ff 	mov.w	r3, #4294967295
 80085e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	025b      	lsls	r3, r3, #9
 80085ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80085f0:	2390      	movs	r3, #144	; 0x90
 80085f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80085f4:	2302      	movs	r3, #2
 80085f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80085fc:	2301      	movs	r3, #1
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f107 0210 	add.w	r2, r7, #16
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f002 ffee 	bl	800b5ec <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d90a      	bls.n	800862c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2282      	movs	r2, #130	; 0x82
 800861a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008622:	4618      	mov	r0, r3
 8008624:	f003 f852 	bl	800b6cc <SDMMC_CmdReadMultiBlock>
 8008628:	62f8      	str	r0, [r7, #44]	; 0x2c
 800862a:	e009      	b.n	8008640 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2281      	movs	r2, #129	; 0x81
 8008630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008638:	4618      	mov	r0, r3
 800863a:	f003 f825 	bl	800b688 <SDMMC_CmdReadSingleBlock>
 800863e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a0e      	ldr	r2, [pc, #56]	; (8008684 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800864c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e002      	b.n	8008672 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	e000      	b.n	8008672 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008670:	2302      	movs	r3, #2
  }
}
 8008672:	4618      	mov	r0, r3
 8008674:	3730      	adds	r7, #48	; 0x30
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	0800908f 	.word	0x0800908f
 8008680:	08009101 	.word	0x08009101
 8008684:	004005ff 	.word	0x004005ff
 8008688:	4225858c 	.word	0x4225858c

0800868c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08c      	sub	sp, #48	; 0x30
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d107      	bne.n	80086b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e0c1      	b.n	8008838 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b01      	cmp	r3, #1
 80086be:	f040 80ba 	bne.w	8008836 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d907      	bls.n	80086e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0a8      	b.n	8008838 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2203      	movs	r2, #3
 80086ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2200      	movs	r2, #0
 80086f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 021a 	orr.w	r2, r2, #26
 8008704:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	4a4d      	ldr	r2, [pc, #308]	; (8008840 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800870c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	4a4c      	ldr	r2, [pc, #304]	; (8008844 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8008714:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	2200      	movs	r2, #0
 800871c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	2b01      	cmp	r3, #1
 8008724:	d002      	beq.n	800872c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	025b      	lsls	r3, r3, #9
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d90a      	bls.n	8008748 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	22a0      	movs	r2, #160	; 0xa0
 8008736:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873e:	4618      	mov	r0, r3
 8008740:	f003 f808 	bl	800b754 <SDMMC_CmdWriteMultiBlock>
 8008744:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008746:	e009      	b.n	800875c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2290      	movs	r2, #144	; 0x90
 800874c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008754:	4618      	mov	r0, r3
 8008756:	f002 ffdb 	bl	800b710 <SDMMC_CmdWriteSingleBlock>
 800875a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d012      	beq.n	8008788 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a38      	ldr	r2, [pc, #224]	; (8008848 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e057      	b.n	8008838 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008788:	4b30      	ldr	r3, [pc, #192]	; (800884c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3380      	adds	r3, #128	; 0x80
 80087be:	461a      	mov	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	025b      	lsls	r3, r3, #9
 80087c4:	089b      	lsrs	r3, r3, #2
 80087c6:	f7fc fc5d 	bl	8005084 <HAL_DMA_Start_IT>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01a      	beq.n	8008806 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 021a 	bic.w	r2, r2, #26
 80087de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a18      	ldr	r2, [pc, #96]	; (8008848 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e018      	b.n	8008838 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	025b      	lsls	r3, r3, #9
 8008810:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008812:	2390      	movs	r3, #144	; 0x90
 8008814:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800881a:	2300      	movs	r3, #0
 800881c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800881e:	2301      	movs	r3, #1
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f107 0210 	add.w	r2, r7, #16
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f002 fedd 	bl	800b5ec <SDIO_ConfigData>

      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e000      	b.n	8008838 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8008836:	2302      	movs	r3, #2
  }
}
 8008838:	4618      	mov	r0, r3
 800883a:	3730      	adds	r7, #48	; 0x30
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	08009065 	.word	0x08009065
 8008844:	08009101 	.word	0x08009101
 8008848:	004005ff 	.word	0x004005ff
 800884c:	4225858c 	.word	0x4225858c

08008850 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <HAL_SD_IRQHandler+0x2e>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 ffed 	bl	8009856 <SD_Read_IT>
 800887c:	e155      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 808f 	beq.w	80089ac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80088a6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80088aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0201 	bic.w	r2, r2, #1
 80088ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f003 0308 	and.w	r3, r3, #8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d039      	beq.n	800893a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <HAL_SD_IRQHandler+0x8a>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d011      	beq.n	80088fe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 ff5a 	bl	800b798 <SDMMC_CmdStopTransfer>
 80088e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f91f 	bl	8008b3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f240 523a 	movw	r2, #1338	; 0x53a
 8008906:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d104      	bne.n	800892a <HAL_SD_IRQHandler+0xda>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f003 fbc0 	bl	800c0b0 <HAL_SD_RxCpltCallback>
 8008930:	e0fb      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f003 fbb2 	bl	800c09c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008938:	e0f7      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 80f2 	beq.w	8008b2a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	2b00      	cmp	r3, #0
 800894e:	d011      	beq.n	8008974 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f002 ff1f 	bl	800b798 <SDMMC_CmdStopTransfer>
 800895a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d008      	beq.n	8008974 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8e4 	bl	8008b3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 80d5 	bne.w	8008b2a <HAL_SD_IRQHandler+0x2da>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 80cf 	bne.w	8008b2a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0208 	bic.w	r2, r2, #8
 800899a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 fb79 	bl	800c09c <HAL_SD_TxCpltCallback>
}
 80089aa:	e0be      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <HAL_SD_IRQHandler+0x17c>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 ff97 	bl	80098f8 <SD_Write_IT>
 80089ca:	e0ae      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 80a7 	beq.w	8008b2a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	f043 0202 	orr.w	r2, r3, #2
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	f043 0208 	orr.w	r2, r3, #8
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d005      	beq.n	8008a2a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	f043 0220 	orr.w	r2, r3, #32
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	f043 0210 	orr.w	r2, r3, #16
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a5c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f002 fe98 	bl	800b798 <SDMMC_CmdStopTransfer>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f855 	bl	8008b3c <HAL_SD_ErrorCallback>
}
 8008a92:	e04a      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d045      	beq.n	8008b2a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <HAL_SD_IRQHandler+0x262>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d011      	beq.n	8008ad6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <HAL_SD_IRQHandler+0x2e4>)
 8008ab8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fc fb38 	bl	8005134 <HAL_DMA_Abort_IT>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d02f      	beq.n	8008b2a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fb68 	bl	80091a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ad4:	e029      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_SD_IRQHandler+0x29a>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <HAL_SD_IRQHandler+0x2e8>)
 8008af0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fc fb1c 	bl	8005134 <HAL_DMA_Abort_IT>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d013      	beq.n	8008b2a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fb83 	bl	8009212 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b0c:	e00d      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f003 fab0 	bl	800c088 <HAL_SD_AbortCallback>
}
 8008b28:	e7ff      	b.n	8008b2a <HAL_SD_IRQHandler+0x2da>
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	080091a5 	.word	0x080091a5
 8008b38:	08009213 	.word	0x08009213

08008b3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5e:	0f9b      	lsrs	r3, r3, #30
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6a:	0e9b      	lsrs	r3, r3, #26
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b7c:	0e1b      	lsrs	r3, r3, #24
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bce:	0bdb      	lsrs	r3, r3, #15
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be0:	0b9b      	lsrs	r3, r3, #14
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bf2:	0b5b      	lsrs	r3, r3, #13
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c04:	0b1b      	lsrs	r3, r3, #12
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d163      	bne.n	8008ce8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c24:	009a      	lsls	r2, r3, #2
 8008c26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c30:	0f92      	lsrs	r2, r2, #30
 8008c32:	431a      	orrs	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3c:	0edb      	lsrs	r3, r3, #27
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4e:	0e1b      	lsrs	r3, r3, #24
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c60:	0d5b      	lsrs	r3, r3, #21
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c72:	0c9b      	lsrs	r3, r3, #18
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	0bdb      	lsrs	r3, r3, #15
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	7e1b      	ldrb	r3, [r3, #24]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	2201      	movs	r2, #1
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008cb2:	fb02 f203 	mul.w	r2, r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	7a1b      	ldrb	r3, [r3, #8]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	409a      	lsls	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008cd4:	0a52      	lsrs	r2, r2, #9
 8008cd6:	fb02 f203 	mul.w	r2, r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce4:	661a      	str	r2, [r3, #96]	; 0x60
 8008ce6:	e031      	b.n	8008d4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d11d      	bne.n	8008d2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfe:	0c1b      	lsrs	r3, r3, #16
 8008d00:	431a      	orrs	r2, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	029a      	lsls	r2, r3, #10
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	661a      	str	r2, [r3, #96]	; 0x60
 8008d2a:	e00f      	b.n	8008d4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a58      	ldr	r2, [pc, #352]	; (8008e94 <HAL_SD_GetCardCSD+0x344>)
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e09d      	b.n	8008e88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d50:	0b9b      	lsrs	r3, r3, #14
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d62:	09db      	lsrs	r3, r3, #7
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	0fdb      	lsrs	r3, r3, #31
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	0f5b      	lsrs	r3, r3, #29
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	0e9b      	lsrs	r3, r3, #26
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db4:	0d9b      	lsrs	r3, r3, #22
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	0d5b      	lsrs	r3, r3, #21
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	0c1b      	lsrs	r3, r3, #16
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	0bdb      	lsrs	r3, r3, #15
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0a:	0b9b      	lsrs	r3, r3, #14
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	0b5b      	lsrs	r3, r3, #13
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	0b1b      	lsrs	r3, r3, #12
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e46:	0a9b      	lsrs	r3, r3, #10
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	004005ff 	.word	0x004005ff

08008e98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ef0:	b5b0      	push	{r4, r5, r7, lr}
 8008ef2:	b08e      	sub	sp, #56	; 0x38
 8008ef4:	af04      	add	r7, sp, #16
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2203      	movs	r2, #3
 8008f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d02e      	beq.n	8008f6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f16:	d106      	bne.n	8008f26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38
 8008f24:	e029      	b.n	8008f7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f2c:	d10a      	bne.n	8008f44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb28 	bl	8009584 <SD_WideBus_Enable>
 8008f34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
 8008f42:	e01a      	b.n	8008f7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fb65 	bl	800961a <SD_WideBus_Disable>
 8008f50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f5e:	e00c      	b.n	8008f7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8008f6c:	e005      	b.n	8008f7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a26      	ldr	r2, [pc, #152]	; (8009020 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008f88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f98:	e01f      	b.n	8008fda <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681d      	ldr	r5, [r3, #0]
 8008fc0:	466c      	mov	r4, sp
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f002 fa59 	bl	800b48c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f002 fb2e 	bl	800b644 <SDMMC_CmdBlockLength>
 8008fe8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00c      	beq.n	800900a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009016:	4618      	mov	r0, r3
 8009018:	3728      	adds	r7, #40	; 0x28
 800901a:	46bd      	mov	sp, r7
 800901c:	bdb0      	pop	{r4, r5, r7, pc}
 800901e:	bf00      	nop
 8009020:	004005ff 	.word	0x004005ff

08009024 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa7c 	bl	8009534 <SD_SendStatus>
 800903c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	0a5b      	lsrs	r3, r3, #9
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800905a:	693b      	ldr	r3, [r7, #16]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009080:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a0:	2b82      	cmp	r3, #130	; 0x82
 80090a2:	d111      	bne.n	80090c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f002 fb75 	bl	800b798 <SDMMC_CmdStopTransfer>
 80090ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d008      	beq.n	80090c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	431a      	orrs	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fd3a 	bl	8008b3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0208 	bic.w	r2, r2, #8
 80090d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f002 ffdd 	bl	800c0b0 <HAL_SD_RxCpltCallback>
#endif
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fc f9bc 	bl	800548c <HAL_DMA_GetError>
 8009114:	4603      	mov	r3, r0
 8009116:	2b02      	cmp	r3, #2
 8009118:	d03e      	beq.n	8009198 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009120:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009128:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d002      	beq.n	8009136 <SD_DMAError+0x36>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d12d      	bne.n	8009192 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a19      	ldr	r2, [pc, #100]	; (80091a0 <SD_DMAError+0xa0>)
 800913c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800914c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800915a:	6978      	ldr	r0, [r7, #20]
 800915c:	f7ff ff62 	bl	8009024 <HAL_SD_GetCardState>
 8009160:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b06      	cmp	r3, #6
 8009166:	d002      	beq.n	800916e <SD_DMAError+0x6e>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b05      	cmp	r3, #5
 800916c:	d10a      	bne.n	8009184 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f002 fb10 	bl	800b798 <SDMMC_CmdStopTransfer>
 8009178:	4602      	mov	r2, r0
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	431a      	orrs	r2, r3
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2200      	movs	r2, #0
 8009190:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009192:	6978      	ldr	r0, [r7, #20]
 8009194:	f7ff fcd2 	bl	8008b3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009198:	bf00      	nop
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	004005ff 	.word	0x004005ff

080091a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7ff ff31 	bl	8009024 <HAL_SD_GetCardState>
 80091c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d002      	beq.n	80091de <SD_DMATxAbort+0x3a>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d10a      	bne.n	80091f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 fad8 	bl	800b798 <SDMMC_CmdStopTransfer>
 80091e8:	4602      	mov	r2, r0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d103      	bne.n	8009204 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f002 ff43 	bl	800c088 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009202:	e002      	b.n	800920a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff fc99 	bl	8008b3c <HAL_SD_ErrorCallback>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f240 523a 	movw	r2, #1338	; 0x53a
 8009228:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff fefa 	bl	8009024 <HAL_SD_GetCardState>
 8009230:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d002      	beq.n	800924c <SD_DMARxAbort+0x3a>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b05      	cmp	r3, #5
 800924a:	d10a      	bne.n	8009262 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f002 faa1 	bl	800b798 <SDMMC_CmdStopTransfer>
 8009256:	4602      	mov	r2, r0
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925c:	431a      	orrs	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f002 ff0c 	bl	800c088 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009270:	e002      	b.n	8009278 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff fc62 	bl	8008b3c <HAL_SD_ErrorCallback>
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009280:	b5b0      	push	{r4, r5, r7, lr}
 8009282:	b094      	sub	sp, #80	; 0x50
 8009284:	af04      	add	r7, sp, #16
 8009286:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009288:	2301      	movs	r3, #1
 800928a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f002 f953 	bl	800b53c <SDIO_GetPowerState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800929c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80092a0:	e0b6      	b.n	8009410 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d02f      	beq.n	800930a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f002 fb7c 	bl	800b9ac <SDMMC_CmdSendCID>
 80092b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	e0a7      	b.n	8009410 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f002 f97d 	bl	800b5c6 <SDIO_GetResponse>
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2104      	movs	r1, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 f974 	bl	800b5c6 <SDIO_GetResponse>
 80092de:	4602      	mov	r2, r0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2108      	movs	r1, #8
 80092ea:	4618      	mov	r0, r3
 80092ec:	f002 f96b 	bl	800b5c6 <SDIO_GetResponse>
 80092f0:	4602      	mov	r2, r0
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	210c      	movs	r1, #12
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 f962 	bl	800b5c6 <SDIO_GetResponse>
 8009302:	4602      	mov	r2, r0
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930e:	2b03      	cmp	r3, #3
 8009310:	d00d      	beq.n	800932e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f107 020e 	add.w	r2, r7, #14
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f002 fb82 	bl	800ba26 <SDMMC_CmdSetRelAdd>
 8009322:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <SD_InitCard+0xae>
    {
      return errorstate;
 800932a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932c:	e070      	b.n	8009410 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009332:	2b03      	cmp	r3, #3
 8009334:	d036      	beq.n	80093a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009336:	89fb      	ldrh	r3, [r7, #14]
 8009338:	461a      	mov	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f002 fb4c 	bl	800b9e8 <SDMMC_CmdSendCSD>
 8009350:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935a:	e059      	b.n	8009410 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f002 f92f 	bl	800b5c6 <SDIO_GetResponse>
 8009368:	4602      	mov	r2, r0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2104      	movs	r1, #4
 8009374:	4618      	mov	r0, r3
 8009376:	f002 f926 	bl	800b5c6 <SDIO_GetResponse>
 800937a:	4602      	mov	r2, r0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2108      	movs	r1, #8
 8009386:	4618      	mov	r0, r3
 8009388:	f002 f91d 	bl	800b5c6 <SDIO_GetResponse>
 800938c:	4602      	mov	r2, r0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	210c      	movs	r1, #12
 8009398:	4618      	mov	r0, r3
 800939a:	f002 f914 	bl	800b5c6 <SDIO_GetResponse>
 800939e:	4602      	mov	r2, r0
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2104      	movs	r1, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f002 f90b 	bl	800b5c6 <SDIO_GetResponse>
 80093b0:	4603      	mov	r3, r0
 80093b2:	0d1a      	lsrs	r2, r3, #20
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff fbc6 	bl	8008b50 <HAL_SD_GetCardCSD>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093ce:	e01f      	b.n	8009410 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6819      	ldr	r1, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	461a      	mov	r2, r3
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	4608      	mov	r0, r1
 80093e2:	f002 f9fb 	bl	800b7dc <SDMMC_CmdSelDesel>
 80093e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <SD_InitCard+0x172>
  {
    return errorstate;
 80093ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f0:	e00e      	b.n	8009410 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681d      	ldr	r5, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	466c      	mov	r4, sp
 80093fa:	f103 0210 	add.w	r2, r3, #16
 80093fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8009400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009404:	3304      	adds	r3, #4
 8009406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009408:	4628      	mov	r0, r5
 800940a:	f002 f83f 	bl	800b48c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3740      	adds	r7, #64	; 0x40
 8009414:	46bd      	mov	sp, r7
 8009416:	bdb0      	pop	{r4, r5, r7, pc}

08009418 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f002 f9f6 	bl	800b822 <SDMMC_CmdGoIdleState>
 8009436:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <SD_PowerON+0x2a>
  {
    return errorstate;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	e072      	b.n	8009528 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f002 fa09 	bl	800b85e <SDMMC_CmdOperCond>
 800944c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00d      	beq.n	8009470 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f002 f9df 	bl	800b822 <SDMMC_CmdGoIdleState>
 8009464:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <SD_PowerON+0x5e>
    {
      return errorstate;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	e05b      	b.n	8009528 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800947a:	2b01      	cmp	r3, #1
 800947c:	d137      	bne.n	80094ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f002 fa09 	bl	800b89c <SDMMC_CmdAppCommand>
 800948a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d02d      	beq.n	80094ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009492:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009496:	e047      	b.n	8009528 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f002 f9fc 	bl	800b89c <SDMMC_CmdAppCommand>
 80094a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	e03b      	b.n	8009528 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	491e      	ldr	r1, [pc, #120]	; (8009530 <SD_PowerON+0x118>)
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 fa12 	bl	800b8e0 <SDMMC_CmdAppOperCommand>
 80094bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094c8:	e02e      	b.n	8009528 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2100      	movs	r1, #0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f002 f878 	bl	800b5c6 <SDIO_GetResponse>
 80094d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	0fdb      	lsrs	r3, r3, #31
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <SD_PowerON+0xcc>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <SD_PowerON+0xce>
 80094e4:	2300      	movs	r3, #0
 80094e6:	613b      	str	r3, [r7, #16]

    count++;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3301      	adds	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d802      	bhi.n	80094fe <SD_PowerON+0xe6>
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0cc      	beq.n	8009498 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009504:	4293      	cmp	r3, r2
 8009506:	d902      	bls.n	800950e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800950c:	e00c      	b.n	8009528 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	645a      	str	r2, [r3, #68]	; 0x44
 800951e:	e002      	b.n	8009526 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	c1100000 	.word	0xc1100000

08009534 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009548:	e018      	b.n	800957c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009552:	041b      	lsls	r3, r3, #16
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f002 fa86 	bl	800ba68 <SDMMC_CmdSendStatus>
 800955c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	e009      	b.n	800957c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2100      	movs	r1, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f002 f829 	bl	800b5c6 <SDIO_GetResponse>
 8009574:	4602      	mov	r2, r0
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	2300      	movs	r3, #0
 8009592:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f002 f813 	bl	800b5c6 <SDIO_GetResponse>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095aa:	d102      	bne.n	80095b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095b0:	e02f      	b.n	8009612 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095b2:	f107 030c 	add.w	r3, r7, #12
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f879 	bl	80096b0 <SD_FindSCR>
 80095be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	e023      	b.n	8009612 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01c      	beq.n	800960e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095dc:	041b      	lsls	r3, r3, #16
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f002 f95b 	bl	800b89c <SDMMC_CmdAppCommand>
 80095e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	e00f      	b.n	8009612 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2102      	movs	r1, #2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f002 f994 	bl	800b926 <SDMMC_CmdBusWidth>
 80095fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	e003      	b.n	8009612 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800960a:	2300      	movs	r3, #0
 800960c:	e001      	b.n	8009612 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800960e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b086      	sub	sp, #24
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2100      	movs	r1, #0
 8009630:	4618      	mov	r0, r3
 8009632:	f001 ffc8 	bl	800b5c6 <SDIO_GetResponse>
 8009636:	4603      	mov	r3, r0
 8009638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009640:	d102      	bne.n	8009648 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009646:	e02f      	b.n	80096a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f82e 	bl	80096b0 <SD_FindSCR>
 8009654:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	e023      	b.n	80096a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01c      	beq.n	80096a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f002 f910 	bl	800b89c <SDMMC_CmdAppCommand>
 800967c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	e00f      	b.n	80096a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2100      	movs	r1, #0
 800968e:	4618      	mov	r0, r3
 8009690:	f002 f949 	bl	800b926 <SDMMC_CmdBusWidth>
 8009694:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	e003      	b.n	80096a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e001      	b.n	80096a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80096b0:	b590      	push	{r4, r7, lr}
 80096b2:	b08f      	sub	sp, #60	; 0x3c
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096ba:	f7fa fa33 	bl	8003b24 <HAL_GetTick>
 80096be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80096c4:	2300      	movs	r3, #0
 80096c6:	60bb      	str	r3, [r7, #8]
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2108      	movs	r1, #8
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 ffb4 	bl	800b644 <SDMMC_CmdBlockLength>
 80096dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	e0b2      	b.n	800984e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f0:	041b      	lsls	r3, r3, #16
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f002 f8d1 	bl	800b89c <SDMMC_CmdAppCommand>
 80096fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	e0a3      	b.n	800984e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800970c:	2308      	movs	r3, #8
 800970e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009710:	2330      	movs	r3, #48	; 0x30
 8009712:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009714:	2302      	movs	r3, #2
 8009716:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009718:	2300      	movs	r3, #0
 800971a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800971c:	2301      	movs	r3, #1
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f107 0210 	add.w	r2, r7, #16
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 ff5e 	bl	800b5ec <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f002 f918 	bl	800b96a <SDMMC_CmdSendSCR>
 800973a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d02a      	beq.n	8009798 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	e083      	b.n	800984e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00f      	beq.n	8009774 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6819      	ldr	r1, [r3, #0]
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	f107 0208 	add.w	r2, r7, #8
 8009760:	18d4      	adds	r4, r2, r3
 8009762:	4608      	mov	r0, r1
 8009764:	f001 febd 	bl	800b4e2 <SDIO_ReadFIFO>
 8009768:	4603      	mov	r3, r0
 800976a:	6023      	str	r3, [r4, #0]
      index++;
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	3301      	adds	r3, #1
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
 8009772:	e006      	b.n	8009782 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d012      	beq.n	80097a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009782:	f7fa f9cf 	bl	8003b24 <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d102      	bne.n	8009798 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009792:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009796:	e05a      	b.n	800984e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0cf      	beq.n	8009746 <SD_FindSCR+0x96>
 80097a6:	e000      	b.n	80097aa <SD_FindSCR+0xfa>
      break;
 80097a8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d005      	beq.n	80097c4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2208      	movs	r2, #8
 80097be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097c0:	2308      	movs	r3, #8
 80097c2:	e044      	b.n	800984e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2202      	movs	r2, #2
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097da:	2302      	movs	r3, #2
 80097dc:	e037      	b.n	800984e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2220      	movs	r2, #32
 80097f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097f4:	2320      	movs	r3, #32
 80097f6:	e02a      	b.n	800984e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009800:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	061a      	lsls	r2, r3, #24
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800980e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009818:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0e1b      	lsrs	r3, r3, #24
 800981e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	601a      	str	r2, [r3, #0]
    scr++;
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	3304      	adds	r3, #4
 8009828:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	061a      	lsls	r2, r3, #24
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009836:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	0a1b      	lsrs	r3, r3, #8
 800983c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009840:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	0e1b      	lsrs	r3, r3, #24
 8009846:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	373c      	adds	r7, #60	; 0x3c
 8009852:	46bd      	mov	sp, r7
 8009854:	bd90      	pop	{r4, r7, pc}

08009856 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03f      	beq.n	80098f0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e033      	b.n	80098de <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fe31 	bl	800b4e2 <SDIO_ReadFIFO>
 8009880:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	b2da      	uxtb	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	701a      	strb	r2, [r3, #0]
      tmp++;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	3b01      	subs	r3, #1
 8009894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	0a1b      	lsrs	r3, r3, #8
 800989a:	b2da      	uxtb	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	0c1b      	lsrs	r3, r3, #16
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3301      	adds	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3b01      	subs	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	0e1b      	lsrs	r3, r3, #24
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3301      	adds	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b07      	cmp	r3, #7
 80098e2:	d9c8      	bls.n	8009876 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80098f0:	bf00      	nop
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d043      	beq.n	800999a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
 8009916:	e037      	b.n	8009988 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3b01      	subs	r3, #1
 8009928:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	021a      	lsls	r2, r3, #8
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4313      	orrs	r3, r2
 8009934:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	3b01      	subs	r3, #1
 8009940:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	041a      	lsls	r2, r3, #16
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4313      	orrs	r3, r2
 800994c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3b01      	subs	r3, #1
 8009958:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	061a      	lsls	r2, r3, #24
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
 8009964:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	3b01      	subs	r3, #1
 8009970:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f107 0208 	add.w	r2, r7, #8
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fdbd 	bl	800b4fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	3301      	adds	r3, #1
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2b07      	cmp	r3, #7
 800998c:	d9c4      	bls.n	8009918 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800999a:	bf00      	nop
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e025      	b.n	8009a02 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7f9 fece 	bl	800376c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2202      	movs	r2, #2
 80099d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3304      	adds	r3, #4
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f001 fc60 	bl	800b2a8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	461a      	mov	r2, r3
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	f001 fccb 	bl	800b38e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e07b      	b.n	8009b14 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d108      	bne.n	8009a36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a2c:	d009      	beq.n	8009a42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	61da      	str	r2, [r3, #28]
 8009a34:	e005      	b.n	8009a42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7f9 fd09 	bl	8003474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2202      	movs	r2, #2
 8009a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac6:	ea42 0103 	orr.w	r1, r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	f003 0104 	and.w	r1, r3, #4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	f003 0210 	and.w	r2, r3, #16
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	69da      	ldr	r2, [r3, #28]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_SPI_Transmit+0x22>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e126      	b.n	8009d8c <HAL_SPI_Transmit+0x270>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b46:	f7f9 ffed 	bl	8003b24 <HAL_GetTick>
 8009b4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b4c:	88fb      	ldrh	r3, [r7, #6]
 8009b4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d002      	beq.n	8009b62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b60:	e10b      	b.n	8009d7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <HAL_SPI_Transmit+0x52>
 8009b68:	88fb      	ldrh	r3, [r7, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b72:	e102      	b.n	8009d7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2203      	movs	r2, #3
 8009b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	88fa      	ldrh	r2, [r7, #6]
 8009b8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	88fa      	ldrh	r2, [r7, #6]
 8009b92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bba:	d10f      	bne.n	8009bdc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d007      	beq.n	8009bfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c02:	d14b      	bne.n	8009c9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_SPI_Transmit+0xf6>
 8009c0c:	8afb      	ldrh	r3, [r7, #22]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d13e      	bne.n	8009c90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c22:	1c9a      	adds	r2, r3, #2
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c36:	e02b      	b.n	8009c90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d112      	bne.n	8009c6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c6a:	e011      	b.n	8009c90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c6c:	f7f9 ff5a 	bl	8003b24 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d803      	bhi.n	8009c84 <HAL_SPI_Transmit+0x168>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d102      	bne.n	8009c8a <HAL_SPI_Transmit+0x16e>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c8e:	e074      	b.n	8009d7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1ce      	bne.n	8009c38 <HAL_SPI_Transmit+0x11c>
 8009c9a:	e04c      	b.n	8009d36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_SPI_Transmit+0x18e>
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d140      	bne.n	8009d2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009cd0:	e02c      	b.n	8009d2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d113      	bne.n	8009d08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	330c      	adds	r3, #12
 8009cea:	7812      	ldrb	r2, [r2, #0]
 8009cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d06:	e011      	b.n	8009d2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d08:	f7f9 ff0c 	bl	8003b24 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d803      	bhi.n	8009d20 <HAL_SPI_Transmit+0x204>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1e:	d102      	bne.n	8009d26 <HAL_SPI_Transmit+0x20a>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d102      	bne.n	8009d2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d2a:	e026      	b.n	8009d7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1cd      	bne.n	8009cd2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 fbda 	bl	800a4f4 <SPI_EndRxTxTransaction>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	613b      	str	r3, [r7, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e000      	b.n	8009d7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8009d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3720      	adds	r7, #32
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af02      	add	r7, sp, #8
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4613      	mov	r3, r2
 8009da2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009db0:	d112      	bne.n	8009dd8 <HAL_SPI_Receive+0x44>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10e      	bne.n	8009dd8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009dc2:	88fa      	ldrh	r2, [r7, #6]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f8f1 	bl	8009fb6 <HAL_SPI_TransmitReceive>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	e0ea      	b.n	8009fae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_SPI_Receive+0x52>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e0e3      	b.n	8009fae <HAL_SPI_Receive+0x21a>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dee:	f7f9 fe99 	bl	8003b24 <HAL_GetTick>
 8009df2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d002      	beq.n	8009e06 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009e00:	2302      	movs	r3, #2
 8009e02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e04:	e0ca      	b.n	8009f9c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <HAL_SPI_Receive+0x7e>
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e16:	e0c1      	b.n	8009f9c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	88fa      	ldrh	r2, [r7, #6]
 8009e36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e5e:	d10f      	bne.n	8009e80 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b40      	cmp	r3, #64	; 0x40
 8009e8c:	d007      	beq.n	8009e9e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d162      	bne.n	8009f6c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ea6:	e02e      	b.n	8009f06 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d115      	bne.n	8009ee2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f103 020c 	add.w	r2, r3, #12
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	7812      	ldrb	r2, [r2, #0]
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ee0:	e011      	b.n	8009f06 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ee2:	f7f9 fe1f 	bl	8003b24 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d803      	bhi.n	8009efa <HAL_SPI_Receive+0x166>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef8:	d102      	bne.n	8009f00 <HAL_SPI_Receive+0x16c>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f04:	e04a      	b.n	8009f9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1cb      	bne.n	8009ea8 <HAL_SPI_Receive+0x114>
 8009f10:	e031      	b.n	8009f76 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d113      	bne.n	8009f48 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f32:	1c9a      	adds	r2, r3, #2
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f46:	e011      	b.n	8009f6c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f48:	f7f9 fdec 	bl	8003b24 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d803      	bhi.n	8009f60 <HAL_SPI_Receive+0x1cc>
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d102      	bne.n	8009f66 <HAL_SPI_Receive+0x1d2>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009f6a:	e017      	b.n	8009f9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1cd      	bne.n	8009f12 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fa54 	bl	800a428 <SPI_EndRxTransaction>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	75fb      	strb	r3, [r7, #23]
 8009f98:	e000      	b.n	8009f9c <HAL_SPI_Receive+0x208>
  }

error :
 8009f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b08c      	sub	sp, #48	; 0x30
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_SPI_TransmitReceive+0x26>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e18a      	b.n	800a2f2 <HAL_SPI_TransmitReceive+0x33c>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fe4:	f7f9 fd9e 	bl	8003b24 <HAL_GetTick>
 8009fe8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ffa:	887b      	ldrh	r3, [r7, #2]
 8009ffc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a002:	2b01      	cmp	r3, #1
 800a004:	d00f      	beq.n	800a026 <HAL_SPI_TransmitReceive+0x70>
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a00c:	d107      	bne.n	800a01e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d103      	bne.n	800a01e <HAL_SPI_TransmitReceive+0x68>
 800a016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	d003      	beq.n	800a026 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a01e:	2302      	movs	r3, #2
 800a020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a024:	e15b      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <HAL_SPI_TransmitReceive+0x82>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <HAL_SPI_TransmitReceive+0x82>
 800a032:	887b      	ldrh	r3, [r7, #2]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d103      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a03e:	e14e      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d003      	beq.n	800a054 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2205      	movs	r2, #5
 800a050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	887a      	ldrh	r2, [r7, #2]
 800a064:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	887a      	ldrh	r2, [r7, #2]
 800a06a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	887a      	ldrh	r2, [r7, #2]
 800a076:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	887a      	ldrh	r2, [r7, #2]
 800a07c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a094:	2b40      	cmp	r3, #64	; 0x40
 800a096:	d007      	beq.n	800a0a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b0:	d178      	bne.n	800a1a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <HAL_SPI_TransmitReceive+0x10a>
 800a0ba:	8b7b      	ldrh	r3, [r7, #26]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d166      	bne.n	800a18e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	881a      	ldrh	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	1c9a      	adds	r2, r3, #2
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0e4:	e053      	b.n	800a18e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d11b      	bne.n	800a12c <HAL_SPI_TransmitReceive+0x176>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d016      	beq.n	800a12c <HAL_SPI_TransmitReceive+0x176>
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	2b01      	cmp	r3, #1
 800a102:	d113      	bne.n	800a12c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a108:	881a      	ldrh	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	1c9a      	adds	r2, r3, #2
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a11e:	b29b      	uxth	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	b29a      	uxth	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b01      	cmp	r3, #1
 800a138:	d119      	bne.n	800a16e <HAL_SPI_TransmitReceive+0x1b8>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a13e:	b29b      	uxth	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d014      	beq.n	800a16e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	b292      	uxth	r2, r2
 800a150:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	1c9a      	adds	r2, r3, #2
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a160:	b29b      	uxth	r3, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a16a:	2301      	movs	r3, #1
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a16e:	f7f9 fcd9 	bl	8003b24 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d807      	bhi.n	800a18e <HAL_SPI_TransmitReceive+0x1d8>
 800a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a184:	d003      	beq.n	800a18e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a18c:	e0a7      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a192:	b29b      	uxth	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1a6      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x130>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1a1      	bne.n	800a0e6 <HAL_SPI_TransmitReceive+0x130>
 800a1a2:	e07c      	b.n	800a29e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <HAL_SPI_TransmitReceive+0x1fc>
 800a1ac:	8b7b      	ldrh	r3, [r7, #26]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d16b      	bne.n	800a28a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	7812      	ldrb	r2, [r2, #0]
 800a1be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1d8:	e057      	b.n	800a28a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f003 0302 	and.w	r3, r3, #2
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d11c      	bne.n	800a222 <HAL_SPI_TransmitReceive+0x26c>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d017      	beq.n	800a222 <HAL_SPI_TransmitReceive+0x26c>
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d114      	bne.n	800a222 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	330c      	adds	r3, #12
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d119      	bne.n	800a264 <HAL_SPI_TransmitReceive+0x2ae>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a234:	b29b      	uxth	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d014      	beq.n	800a264 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a244:	b2d2      	uxtb	r2, r2
 800a246:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a256:	b29b      	uxth	r3, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a260:	2301      	movs	r3, #1
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a264:	f7f9 fc5e 	bl	8003b24 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a270:	429a      	cmp	r2, r3
 800a272:	d803      	bhi.n	800a27c <HAL_SPI_TransmitReceive+0x2c6>
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27a:	d102      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x2cc>
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a288:	e029      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1a2      	bne.n	800a1da <HAL_SPI_TransmitReceive+0x224>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d19d      	bne.n	800a1da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f926 	bl	800a4f4 <SPI_EndRxTxTransaction>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d006      	beq.n	800a2bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a2ba:	e010      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10b      	bne.n	800a2dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	e000      	b.n	800a2de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a2dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a2ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3730      	adds	r7, #48	; 0x30
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a308:	b2db      	uxtb	r3, r3
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a328:	f7f9 fbfc 	bl	8003b24 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	1a9b      	subs	r3, r3, r2
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	4413      	add	r3, r2
 800a336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a338:	f7f9 fbf4 	bl	8003b24 <HAL_GetTick>
 800a33c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a33e:	4b39      	ldr	r3, [pc, #228]	; (800a424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	015b      	lsls	r3, r3, #5
 800a344:	0d1b      	lsrs	r3, r3, #20
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	fb02 f303 	mul.w	r3, r2, r3
 800a34c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a34e:	e054      	b.n	800a3fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d050      	beq.n	800a3fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a358:	f7f9 fbe4 	bl	8003b24 <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	69fa      	ldr	r2, [r7, #28]
 800a364:	429a      	cmp	r2, r3
 800a366:	d902      	bls.n	800a36e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d13d      	bne.n	800a3ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a37c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a386:	d111      	bne.n	800a3ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a390:	d004      	beq.n	800a39c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a39a:	d107      	bne.n	800a3ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3b4:	d10f      	bne.n	800a3d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e017      	b.n	800a41a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4013      	ands	r3, r2
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	429a      	cmp	r2, r3
 800a408:	bf0c      	ite	eq
 800a40a:	2301      	moveq	r3, #1
 800a40c:	2300      	movne	r3, #0
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	461a      	mov	r2, r3
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	429a      	cmp	r2, r3
 800a416:	d19b      	bne.n	800a350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20000000 	.word	0x20000000

0800a428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a43c:	d111      	bne.n	800a462 <SPI_EndRxTransaction+0x3a>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a446:	d004      	beq.n	800a452 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a450:	d107      	bne.n	800a462 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a460:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a46a:	d12a      	bne.n	800a4c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a474:	d012      	beq.n	800a49c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2200      	movs	r2, #0
 800a47e:	2180      	movs	r1, #128	; 0x80
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff ff49 	bl	800a318 <SPI_WaitFlagStateUntilTimeout>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d02d      	beq.n	800a4e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a490:	f043 0220 	orr.w	r2, r3, #32
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a498:	2303      	movs	r3, #3
 800a49a:	e026      	b.n	800a4ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7ff ff36 	bl	800a318 <SPI_WaitFlagStateUntilTimeout>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01a      	beq.n	800a4e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b6:	f043 0220 	orr.w	r2, r3, #32
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e013      	b.n	800a4ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff ff23 	bl	800a318 <SPI_WaitFlagStateUntilTimeout>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d007      	beq.n	800a4e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4dc:	f043 0220 	orr.w	r2, r3, #32
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e000      	b.n	800a4ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a500:	4b1b      	ldr	r3, [pc, #108]	; (800a570 <SPI_EndRxTxTransaction+0x7c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a1b      	ldr	r2, [pc, #108]	; (800a574 <SPI_EndRxTxTransaction+0x80>)
 800a506:	fba2 2303 	umull	r2, r3, r2, r3
 800a50a:	0d5b      	lsrs	r3, r3, #21
 800a50c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a51e:	d112      	bne.n	800a546 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	2180      	movs	r1, #128	; 0x80
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff fef4 	bl	800a318 <SPI_WaitFlagStateUntilTimeout>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d016      	beq.n	800a564 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53a:	f043 0220 	orr.w	r2, r3, #32
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e00f      	b.n	800a566 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	3b01      	subs	r3, #1
 800a550:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55c:	2b80      	cmp	r3, #128	; 0x80
 800a55e:	d0f2      	beq.n	800a546 <SPI_EndRxTxTransaction+0x52>
 800a560:	e000      	b.n	800a564 <SPI_EndRxTxTransaction+0x70>
        break;
 800a562:	bf00      	nop
  }

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000000 	.word	0x20000000
 800a574:	165e9f81 	.word	0x165e9f81

0800a578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e041      	b.n	800a60e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f8 ffd0 	bl	8003544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f000 fa96 	bl	800aae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d001      	beq.n	800a630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e04e      	b.n	800a6ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a23      	ldr	r2, [pc, #140]	; (800a6dc <HAL_TIM_Base_Start_IT+0xc4>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d022      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a65a:	d01d      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1f      	ldr	r2, [pc, #124]	; (800a6e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d018      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a1e      	ldr	r2, [pc, #120]	; (800a6e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d013      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a1c      	ldr	r2, [pc, #112]	; (800a6e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00e      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a1b      	ldr	r2, [pc, #108]	; (800a6ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d009      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a19      	ldr	r2, [pc, #100]	; (800a6f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d004      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0x80>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d111      	bne.n	800a6bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b06      	cmp	r3, #6
 800a6a8:	d010      	beq.n	800a6cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f042 0201 	orr.w	r2, r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ba:	e007      	b.n	800a6cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0201 	orr.w	r2, r2, #1
 800a6ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	40010000 	.word	0x40010000
 800a6e0:	40000400 	.word	0x40000400
 800a6e4:	40000800 	.word	0x40000800
 800a6e8:	40000c00 	.word	0x40000c00
 800a6ec:	40010400 	.word	0x40010400
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40001800 	.word	0x40001800

0800a6f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d122      	bne.n	800a754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d11b      	bne.n	800a754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f06f 0202 	mvn.w	r2, #2
 800a724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9b5 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a740:	e005      	b.n	800a74e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f9a7 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9b8 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d122      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d11b      	bne.n	800a7a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0204 	mvn.w	r2, #4
 800a778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f98b 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a794:	e005      	b.n	800a7a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f97d 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f98e 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d122      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d11b      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f06f 0208 	mvn.w	r2, #8
 800a7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	69db      	ldr	r3, [r3, #28]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f961 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a7e8:	e005      	b.n	800a7f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f953 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f964 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f003 0310 	and.w	r3, r3, #16
 800a806:	2b10      	cmp	r3, #16
 800a808:	d122      	bne.n	800a850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 0310 	and.w	r3, r3, #16
 800a814:	2b10      	cmp	r3, #16
 800a816:	d11b      	bne.n	800a850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0210 	mvn.w	r2, #16
 800a820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2208      	movs	r2, #8
 800a826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f937 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a83c:	e005      	b.n	800a84a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f929 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f93a 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d10e      	bne.n	800a87c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d107      	bne.n	800a87c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0201 	mvn.w	r2, #1
 800a874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7f7 ff1c 	bl	80026b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a886:	2b80      	cmp	r3, #128	; 0x80
 800a888:	d10e      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a894:	2b80      	cmp	r3, #128	; 0x80
 800a896:	d107      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fae0 	bl	800ae68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b2:	2b40      	cmp	r3, #64	; 0x40
 800a8b4:	d10e      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c0:	2b40      	cmp	r3, #64	; 0x40
 800a8c2:	d107      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f8ff 	bl	800aad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d10e      	bne.n	800a900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0320 	and.w	r3, r3, #32
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d107      	bne.n	800a900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f06f 0220 	mvn.w	r2, #32
 800a8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 faaa 	bl	800ae54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_TIM_ConfigClockSource+0x1c>
 800a920:	2302      	movs	r3, #2
 800a922:	e0b4      	b.n	800aa8e <HAL_TIM_ConfigClockSource+0x186>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a94a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a95c:	d03e      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0xd4>
 800a95e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a962:	f200 8087 	bhi.w	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a96a:	f000 8086 	beq.w	800aa7a <HAL_TIM_ConfigClockSource+0x172>
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a972:	d87f      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a974:	2b70      	cmp	r3, #112	; 0x70
 800a976:	d01a      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0xa6>
 800a978:	2b70      	cmp	r3, #112	; 0x70
 800a97a:	d87b      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a97c:	2b60      	cmp	r3, #96	; 0x60
 800a97e:	d050      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x11a>
 800a980:	2b60      	cmp	r3, #96	; 0x60
 800a982:	d877      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a984:	2b50      	cmp	r3, #80	; 0x50
 800a986:	d03c      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0xfa>
 800a988:	2b50      	cmp	r3, #80	; 0x50
 800a98a:	d873      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a98c:	2b40      	cmp	r3, #64	; 0x40
 800a98e:	d058      	beq.n	800aa42 <HAL_TIM_ConfigClockSource+0x13a>
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	d86f      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a994:	2b30      	cmp	r3, #48	; 0x30
 800a996:	d064      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a998:	2b30      	cmp	r3, #48	; 0x30
 800a99a:	d86b      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d060      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d867      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d05c      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9a8:	2b10      	cmp	r3, #16
 800a9aa:	d05a      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9ac:	e062      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	6899      	ldr	r1, [r3, #8]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f000 f9ad 	bl	800ad1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	609a      	str	r2, [r3, #8]
      break;
 800a9da:	e04f      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	6899      	ldr	r1, [r3, #8]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f000 f996 	bl	800ad1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9fe:	609a      	str	r2, [r3, #8]
      break;
 800aa00:	e03c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6859      	ldr	r1, [r3, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f000 f90a 	bl	800ac28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2150      	movs	r1, #80	; 0x50
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f963 	bl	800ace6 <TIM_ITRx_SetConfig>
      break;
 800aa20:	e02c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	6859      	ldr	r1, [r3, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f000 f929 	bl	800ac86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2160      	movs	r1, #96	; 0x60
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f953 	bl	800ace6 <TIM_ITRx_SetConfig>
      break;
 800aa40:	e01c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f000 f8ea 	bl	800ac28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2140      	movs	r1, #64	; 0x40
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 f943 	bl	800ace6 <TIM_ITRx_SetConfig>
      break;
 800aa60:	e00c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f000 f93a 	bl	800ace6 <TIM_ITRx_SetConfig>
      break;
 800aa72:	e003      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]
      break;
 800aa78:	e000      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa9e:	bf00      	nop
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
	...

0800aae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a40      	ldr	r2, [pc, #256]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d013      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab06:	d00f      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a3d      	ldr	r2, [pc, #244]	; (800ac00 <TIM_Base_SetConfig+0x118>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d00b      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a3c      	ldr	r2, [pc, #240]	; (800ac04 <TIM_Base_SetConfig+0x11c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d007      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a3b      	ldr	r2, [pc, #236]	; (800ac08 <TIM_Base_SetConfig+0x120>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d003      	beq.n	800ab28 <TIM_Base_SetConfig+0x40>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a3a      	ldr	r2, [pc, #232]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d108      	bne.n	800ab3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a2f      	ldr	r2, [pc, #188]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d02b      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab48:	d027      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a2c      	ldr	r2, [pc, #176]	; (800ac00 <TIM_Base_SetConfig+0x118>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d023      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a2b      	ldr	r2, [pc, #172]	; (800ac04 <TIM_Base_SetConfig+0x11c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d01f      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a2a      	ldr	r2, [pc, #168]	; (800ac08 <TIM_Base_SetConfig+0x120>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01b      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a29      	ldr	r2, [pc, #164]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d017      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a28      	ldr	r2, [pc, #160]	; (800ac10 <TIM_Base_SetConfig+0x128>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d013      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <TIM_Base_SetConfig+0x12c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00f      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a26      	ldr	r2, [pc, #152]	; (800ac18 <TIM_Base_SetConfig+0x130>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00b      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a25      	ldr	r2, [pc, #148]	; (800ac1c <TIM_Base_SetConfig+0x134>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d007      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a24      	ldr	r2, [pc, #144]	; (800ac20 <TIM_Base_SetConfig+0x138>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d003      	beq.n	800ab9a <TIM_Base_SetConfig+0xb2>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a23      	ldr	r2, [pc, #140]	; (800ac24 <TIM_Base_SetConfig+0x13c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d108      	bne.n	800abac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a0a      	ldr	r2, [pc, #40]	; (800abfc <TIM_Base_SetConfig+0x114>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d003      	beq.n	800abe0 <TIM_Base_SetConfig+0xf8>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <TIM_Base_SetConfig+0x124>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d103      	bne.n	800abe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	615a      	str	r2, [r3, #20]
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40014400 	.word	0x40014400
 800ac18:	40014800 	.word	0x40014800
 800ac1c:	40001800 	.word	0x40001800
 800ac20:	40001c00 	.word	0x40001c00
 800ac24:	40002000 	.word	0x40002000

0800ac28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	f023 0201 	bic.w	r2, r3, #1
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	011b      	lsls	r3, r3, #4
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f023 030a 	bic.w	r3, r3, #10
 800ac64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	621a      	str	r2, [r3, #32]
}
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b087      	sub	sp, #28
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	60f8      	str	r0, [r7, #12]
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	f023 0210 	bic.w	r2, r3, #16
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	031b      	lsls	r3, r3, #12
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	4313      	orrs	r3, r2
 800acba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	4313      	orrs	r3, r2
 800accc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	621a      	str	r2, [r3, #32]
}
 800acda:	bf00      	nop
 800acdc:	371c      	adds	r7, #28
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b085      	sub	sp, #20
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f043 0307 	orr.w	r3, r3, #7
 800ad08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	609a      	str	r2, [r3, #8]
}
 800ad10:	bf00      	nop
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	021a      	lsls	r2, r3, #8
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	609a      	str	r2, [r3, #8]
}
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e05a      	b.n	800ae2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a21      	ldr	r2, [pc, #132]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d022      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc0:	d01d      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1d      	ldr	r2, [pc, #116]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d018      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1b      	ldr	r2, [pc, #108]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d013      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1a      	ldr	r2, [pc, #104]	; (800ae44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00e      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a18      	ldr	r2, [pc, #96]	; (800ae48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d009      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a17      	ldr	r2, [pc, #92]	; (800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d004      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d10c      	bne.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	40000400 	.word	0x40000400
 800ae40:	40000800 	.word	0x40000800
 800ae44:	40000c00 	.word	0x40000c00
 800ae48:	40010400 	.word	0x40010400
 800ae4c:	40014000 	.word	0x40014000
 800ae50:	40001800 	.word	0x40001800

0800ae54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e03f      	b.n	800af0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7f8 fb74 	bl	8003590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2224      	movs	r2, #36	; 0x24
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f829 	bl	800af18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	695a      	ldr	r2, [r3, #20]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2220      	movs	r2, #32
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2220      	movs	r2, #32
 800af08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	b09f      	sub	sp, #124	; 0x7c
 800af1e:	af00      	add	r7, sp, #0
 800af20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2e:	68d9      	ldr	r1, [r3, #12]
 800af30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	ea40 0301 	orr.w	r3, r0, r1
 800af38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af3c:	689a      	ldr	r2, [r3, #8]
 800af3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	431a      	orrs	r2, r3
 800af44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	431a      	orrs	r2, r3
 800af4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	4313      	orrs	r3, r2
 800af50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800af52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af5c:	f021 010c 	bic.w	r1, r1, #12
 800af60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af66:	430b      	orrs	r3, r1
 800af68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af76:	6999      	ldr	r1, [r3, #24]
 800af78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	ea40 0301 	orr.w	r3, r0, r1
 800af80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4bc5      	ldr	r3, [pc, #788]	; (800b29c <UART_SetConfig+0x384>)
 800af88:	429a      	cmp	r2, r3
 800af8a:	d004      	beq.n	800af96 <UART_SetConfig+0x7e>
 800af8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	4bc3      	ldr	r3, [pc, #780]	; (800b2a0 <UART_SetConfig+0x388>)
 800af92:	429a      	cmp	r2, r3
 800af94:	d103      	bne.n	800af9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af96:	f7fc fce3 	bl	8007960 <HAL_RCC_GetPCLK2Freq>
 800af9a:	6778      	str	r0, [r7, #116]	; 0x74
 800af9c:	e002      	b.n	800afa4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af9e:	f7fc fccb 	bl	8007938 <HAL_RCC_GetPCLK1Freq>
 800afa2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afac:	f040 80b6 	bne.w	800b11c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afb2:	461c      	mov	r4, r3
 800afb4:	f04f 0500 	mov.w	r5, #0
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	1891      	adds	r1, r2, r2
 800afbe:	6439      	str	r1, [r7, #64]	; 0x40
 800afc0:	415b      	adcs	r3, r3
 800afc2:	647b      	str	r3, [r7, #68]	; 0x44
 800afc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800afc8:	1912      	adds	r2, r2, r4
 800afca:	eb45 0303 	adc.w	r3, r5, r3
 800afce:	f04f 0000 	mov.w	r0, #0
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	00d9      	lsls	r1, r3, #3
 800afd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afdc:	00d0      	lsls	r0, r2, #3
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	1911      	adds	r1, r2, r4
 800afe4:	6639      	str	r1, [r7, #96]	; 0x60
 800afe6:	416b      	adcs	r3, r5
 800afe8:	667b      	str	r3, [r7, #100]	; 0x64
 800afea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	461a      	mov	r2, r3
 800aff0:	f04f 0300 	mov.w	r3, #0
 800aff4:	1891      	adds	r1, r2, r2
 800aff6:	63b9      	str	r1, [r7, #56]	; 0x38
 800aff8:	415b      	adcs	r3, r3
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b000:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b004:	f7f5 f8fc 	bl	8000200 <__aeabi_uldivmod>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4ba5      	ldr	r3, [pc, #660]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b00e:	fba3 2302 	umull	r2, r3, r3, r2
 800b012:	095b      	lsrs	r3, r3, #5
 800b014:	011e      	lsls	r6, r3, #4
 800b016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b018:	461c      	mov	r4, r3
 800b01a:	f04f 0500 	mov.w	r5, #0
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	1891      	adds	r1, r2, r2
 800b024:	6339      	str	r1, [r7, #48]	; 0x30
 800b026:	415b      	adcs	r3, r3
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
 800b02a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b02e:	1912      	adds	r2, r2, r4
 800b030:	eb45 0303 	adc.w	r3, r5, r3
 800b034:	f04f 0000 	mov.w	r0, #0
 800b038:	f04f 0100 	mov.w	r1, #0
 800b03c:	00d9      	lsls	r1, r3, #3
 800b03e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b042:	00d0      	lsls	r0, r2, #3
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	1911      	adds	r1, r2, r4
 800b04a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b04c:	416b      	adcs	r3, r5
 800b04e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	461a      	mov	r2, r3
 800b056:	f04f 0300 	mov.w	r3, #0
 800b05a:	1891      	adds	r1, r2, r2
 800b05c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b05e:	415b      	adcs	r3, r3
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b066:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b06a:	f7f5 f8c9 	bl	8000200 <__aeabi_uldivmod>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4b8c      	ldr	r3, [pc, #560]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b074:	fba3 1302 	umull	r1, r3, r3, r2
 800b078:	095b      	lsrs	r3, r3, #5
 800b07a:	2164      	movs	r1, #100	; 0x64
 800b07c:	fb01 f303 	mul.w	r3, r1, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	3332      	adds	r3, #50	; 0x32
 800b086:	4a87      	ldr	r2, [pc, #540]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b088:	fba2 2303 	umull	r2, r3, r2, r3
 800b08c:	095b      	lsrs	r3, r3, #5
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b094:	441e      	add	r6, r3
 800b096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b098:	4618      	mov	r0, r3
 800b09a:	f04f 0100 	mov.w	r1, #0
 800b09e:	4602      	mov	r2, r0
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	1894      	adds	r4, r2, r2
 800b0a4:	623c      	str	r4, [r7, #32]
 800b0a6:	415b      	adcs	r3, r3
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0ae:	1812      	adds	r2, r2, r0
 800b0b0:	eb41 0303 	adc.w	r3, r1, r3
 800b0b4:	f04f 0400 	mov.w	r4, #0
 800b0b8:	f04f 0500 	mov.w	r5, #0
 800b0bc:	00dd      	lsls	r5, r3, #3
 800b0be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0c2:	00d4      	lsls	r4, r2, #3
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	1814      	adds	r4, r2, r0
 800b0ca:	653c      	str	r4, [r7, #80]	; 0x50
 800b0cc:	414b      	adcs	r3, r1
 800b0ce:	657b      	str	r3, [r7, #84]	; 0x54
 800b0d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	f04f 0300 	mov.w	r3, #0
 800b0da:	1891      	adds	r1, r2, r2
 800b0dc:	61b9      	str	r1, [r7, #24]
 800b0de:	415b      	adcs	r3, r3
 800b0e0:	61fb      	str	r3, [r7, #28]
 800b0e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b0ea:	f7f5 f889 	bl	8000200 <__aeabi_uldivmod>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4b6c      	ldr	r3, [pc, #432]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b0f8:	095b      	lsrs	r3, r3, #5
 800b0fa:	2164      	movs	r1, #100	; 0x64
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	00db      	lsls	r3, r3, #3
 800b104:	3332      	adds	r3, #50	; 0x32
 800b106:	4a67      	ldr	r2, [pc, #412]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	f003 0207 	and.w	r2, r3, #7
 800b112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4432      	add	r2, r6
 800b118:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b11a:	e0b9      	b.n	800b290 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b11c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b11e:	461c      	mov	r4, r3
 800b120:	f04f 0500 	mov.w	r5, #0
 800b124:	4622      	mov	r2, r4
 800b126:	462b      	mov	r3, r5
 800b128:	1891      	adds	r1, r2, r2
 800b12a:	6139      	str	r1, [r7, #16]
 800b12c:	415b      	adcs	r3, r3
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b134:	1912      	adds	r2, r2, r4
 800b136:	eb45 0303 	adc.w	r3, r5, r3
 800b13a:	f04f 0000 	mov.w	r0, #0
 800b13e:	f04f 0100 	mov.w	r1, #0
 800b142:	00d9      	lsls	r1, r3, #3
 800b144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b148:	00d0      	lsls	r0, r2, #3
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	eb12 0804 	adds.w	r8, r2, r4
 800b152:	eb43 0905 	adc.w	r9, r3, r5
 800b156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f04f 0100 	mov.w	r1, #0
 800b160:	f04f 0200 	mov.w	r2, #0
 800b164:	f04f 0300 	mov.w	r3, #0
 800b168:	008b      	lsls	r3, r1, #2
 800b16a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b16e:	0082      	lsls	r2, r0, #2
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 f844 	bl	8000200 <__aeabi_uldivmod>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4b49      	ldr	r3, [pc, #292]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b17e:	fba3 2302 	umull	r2, r3, r3, r2
 800b182:	095b      	lsrs	r3, r3, #5
 800b184:	011e      	lsls	r6, r3, #4
 800b186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b188:	4618      	mov	r0, r3
 800b18a:	f04f 0100 	mov.w	r1, #0
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	1894      	adds	r4, r2, r2
 800b194:	60bc      	str	r4, [r7, #8]
 800b196:	415b      	adcs	r3, r3
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b19e:	1812      	adds	r2, r2, r0
 800b1a0:	eb41 0303 	adc.w	r3, r1, r3
 800b1a4:	f04f 0400 	mov.w	r4, #0
 800b1a8:	f04f 0500 	mov.w	r5, #0
 800b1ac:	00dd      	lsls	r5, r3, #3
 800b1ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b1b2:	00d4      	lsls	r4, r2, #3
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	462b      	mov	r3, r5
 800b1b8:	1814      	adds	r4, r2, r0
 800b1ba:	64bc      	str	r4, [r7, #72]	; 0x48
 800b1bc:	414b      	adcs	r3, r1
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f04f 0100 	mov.w	r1, #0
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	008b      	lsls	r3, r1, #2
 800b1d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b1d8:	0082      	lsls	r2, r0, #2
 800b1da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b1de:	f7f5 f80f 	bl	8000200 <__aeabi_uldivmod>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4b2f      	ldr	r3, [pc, #188]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b1e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b1ec:	095b      	lsrs	r3, r3, #5
 800b1ee:	2164      	movs	r1, #100	; 0x64
 800b1f0:	fb01 f303 	mul.w	r3, r1, r3
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	3332      	adds	r3, #50	; 0x32
 800b1fa:	4a2a      	ldr	r2, [pc, #168]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b200:	095b      	lsrs	r3, r3, #5
 800b202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b206:	441e      	add	r6, r3
 800b208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b20a:	4618      	mov	r0, r3
 800b20c:	f04f 0100 	mov.w	r1, #0
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	1894      	adds	r4, r2, r2
 800b216:	603c      	str	r4, [r7, #0]
 800b218:	415b      	adcs	r3, r3
 800b21a:	607b      	str	r3, [r7, #4]
 800b21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b220:	1812      	adds	r2, r2, r0
 800b222:	eb41 0303 	adc.w	r3, r1, r3
 800b226:	f04f 0400 	mov.w	r4, #0
 800b22a:	f04f 0500 	mov.w	r5, #0
 800b22e:	00dd      	lsls	r5, r3, #3
 800b230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b234:	00d4      	lsls	r4, r2, #3
 800b236:	4622      	mov	r2, r4
 800b238:	462b      	mov	r3, r5
 800b23a:	eb12 0a00 	adds.w	sl, r2, r0
 800b23e:	eb43 0b01 	adc.w	fp, r3, r1
 800b242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4618      	mov	r0, r3
 800b248:	f04f 0100 	mov.w	r1, #0
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	f04f 0300 	mov.w	r3, #0
 800b254:	008b      	lsls	r3, r1, #2
 800b256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b25a:	0082      	lsls	r2, r0, #2
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f4 ffce 	bl	8000200 <__aeabi_uldivmod>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4b0e      	ldr	r3, [pc, #56]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b26a:	fba3 1302 	umull	r1, r3, r3, r2
 800b26e:	095b      	lsrs	r3, r3, #5
 800b270:	2164      	movs	r1, #100	; 0x64
 800b272:	fb01 f303 	mul.w	r3, r1, r3
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	011b      	lsls	r3, r3, #4
 800b27a:	3332      	adds	r3, #50	; 0x32
 800b27c:	4a09      	ldr	r2, [pc, #36]	; (800b2a4 <UART_SetConfig+0x38c>)
 800b27e:	fba2 2303 	umull	r2, r3, r2, r3
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	f003 020f 	and.w	r2, r3, #15
 800b288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4432      	add	r2, r6
 800b28e:	609a      	str	r2, [r3, #8]
}
 800b290:	bf00      	nop
 800b292:	377c      	adds	r7, #124	; 0x7c
 800b294:	46bd      	mov	sp, r7
 800b296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29a:	bf00      	nop
 800b29c:	40011000 	.word	0x40011000
 800b2a0:	40011400 	.word	0x40011400
 800b2a4:	51eb851f 	.word	0x51eb851f

0800b2a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d029      	beq.n	800b316 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b2ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2d2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b2dc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800b2e2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800b2e8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800b2ee:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800b2f4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800b2fa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800b300:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800b306:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e034      	b.n	800b380 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b322:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b32c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b332:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4313      	orrs	r3, r2
 800b338:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b346:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b34a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b354:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800b35a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800b360:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800b366:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800b36c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	4313      	orrs	r3, r2
 800b372:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b38e:	b480      	push	{r7}
 800b390:	b087      	sub	sp, #28
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d02e      	beq.n	800b406 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3b4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b3c4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b3ce:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b3d8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b3e2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b3ec:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	609a      	str	r2, [r3, #8]
 800b404:	e03b      	b.n	800b47e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b416:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	3b01      	subs	r3, #1
 800b426:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b428:	4313      	orrs	r3, r2
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b43c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	3b01      	subs	r3, #1
 800b44a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b44c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	3b01      	subs	r3, #1
 800b454:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800b456:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800b460:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	3b01      	subs	r3, #1
 800b468:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800b46a:	4313      	orrs	r3, r2
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4313      	orrs	r3, r2
 800b470:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b48c:	b084      	sub	sp, #16
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	f107 001c 	add.w	r0, r7, #28
 800b49a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b4a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b4a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b4aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b4ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b4b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b4b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b4c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	b004      	add	sp, #16
 800b4e0:	4770      	bx	lr

0800b4e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2203      	movs	r2, #3
 800b52a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b52c:	2002      	movs	r0, #2
 800b52e:	f7f8 fb05 	bl	8003b3c <HAL_Delay>
  
  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0303 	and.w	r3, r3, #3
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b576:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b57c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b582:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4313      	orrs	r3, r2
 800b588:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b592:	f023 030f 	bic.w	r3, r3, #15
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	431a      	orrs	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	b2db      	uxtb	r3, r3
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	4413      	add	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
}  
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b612:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b618:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b61e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	431a      	orrs	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b636:	2300      	movs	r3, #0

}
 800b638:	4618      	mov	r0, r3
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b652:	2310      	movs	r3, #16
 800b654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b662:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b664:	f107 0308 	add.w	r3, r7, #8
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff74 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b670:	f241 3288 	movw	r2, #5000	; 0x1388
 800b674:	2110      	movs	r1, #16
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa44 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b67c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67e:	69fb      	ldr	r3, [r7, #28]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b696:	2311      	movs	r3, #17
 800b698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b69a:	2340      	movs	r3, #64	; 0x40
 800b69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6a8:	f107 0308 	add.w	r3, r7, #8
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff ff52 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b6b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b8:	2111      	movs	r1, #17
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fa22 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b6da:	2312      	movs	r3, #18
 800b6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6ec:	f107 0308 	add.w	r3, r7, #8
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff ff30 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fc:	2112      	movs	r1, #18
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fa00 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b706:	69fb      	ldr	r3, [r7, #28]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b71e:	2318      	movs	r3, #24
 800b720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b722:	2340      	movs	r3, #64	; 0x40
 800b724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b726:	2300      	movs	r3, #0
 800b728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b72e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff ff0e 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b740:	2118      	movs	r1, #24
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9de 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b74a:	69fb      	ldr	r3, [r7, #28]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b762:	2319      	movs	r3, #25
 800b764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b766:	2340      	movs	r3, #64	; 0x40
 800b768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b772:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b774:	f107 0308 	add.w	r3, r7, #8
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff feec 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b780:	f241 3288 	movw	r2, #5000	; 0x1388
 800b784:	2119      	movs	r1, #25
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f9bc 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b78c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b78e:	69fb      	ldr	r3, [r7, #28]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b7a4:	230c      	movs	r3, #12
 800b7a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7a8:	2340      	movs	r3, #64	; 0x40
 800b7aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7b6:	f107 0308 	add.w	r3, r7, #8
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fecb 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b7c2:	4a05      	ldr	r2, [pc, #20]	; (800b7d8 <SDMMC_CmdStopTransfer+0x40>)
 800b7c4:	210c      	movs	r1, #12
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f99c 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b7cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	05f5e100 	.word	0x05f5e100

0800b7dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b7ec:	2307      	movs	r3, #7
 800b7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7fe:	f107 0310 	add.w	r3, r7, #16
 800b802:	4619      	mov	r1, r3
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7ff fea7 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b80a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b80e:	2107      	movs	r1, #7
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f977 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b816:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3728      	adds	r7, #40	; 0x28
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b088      	sub	sp, #32
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b83e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b840:	f107 0308 	add.w	r3, r7, #8
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff fe86 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f92d 	bl	800baac <SDMMC_GetCmdError>
 800b852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b854:	69fb      	ldr	r3, [r7, #28]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3720      	adds	r7, #32
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b088      	sub	sp, #32
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b866:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b86a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b86c:	2308      	movs	r3, #8
 800b86e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b87c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b87e:	f107 0308 	add.w	r3, r7, #8
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fe67 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fb24 	bl	800bed8 <SDMMC_GetCmdResp7>
 800b890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b8aa:	2337      	movs	r3, #55	; 0x37
 800b8ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8ae:	2340      	movs	r3, #64	; 0x40
 800b8b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8bc:	f107 0308 	add.w	r3, r7, #8
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fe48 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8cc:	2137      	movs	r1, #55	; 0x37
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f918 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b8d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b8f6:	2329      	movs	r3, #41	; 0x29
 800b8f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8fe:	2300      	movs	r3, #0
 800b900:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b906:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b908:	f107 0308 	add.w	r3, r7, #8
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fe22 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fa2b 	bl	800bd70 <SDMMC_GetCmdResp3>
 800b91a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b91c:	69fb      	ldr	r3, [r7, #28]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3720      	adds	r7, #32
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b088      	sub	sp, #32
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b934:	2306      	movs	r3, #6
 800b936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b938:	2340      	movs	r3, #64	; 0x40
 800b93a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b944:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7ff fe03 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b952:	f241 3288 	movw	r2, #5000	; 0x1388
 800b956:	2106      	movs	r1, #6
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f8d3 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b95e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b960:	69fb      	ldr	r3, [r7, #28]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3720      	adds	r7, #32
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b088      	sub	sp, #32
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b972:	2300      	movs	r3, #0
 800b974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b976:	2333      	movs	r3, #51	; 0x33
 800b978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b97e:	2300      	movs	r3, #0
 800b980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b986:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b988:	f107 0308 	add.w	r3, r7, #8
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fde2 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b994:	f241 3288 	movw	r2, #5000	; 0x1388
 800b998:	2133      	movs	r1, #51	; 0x33
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f8b2 	bl	800bb04 <SDMMC_GetCmdResp1>
 800b9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9a2:	69fb      	ldr	r3, [r7, #28]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3720      	adds	r7, #32
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b9bc:	23c0      	movs	r3, #192	; 0xc0
 800b9be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9ca:	f107 0308 	add.w	r3, r7, #8
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff fdc1 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f982 	bl	800bce0 <SDMMC_GetCmdResp2>
 800b9dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b9f6:	2309      	movs	r3, #9
 800b9f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b9fa:	23c0      	movs	r3, #192	; 0xc0
 800b9fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba08:	f107 0308 	add.w	r3, r7, #8
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fda2 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f963 	bl	800bce0 <SDMMC_GetCmdResp2>
 800ba1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ba34:	2303      	movs	r3, #3
 800ba36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba38:	2340      	movs	r3, #64	; 0x40
 800ba3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba46:	f107 0308 	add.w	r3, r7, #8
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff fd83 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	2103      	movs	r1, #3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f9c8 	bl	800bdec <SDMMC_GetCmdResp6>
 800ba5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba5e:	69fb      	ldr	r3, [r7, #28]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3720      	adds	r7, #32
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba76:	230d      	movs	r3, #13
 800ba78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba7a:	2340      	movs	r3, #64	; 0x40
 800ba7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba88:	f107 0308 	add.w	r3, r7, #8
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7ff fd62 	bl	800b558 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ba94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba98:	210d      	movs	r1, #13
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f832 	bl	800bb04 <SDMMC_GetCmdResp1>
 800baa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa2:	69fb      	ldr	r3, [r7, #28]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab4:	4b11      	ldr	r3, [pc, #68]	; (800bafc <SDMMC_GetCmdError+0x50>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a11      	ldr	r2, [pc, #68]	; (800bb00 <SDMMC_GetCmdError+0x54>)
 800baba:	fba2 2303 	umull	r2, r3, r2, r3
 800babe:	0a5b      	lsrs	r3, r3, #9
 800bac0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac4:	fb02 f303 	mul.w	r3, r2, r3
 800bac8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	1e5a      	subs	r2, r3, #1
 800bace:	60fa      	str	r2, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad8:	e009      	b.n	800baee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0f1      	beq.n	800baca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	22c5      	movs	r2, #197	; 0xc5
 800baea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	20000000 	.word	0x20000000
 800bb00:	10624dd3 	.word	0x10624dd3

0800bb04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bb12:	4b70      	ldr	r3, [pc, #448]	; (800bcd4 <SDMMC_GetCmdResp1+0x1d0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a70      	ldr	r2, [pc, #448]	; (800bcd8 <SDMMC_GetCmdResp1+0x1d4>)
 800bb18:	fba2 2303 	umull	r2, r3, r2, r3
 800bb1c:	0a5a      	lsrs	r2, r3, #9
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	fb02 f303 	mul.w	r3, r2, r3
 800bb24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	1e5a      	subs	r2, r3, #1
 800bb2a:	61fa      	str	r2, [r7, #28]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d102      	bne.n	800bb36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb34:	e0c9      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0ef      	beq.n	800bb26 <SDMMC_GetCmdResp1+0x22>
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1ea      	bne.n	800bb26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2204      	movs	r2, #4
 800bb60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb62:	2304      	movs	r3, #4
 800bb64:	e0b1      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2201      	movs	r2, #1
 800bb76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e0a6      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	22c5      	movs	r2, #197	; 0xc5
 800bb80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fd12 	bl	800b5ac <SDIO_GetCommandResponse>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d001      	beq.n	800bb96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e099      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bb96:	2100      	movs	r1, #0
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fd14 	bl	800b5c6 <SDIO_GetResponse>
 800bb9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	4b4e      	ldr	r3, [pc, #312]	; (800bcdc <SDMMC_GetCmdResp1+0x1d8>)
 800bba4:	4013      	ands	r3, r2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e08d      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	da02      	bge.n	800bbba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bbb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbb8:	e087      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	e080      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bbd2:	2380      	movs	r3, #128	; 0x80
 800bbd4:	e079      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d002      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bbe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbe4:	e071      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bbf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf4:	e069      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc04:	e061      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc14:	e059      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc24:	e051      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc34:	e049      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc44:	e041      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bc50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc54:	e039      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc64:	e031      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc74:	e029      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc84:	e021      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bc94:	e019      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bca4:	e011      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bcb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bcb4:	e009      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bcc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bcc4:	e001      	b.n	800bcca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000000 	.word	0x20000000
 800bcd8:	10624dd3 	.word	0x10624dd3
 800bcdc:	fdffe008 	.word	0xfdffe008

0800bce0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bce8:	4b1f      	ldr	r3, [pc, #124]	; (800bd68 <SDMMC_GetCmdResp2+0x88>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1f      	ldr	r2, [pc, #124]	; (800bd6c <SDMMC_GetCmdResp2+0x8c>)
 800bcee:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf2:	0a5b      	lsrs	r3, r3, #9
 800bcf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf8:	fb02 f303 	mul.w	r3, r2, r3
 800bcfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1e5a      	subs	r2, r3, #1
 800bd02:	60fa      	str	r2, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd0c:	e026      	b.n	800bd5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0ef      	beq.n	800bcfe <SDMMC_GetCmdResp2+0x1e>
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1ea      	bne.n	800bcfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2c:	f003 0304 	and.w	r3, r3, #4
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2204      	movs	r2, #4
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	e00e      	b.n	800bd5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d004      	beq.n	800bd54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e003      	b.n	800bd5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	22c5      	movs	r2, #197	; 0xc5
 800bd58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	20000000 	.word	0x20000000
 800bd6c:	10624dd3 	.word	0x10624dd3

0800bd70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd78:	4b1a      	ldr	r3, [pc, #104]	; (800bde4 <SDMMC_GetCmdResp3+0x74>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a1a      	ldr	r2, [pc, #104]	; (800bde8 <SDMMC_GetCmdResp3+0x78>)
 800bd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd82:	0a5b      	lsrs	r3, r3, #9
 800bd84:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd88:	fb02 f303 	mul.w	r3, r2, r3
 800bd8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	1e5a      	subs	r2, r3, #1
 800bd92:	60fa      	str	r2, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd9c:	e01b      	b.n	800bdd6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0ef      	beq.n	800bd8e <SDMMC_GetCmdResp3+0x1e>
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1ea      	bne.n	800bd8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d004      	beq.n	800bdce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2204      	movs	r2, #4
 800bdc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdca:	2304      	movs	r3, #4
 800bdcc:	e003      	b.n	800bdd6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	22c5      	movs	r2, #197	; 0xc5
 800bdd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	20000000 	.word	0x20000000
 800bde8:	10624dd3 	.word	0x10624dd3

0800bdec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdfa:	4b35      	ldr	r3, [pc, #212]	; (800bed0 <SDMMC_GetCmdResp6+0xe4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a35      	ldr	r2, [pc, #212]	; (800bed4 <SDMMC_GetCmdResp6+0xe8>)
 800be00:	fba2 2303 	umull	r2, r3, r2, r3
 800be04:	0a5b      	lsrs	r3, r3, #9
 800be06:	f241 3288 	movw	r2, #5000	; 0x1388
 800be0a:	fb02 f303 	mul.w	r3, r2, r3
 800be0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	1e5a      	subs	r2, r3, #1
 800be14:	61fa      	str	r2, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d102      	bne.n	800be20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be1e:	e052      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0ef      	beq.n	800be10 <SDMMC_GetCmdResp6+0x24>
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1ea      	bne.n	800be10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be3e:	f003 0304 	and.w	r3, r3, #4
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2204      	movs	r2, #4
 800be4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be4c:	2304      	movs	r3, #4
 800be4e:	e03a      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d004      	beq.n	800be66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2201      	movs	r2, #1
 800be60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be62:	2301      	movs	r3, #1
 800be64:	e02f      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fba0 	bl	800b5ac <SDIO_GetCommandResponse>
 800be6c:	4603      	mov	r3, r0
 800be6e:	461a      	mov	r2, r3
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	4293      	cmp	r3, r2
 800be74:	d001      	beq.n	800be7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be76:	2301      	movs	r3, #1
 800be78:	e025      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	22c5      	movs	r2, #197	; 0xc5
 800be7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800be80:	2100      	movs	r1, #0
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f7ff fb9f 	bl	800b5c6 <SDIO_GetResponse>
 800be88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d106      	bne.n	800bea2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	b29a      	uxth	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e011      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800beac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800beb0:	e009      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bec0:	e001      	b.n	800bec6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3720      	adds	r7, #32
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20000000 	.word	0x20000000
 800bed4:	10624dd3 	.word	0x10624dd3

0800bed8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bee0:	4b22      	ldr	r3, [pc, #136]	; (800bf6c <SDMMC_GetCmdResp7+0x94>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a22      	ldr	r2, [pc, #136]	; (800bf70 <SDMMC_GetCmdResp7+0x98>)
 800bee6:	fba2 2303 	umull	r2, r3, r2, r3
 800beea:	0a5b      	lsrs	r3, r3, #9
 800beec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef0:	fb02 f303 	mul.w	r3, r2, r3
 800bef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	1e5a      	subs	r2, r3, #1
 800befa:	60fa      	str	r2, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf04:	e02c      	b.n	800bf60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0ef      	beq.n	800bef6 <SDMMC_GetCmdResp7+0x1e>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1ea      	bne.n	800bef6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2204      	movs	r2, #4
 800bf30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf32:	2304      	movs	r3, #4
 800bf34:	e014      	b.n	800bf60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d004      	beq.n	800bf4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e009      	b.n	800bf60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2240      	movs	r2, #64	; 0x40
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bf5e:	2300      	movs	r3, #0
  
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	20000000 	.word	0x20000000
 800bf70:	10624dd3 	.word	0x10624dd3

0800bf74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf78:	4904      	ldr	r1, [pc, #16]	; (800bf8c <MX_FATFS_Init+0x18>)
 800bf7a:	4805      	ldr	r0, [pc, #20]	; (800bf90 <MX_FATFS_Init+0x1c>)
 800bf7c:	f000 faa0 	bl	800c4c0 <FATFS_LinkDriver>
 800bf80:	4603      	mov	r3, r0
 800bf82:	461a      	mov	r2, r3
 800bf84:	4b03      	ldr	r3, [pc, #12]	; (800bf94 <MX_FATFS_Init+0x20>)
 800bf86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf88:	bf00      	nop
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20009b98 	.word	0x20009b98
 800bf90:	0800f940 	.word	0x0800f940
 800bf94:	20009b94 	.word	0x20009b94

0800bf98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bfa2:	f000 f896 	bl	800c0d2 <BSP_SD_IsDetected>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d001      	beq.n	800bfb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e012      	b.n	800bfd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bfb0:	480b      	ldr	r0, [pc, #44]	; (800bfe0 <BSP_SD_Init+0x48>)
 800bfb2:	f7fc f9dd 	bl	8008370 <HAL_SD_Init>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bfc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bfc4:	4806      	ldr	r0, [pc, #24]	; (800bfe0 <BSP_SD_Init+0x48>)
 800bfc6:	f7fc ff93 	bl	8008ef0 <HAL_SD_ConfigWideBusOperation>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20009848 	.word	0x20009848

0800bfe4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	68f9      	ldr	r1, [r7, #12]
 800bffa:	4806      	ldr	r0, [pc, #24]	; (800c014 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bffc:	f7fc fa66 	bl	80084cc <HAL_SD_ReadBlocks_DMA>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20009848 	.word	0x20009848

0800c018 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	68f9      	ldr	r1, [r7, #12]
 800c02e:	4806      	ldr	r0, [pc, #24]	; (800c048 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c030:	f7fc fb2c 	bl	800868c <HAL_SD_WriteBlocks_DMA>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20009848 	.word	0x20009848

0800c04c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c050:	4805      	ldr	r0, [pc, #20]	; (800c068 <BSP_SD_GetCardState+0x1c>)
 800c052:	f7fc ffe7 	bl	8009024 <HAL_SD_GetCardState>
 800c056:	4603      	mov	r3, r0
 800c058:	2b04      	cmp	r3, #4
 800c05a:	bf14      	ite	ne
 800c05c:	2301      	movne	r3, #1
 800c05e:	2300      	moveq	r3, #0
 800c060:	b2db      	uxtb	r3, r3
}
 800c062:	4618      	mov	r0, r3
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20009848 	.word	0x20009848

0800c06c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c074:	6879      	ldr	r1, [r7, #4]
 800c076:	4803      	ldr	r0, [pc, #12]	; (800c084 <BSP_SD_GetCardInfo+0x18>)
 800c078:	f7fc ff0e 	bl	8008e98 <HAL_SD_GetCardInfo>
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	20009848 	.word	0x20009848

0800c088 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c090:	f000 f818 	bl	800c0c4 <BSP_SD_AbortCallback>
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c0a4:	f000 f9a8 	bl	800c3f8 <BSP_SD_WriteCpltCallback>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c0b8:	f000 f9aa 	bl	800c410 <BSP_SD_ReadCpltCallback>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	af00      	add	r7, sp, #0

}
 800c0c8:	bf00      	nop
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c0dc:	f000 f80c 	bl	800c0f8 <BSP_PlatformIsDetected>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	b2db      	uxtb	r3, r3
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c0fe:	2301      	movs	r3, #1
 800c100:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c102:	2104      	movs	r1, #4
 800c104:	4806      	ldr	r0, [pc, #24]	; (800c120 <BSP_PlatformIsDetected+0x28>)
 800c106:	f7fa fbe7 	bl	80068d8 <HAL_GPIO_ReadPin>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c110:	2300      	movs	r3, #0
 800c112:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c114:	79fb      	ldrb	r3, [r7, #7]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	40021800 	.word	0x40021800

0800c124 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c12c:	f7f7 fcfa 	bl	8003b24 <HAL_GetTick>
 800c130:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c132:	e006      	b.n	800c142 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c134:	f7ff ff8a 	bl	800c04c <BSP_SD_GetCardState>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	e009      	b.n	800c156 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c142:	f7f7 fcef 	bl	8003b24 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d8f0      	bhi.n	800c134 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c152:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c16a:	4b0b      	ldr	r3, [pc, #44]	; (800c198 <SD_CheckStatus+0x38>)
 800c16c:	2201      	movs	r2, #1
 800c16e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c170:	f7ff ff6c 	bl	800c04c <BSP_SD_GetCardState>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d107      	bne.n	800c18a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c17a:	4b07      	ldr	r3, [pc, #28]	; (800c198 <SD_CheckStatus+0x38>)
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f023 0301 	bic.w	r3, r3, #1
 800c184:	b2da      	uxtb	r2, r3
 800c186:	4b04      	ldr	r3, [pc, #16]	; (800c198 <SD_CheckStatus+0x38>)
 800c188:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c18a:	4b03      	ldr	r3, [pc, #12]	; (800c198 <SD_CheckStatus+0x38>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b2db      	uxtb	r3, r3
}
 800c190:	4618      	mov	r0, r3
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20000009 	.word	0x20000009

0800c19c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c1a6:	f7ff fef7 	bl	800bf98 <BSP_SD_Init>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d107      	bne.n	800c1c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff ffd4 	bl	800c160 <SD_CheckStatus>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <SD_initialize+0x34>)
 800c1be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c1c0:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <SD_initialize+0x34>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000009 	.word	0x20000009

0800c1d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff ffbd 	bl	800c160 <SD_CheckStatus>
 800c1e6:	4603      	mov	r3, r0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c204:	f247 5030 	movw	r0, #30000	; 0x7530
 800c208:	f7ff ff8c 	bl	800c124 <SD_CheckStatusWithTimeout>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	da01      	bge.n	800c216 <SD_read+0x26>
  {
    return res;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	e03b      	b.n	800c28e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	68b8      	ldr	r0, [r7, #8]
 800c21c:	f7ff fee2 	bl	800bfe4 <BSP_SD_ReadBlocks_DMA>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d132      	bne.n	800c28c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c226:	4b1c      	ldr	r3, [pc, #112]	; (800c298 <SD_read+0xa8>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c22c:	f7f7 fc7a 	bl	8003b24 <HAL_GetTick>
 800c230:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c232:	bf00      	nop
 800c234:	4b18      	ldr	r3, [pc, #96]	; (800c298 <SD_read+0xa8>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d108      	bne.n	800c24e <SD_read+0x5e>
 800c23c:	f7f7 fc72 	bl	8003b24 <HAL_GetTick>
 800c240:	4602      	mov	r2, r0
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	f247 522f 	movw	r2, #29999	; 0x752f
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d9f2      	bls.n	800c234 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c24e:	4b12      	ldr	r3, [pc, #72]	; (800c298 <SD_read+0xa8>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d102      	bne.n	800c25c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	75fb      	strb	r3, [r7, #23]
 800c25a:	e017      	b.n	800c28c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c25c:	4b0e      	ldr	r3, [pc, #56]	; (800c298 <SD_read+0xa8>)
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c262:	f7f7 fc5f 	bl	8003b24 <HAL_GetTick>
 800c266:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c268:	e007      	b.n	800c27a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c26a:	f7ff feef 	bl	800c04c <BSP_SD_GetCardState>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <SD_read+0x8a>
          {
            res = RES_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c278:	e008      	b.n	800c28c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c27a:	f7f7 fc53 	bl	8003b24 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	f247 522f 	movw	r2, #29999	; 0x752f
 800c288:	4293      	cmp	r3, r2
 800c28a:	d9ee      	bls.n	800c26a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	200000a0 	.word	0x200000a0

0800c29c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c2b0:	4b24      	ldr	r3, [pc, #144]	; (800c344 <SD_write+0xa8>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c2b6:	f247 5030 	movw	r0, #30000	; 0x7530
 800c2ba:	f7ff ff33 	bl	800c124 <SD_CheckStatusWithTimeout>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da01      	bge.n	800c2c8 <SD_write+0x2c>
  {
    return res;
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	e038      	b.n	800c33a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	68b8      	ldr	r0, [r7, #8]
 800c2ce:	f7ff fea3 	bl	800c018 <BSP_SD_WriteBlocks_DMA>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d12f      	bne.n	800c338 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c2d8:	f7f7 fc24 	bl	8003b24 <HAL_GetTick>
 800c2dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c2de:	bf00      	nop
 800c2e0:	4b18      	ldr	r3, [pc, #96]	; (800c344 <SD_write+0xa8>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d108      	bne.n	800c2fa <SD_write+0x5e>
 800c2e8:	f7f7 fc1c 	bl	8003b24 <HAL_GetTick>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	f247 522f 	movw	r2, #29999	; 0x752f
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d9f2      	bls.n	800c2e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c2fa:	4b12      	ldr	r3, [pc, #72]	; (800c344 <SD_write+0xa8>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	75fb      	strb	r3, [r7, #23]
 800c306:	e017      	b.n	800c338 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c308:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <SD_write+0xa8>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c30e:	f7f7 fc09 	bl	8003b24 <HAL_GetTick>
 800c312:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c314:	e007      	b.n	800c326 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c316:	f7ff fe99 	bl	800c04c <BSP_SD_GetCardState>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <SD_write+0x8a>
          {
            res = RES_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	75fb      	strb	r3, [r7, #23]
            break;
 800c324:	e008      	b.n	800c338 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c326:	f7f7 fbfd 	bl	8003b24 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	f247 522f 	movw	r2, #29999	; 0x752f
 800c334:	4293      	cmp	r3, r2
 800c336:	d9ee      	bls.n	800c316 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c338:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3718      	adds	r7, #24
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	2000009c 	.word	0x2000009c

0800c348 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b08c      	sub	sp, #48	; 0x30
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	603a      	str	r2, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
 800c354:	460b      	mov	r3, r1
 800c356:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c35e:	4b25      	ldr	r3, [pc, #148]	; (800c3f4 <SD_ioctl+0xac>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <SD_ioctl+0x28>
 800c36c:	2303      	movs	r3, #3
 800c36e:	e03c      	b.n	800c3ea <SD_ioctl+0xa2>

  switch (cmd)
 800c370:	79bb      	ldrb	r3, [r7, #6]
 800c372:	2b03      	cmp	r3, #3
 800c374:	d834      	bhi.n	800c3e0 <SD_ioctl+0x98>
 800c376:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <SD_ioctl+0x34>)
 800c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37c:	0800c38d 	.word	0x0800c38d
 800c380:	0800c395 	.word	0x0800c395
 800c384:	0800c3ad 	.word	0x0800c3ad
 800c388:	0800c3c7 	.word	0x0800c3c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c392:	e028      	b.n	800c3e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff fe67 	bl	800c06c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3aa:	e01c      	b.n	800c3e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3ac:	f107 030c 	add.w	r3, r7, #12
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7ff fe5b 	bl	800c06c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3c4:	e00f      	b.n	800c3e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fe4e 	bl	800c06c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	0a5a      	lsrs	r2, r3, #9
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3de:	e002      	b.n	800c3e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3730      	adds	r7, #48	; 0x30
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000009 	.word	0x20000009

0800c3f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c3fc:	4b03      	ldr	r3, [pc, #12]	; (800c40c <BSP_SD_WriteCpltCallback+0x14>)
 800c3fe:	2201      	movs	r2, #1
 800c400:	601a      	str	r2, [r3, #0]
}
 800c402:	bf00      	nop
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	2000009c 	.word	0x2000009c

0800c410 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c414:	4b03      	ldr	r3, [pc, #12]	; (800c424 <BSP_SD_ReadCpltCallback+0x14>)
 800c416:	2201      	movs	r2, #1
 800c418:	601a      	str	r2, [r3, #0]
}
 800c41a:	bf00      	nop
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	200000a0 	.word	0x200000a0

0800c428 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	4613      	mov	r3, r2
 800c434:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c436:	2301      	movs	r3, #1
 800c438:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c43e:	4b1f      	ldr	r3, [pc, #124]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c440:	7a5b      	ldrb	r3, [r3, #9]
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b00      	cmp	r3, #0
 800c446:	d131      	bne.n	800c4ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c448:	4b1c      	ldr	r3, [pc, #112]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c44a:	7a5b      	ldrb	r3, [r3, #9]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	461a      	mov	r2, r3
 800c450:	4b1a      	ldr	r3, [pc, #104]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c452:	2100      	movs	r1, #0
 800c454:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c456:	4b19      	ldr	r3, [pc, #100]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c458:	7a5b      	ldrb	r3, [r3, #9]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c466:	4b15      	ldr	r3, [pc, #84]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c468:	7a5b      	ldrb	r3, [r3, #9]
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	461a      	mov	r2, r3
 800c46e:	4b13      	ldr	r3, [pc, #76]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c470:	4413      	add	r3, r2
 800c472:	79fa      	ldrb	r2, [r7, #7]
 800c474:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c476:	4b11      	ldr	r3, [pc, #68]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c478:	7a5b      	ldrb	r3, [r3, #9]
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	b2d1      	uxtb	r1, r2
 800c480:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <FATFS_LinkDriverEx+0x94>)
 800c482:	7251      	strb	r1, [r2, #9]
 800c484:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c486:	7dbb      	ldrb	r3, [r7, #22]
 800c488:	3330      	adds	r3, #48	; 0x30
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	3301      	adds	r3, #1
 800c494:	223a      	movs	r2, #58	; 0x3a
 800c496:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	3302      	adds	r3, #2
 800c49c:	222f      	movs	r2, #47	; 0x2f
 800c49e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3303      	adds	r3, #3
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	200000a4 	.word	0x200000a4

0800c4c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff ffaa 	bl	800c428 <FATFS_LinkDriverEx>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <__NVIC_SetPriority>:
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	db0a      	blt.n	800c50a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	490c      	ldr	r1, [pc, #48]	; (800c52c <__NVIC_SetPriority+0x4c>)
 800c4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4fe:	0112      	lsls	r2, r2, #4
 800c500:	b2d2      	uxtb	r2, r2
 800c502:	440b      	add	r3, r1
 800c504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c508:	e00a      	b.n	800c520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	4908      	ldr	r1, [pc, #32]	; (800c530 <__NVIC_SetPriority+0x50>)
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	f003 030f 	and.w	r3, r3, #15
 800c516:	3b04      	subs	r3, #4
 800c518:	0112      	lsls	r2, r2, #4
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	440b      	add	r3, r1
 800c51e:	761a      	strb	r2, [r3, #24]
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	e000e100 	.word	0xe000e100
 800c530:	e000ed00 	.word	0xe000ed00

0800c534 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c538:	4b05      	ldr	r3, [pc, #20]	; (800c550 <SysTick_Handler+0x1c>)
 800c53a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c53c:	f001 ff26 	bl	800e38c <xTaskGetSchedulerState>
 800c540:	4603      	mov	r3, r0
 800c542:	2b01      	cmp	r3, #1
 800c544:	d001      	beq.n	800c54a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c546:	f002 fd0f 	bl	800ef68 <xPortSysTickHandler>
  }
}
 800c54a:	bf00      	nop
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	e000e010 	.word	0xe000e010

0800c554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c554:	b580      	push	{r7, lr}
 800c556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c558:	2100      	movs	r1, #0
 800c55a:	f06f 0004 	mvn.w	r0, #4
 800c55e:	f7ff ffbf 	bl	800c4e0 <__NVIC_SetPriority>
#endif
}
 800c562:	bf00      	nop
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c56e:	f3ef 8305 	mrs	r3, IPSR
 800c572:	603b      	str	r3, [r7, #0]
  return(result);
 800c574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c57a:	f06f 0305 	mvn.w	r3, #5
 800c57e:	607b      	str	r3, [r7, #4]
 800c580:	e00c      	b.n	800c59c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <osKernelInitialize+0x44>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d105      	bne.n	800c596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <osKernelInitialize+0x44>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c590:	2300      	movs	r3, #0
 800c592:	607b      	str	r3, [r7, #4]
 800c594:	e002      	b.n	800c59c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c596:	f04f 33ff 	mov.w	r3, #4294967295
 800c59a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c59c:	687b      	ldr	r3, [r7, #4]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	200000b0 	.word	0x200000b0

0800c5b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b6:	f3ef 8305 	mrs	r3, IPSR
 800c5ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c5bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c5c2:	f06f 0305 	mvn.w	r3, #5
 800c5c6:	607b      	str	r3, [r7, #4]
 800c5c8:	e010      	b.n	800c5ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c5ca:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <osKernelStart+0x48>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d109      	bne.n	800c5e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c5d2:	f7ff ffbf 	bl	800c554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5d6:	4b08      	ldr	r3, [pc, #32]	; (800c5f8 <osKernelStart+0x48>)
 800c5d8:	2202      	movs	r2, #2
 800c5da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5dc:	f001 fa78 	bl	800dad0 <vTaskStartScheduler>
      stat = osOK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e002      	b.n	800c5ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5ec:	687b      	ldr	r3, [r7, #4]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	200000b0 	.word	0x200000b0

0800c5fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08e      	sub	sp, #56	; 0x38
 800c600:	af04      	add	r7, sp, #16
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c60c:	f3ef 8305 	mrs	r3, IPSR
 800c610:	617b      	str	r3, [r7, #20]
  return(result);
 800c612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c614:	2b00      	cmp	r3, #0
 800c616:	d17e      	bne.n	800c716 <osThreadNew+0x11a>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d07b      	beq.n	800c716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c61e:	2380      	movs	r3, #128	; 0x80
 800c620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c622:	2318      	movs	r3, #24
 800c624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c626:	2300      	movs	r3, #0
 800c628:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c62a:	f04f 33ff 	mov.w	r3, #4294967295
 800c62e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d045      	beq.n	800c6c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <osThreadNew+0x48>
        name = attr->name;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d008      	beq.n	800c66a <osThreadNew+0x6e>
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b38      	cmp	r3, #56	; 0x38
 800c65c:	d805      	bhi.n	800c66a <osThreadNew+0x6e>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <osThreadNew+0x72>
        return (NULL);
 800c66a:	2300      	movs	r3, #0
 800c66c:	e054      	b.n	800c718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	695b      	ldr	r3, [r3, #20]
 800c67a:	089b      	lsrs	r3, r3, #2
 800c67c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00e      	beq.n	800c6a4 <osThreadNew+0xa8>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	2bbf      	cmp	r3, #191	; 0xbf
 800c68c:	d90a      	bls.n	800c6a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c692:	2b00      	cmp	r3, #0
 800c694:	d006      	beq.n	800c6a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <osThreadNew+0xa8>
        mem = 1;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	e010      	b.n	800c6c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10c      	bne.n	800c6c6 <osThreadNew+0xca>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d108      	bne.n	800c6c6 <osThreadNew+0xca>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d104      	bne.n	800c6c6 <osThreadNew+0xca>
          mem = 0;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	61bb      	str	r3, [r7, #24]
 800c6c0:	e001      	b.n	800c6c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d110      	bne.n	800c6ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c6d4:	9202      	str	r2, [sp, #8]
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	6a3a      	ldr	r2, [r7, #32]
 800c6e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f000 ff86 	bl	800d5f4 <xTaskCreateStatic>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	613b      	str	r3, [r7, #16]
 800c6ec:	e013      	b.n	800c716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d110      	bne.n	800c716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6f4:	6a3b      	ldr	r3, [r7, #32]
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	f107 0310 	add.w	r3, r7, #16
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 ffd1 	bl	800d6ae <xTaskCreate>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d001      	beq.n	800c716 <osThreadNew+0x11a>
            hTask = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c716:	693b      	ldr	r3, [r7, #16]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3728      	adds	r7, #40	; 0x28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c728:	f3ef 8305 	mrs	r3, IPSR
 800c72c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c72e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <osDelay+0x1c>
    stat = osErrorISR;
 800c734:	f06f 0305 	mvn.w	r3, #5
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e007      	b.n	800c74c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 f98e 	bl	800da68 <vTaskDelay>
    }
  }

  return (stat);
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c756:	b580      	push	{r7, lr}
 800c758:	b08a      	sub	sp, #40	; 0x28
 800c75a:	af02      	add	r7, sp, #8
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c766:	f3ef 8305 	mrs	r3, IPSR
 800c76a:	613b      	str	r3, [r7, #16]
  return(result);
 800c76c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d175      	bne.n	800c85e <osSemaphoreNew+0x108>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d072      	beq.n	800c85e <osSemaphoreNew+0x108>
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d86e      	bhi.n	800c85e <osSemaphoreNew+0x108>
    mem = -1;
 800c780:	f04f 33ff 	mov.w	r3, #4294967295
 800c784:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d015      	beq.n	800c7b8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d006      	beq.n	800c7a2 <osSemaphoreNew+0x4c>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	2b4f      	cmp	r3, #79	; 0x4f
 800c79a:	d902      	bls.n	800c7a2 <osSemaphoreNew+0x4c>
        mem = 1;
 800c79c:	2301      	movs	r3, #1
 800c79e:	61bb      	str	r3, [r7, #24]
 800c7a0:	e00c      	b.n	800c7bc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d108      	bne.n	800c7bc <osSemaphoreNew+0x66>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d104      	bne.n	800c7bc <osSemaphoreNew+0x66>
          mem = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61bb      	str	r3, [r7, #24]
 800c7b6:	e001      	b.n	800c7bc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d04c      	beq.n	800c85e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d128      	bne.n	800c81c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10a      	bne.n	800c7e6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	9200      	str	r2, [sp, #0]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	2100      	movs	r1, #0
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f000 f993 	bl	800cb08 <xQueueGenericCreateStatic>
 800c7e2:	61f8      	str	r0, [r7, #28]
 800c7e4:	e005      	b.n	800c7f2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c7e6:	2203      	movs	r2, #3
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	f000 fa04 	bl	800cbf8 <xQueueGenericCreate>
 800c7f0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d022      	beq.n	800c83e <osSemaphoreNew+0xe8>
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d01f      	beq.n	800c83e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c7fe:	2300      	movs	r3, #0
 800c800:	2200      	movs	r2, #0
 800c802:	2100      	movs	r1, #0
 800c804:	69f8      	ldr	r0, [r7, #28]
 800c806:	f000 fabf 	bl	800cd88 <xQueueGenericSend>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d016      	beq.n	800c83e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c810:	69f8      	ldr	r0, [r7, #28]
 800c812:	f000 fd33 	bl	800d27c <vQueueDelete>
            hSemaphore = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	61fb      	str	r3, [r7, #28]
 800c81a:	e010      	b.n	800c83e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d108      	bne.n	800c834 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	461a      	mov	r2, r3
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 fa41 	bl	800ccb2 <xQueueCreateCountingSemaphoreStatic>
 800c830:	61f8      	str	r0, [r7, #28]
 800c832:	e004      	b.n	800c83e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f000 fa72 	bl	800cd20 <xQueueCreateCountingSemaphore>
 800c83c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00c      	beq.n	800c85e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	617b      	str	r3, [r7, #20]
 800c850:	e001      	b.n	800c856 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c856:	6979      	ldr	r1, [r7, #20]
 800c858:	69f8      	ldr	r0, [r7, #28]
 800c85a:	f000 fe43 	bl	800d4e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c85e:	69fb      	ldr	r3, [r7, #28]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3720      	adds	r7, #32
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	4a07      	ldr	r2, [pc, #28]	; (800c894 <vApplicationGetIdleTaskMemory+0x2c>)
 800c878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	4a06      	ldr	r2, [pc, #24]	; (800c898 <vApplicationGetIdleTaskMemory+0x30>)
 800c87e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2280      	movs	r2, #128	; 0x80
 800c884:	601a      	str	r2, [r3, #0]
}
 800c886:	bf00      	nop
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200000b4 	.word	0x200000b4
 800c898:	20000174 	.word	0x20000174

0800c89c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4a07      	ldr	r2, [pc, #28]	; (800c8c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c8ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	4a06      	ldr	r2, [pc, #24]	; (800c8cc <vApplicationGetTimerTaskMemory+0x30>)
 800c8b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8ba:	601a      	str	r2, [r3, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20000374 	.word	0x20000374
 800c8cc:	20000434 	.word	0x20000434

0800c8d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f103 0208 	add.w	r2, r3, #8
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f103 0208 	add.w	r2, r3, #8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f103 0208 	add.w	r2, r3, #8
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c92a:	b480      	push	{r7}
 800c92c:	b085      	sub	sp, #20
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	601a      	str	r2, [r3, #0]
}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c972:	b480      	push	{r7}
 800c974:	b085      	sub	sp, #20
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c988:	d103      	bne.n	800c992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e00c      	b.n	800c9ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3308      	adds	r3, #8
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	e002      	b.n	800c9a0 <vListInsert+0x2e>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d2f6      	bcs.n	800c99a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	1c5a      	adds	r2, r3, #1
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	6892      	ldr	r2, [r2, #8]
 800c9fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	6852      	ldr	r2, [r2, #4]
 800ca04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d103      	bne.n	800ca18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca62:	f002 f9ef 	bl	800ee44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca72:	fb01 f303 	mul.w	r3, r1, r3
 800ca76:	441a      	add	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	3b01      	subs	r3, #1
 800ca94:	68f9      	ldr	r1, [r7, #12]
 800ca96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ca98:	fb01 f303 	mul.w	r3, r1, r3
 800ca9c:	441a      	add	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	22ff      	movs	r2, #255	; 0xff
 800caa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	22ff      	movs	r2, #255	; 0xff
 800caae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d114      	bne.n	800cae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01a      	beq.n	800caf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	3310      	adds	r3, #16
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 fa9d 	bl	800e004 <xTaskRemoveFromEventList>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d012      	beq.n	800caf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cad0:	4b0c      	ldr	r3, [pc, #48]	; (800cb04 <xQueueGenericReset+0xcc>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	e009      	b.n	800caf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3310      	adds	r3, #16
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fef2 	bl	800c8d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3324      	adds	r3, #36	; 0x24
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff feed 	bl	800c8d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800caf6:	f002 f9d5 	bl	800eea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cafa:	2301      	movs	r3, #1
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08e      	sub	sp, #56	; 0x38
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10a      	bne.n	800cb32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <xQueueGenericCreateStatic+0x52>
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <xQueueGenericCreateStatic+0x56>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e000      	b.n	800cb60 <xQueueGenericCreateStatic+0x58>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	623b      	str	r3, [r7, #32]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d102      	bne.n	800cb86 <xQueueGenericCreateStatic+0x7e>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d101      	bne.n	800cb8a <xQueueGenericCreateStatic+0x82>
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <xQueueGenericCreateStatic+0x84>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	61fb      	str	r3, [r7, #28]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cba6:	2350      	movs	r3, #80	; 0x50
 800cba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b50      	cmp	r3, #80	; 0x50
 800cbae:	d00a      	beq.n	800cbc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	61bb      	str	r3, [r7, #24]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00d      	beq.n	800cbee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 f83f 	bl	800cc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3730      	adds	r7, #48	; 0x30
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af02      	add	r7, sp, #8
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	613b      	str	r3, [r7, #16]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	fb02 f303 	mul.w	r3, r2, r3
 800cc2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	3350      	adds	r3, #80	; 0x50
 800cc30:	4618      	mov	r0, r3
 800cc32:	f002 fa29 	bl	800f088 <pvPortMalloc>
 800cc36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d011      	beq.n	800cc62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	3350      	adds	r3, #80	; 0x50
 800cc46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc50:	79fa      	ldrb	r2, [r7, #7]
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	4613      	mov	r3, r2
 800cc58:	697a      	ldr	r2, [r7, #20]
 800cc5a:	68b9      	ldr	r1, [r7, #8]
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 f805 	bl	800cc6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc62:	69bb      	ldr	r3, [r7, #24]
	}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d103      	bne.n	800cc88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	e002      	b.n	800cc8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	69b8      	ldr	r0, [r7, #24]
 800cc9e:	f7ff fecb 	bl	800ca38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	78fa      	ldrb	r2, [r7, #3]
 800cca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccaa:	bf00      	nop
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b08a      	sub	sp, #40	; 0x28
 800ccb6:	af02      	add	r7, sp, #8
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	61bb      	str	r3, [r7, #24]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d90a      	bls.n	800ccf8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	617b      	str	r3, [r7, #20]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f7ff ff00 	bl	800cb08 <xQueueGenericCreateStatic>
 800cd08:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cd16:	69fb      	ldr	r3, [r7, #28]
	}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3720      	adds	r7, #32
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10a      	bne.n	800cd46 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	613b      	str	r3, [r7, #16]
}
 800cd42:	bf00      	nop
 800cd44:	e7fe      	b.n	800cd44 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d90a      	bls.n	800cd64 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	60fb      	str	r3, [r7, #12]
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd64:	2202      	movs	r2, #2
 800cd66:	2100      	movs	r1, #0
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7ff ff45 	bl	800cbf8 <xQueueGenericCreate>
 800cd6e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cd7c:	697b      	ldr	r3, [r7, #20]
	}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3718      	adds	r7, #24
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08e      	sub	sp, #56	; 0x38
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd96:	2300      	movs	r3, #0
 800cd98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xQueueGenericSend+0x32>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <xQueueGenericSend+0x40>
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <xQueueGenericSend+0x44>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e000      	b.n	800cdce <xQueueGenericSend+0x46>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <xQueueGenericSend+0x60>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d103      	bne.n	800cdf6 <xQueueGenericSend+0x6e>
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d101      	bne.n	800cdfa <xQueueGenericSend+0x72>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e000      	b.n	800cdfc <xQueueGenericSend+0x74>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10a      	bne.n	800ce16 <xQueueGenericSend+0x8e>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	623b      	str	r3, [r7, #32]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce16:	f001 fab9 	bl	800e38c <xTaskGetSchedulerState>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <xQueueGenericSend+0x9e>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <xQueueGenericSend+0xa2>
 800ce26:	2301      	movs	r3, #1
 800ce28:	e000      	b.n	800ce2c <xQueueGenericSend+0xa4>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <xQueueGenericSend+0xbe>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	61fb      	str	r3, [r7, #28]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce46:	f001 fffd 	bl	800ee44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d302      	bcc.n	800ce5c <xQueueGenericSend+0xd4>
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d129      	bne.n	800ceb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce62:	f000 fa2e 	bl	800d2c2 <prvCopyDataToQueue>
 800ce66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d010      	beq.n	800ce92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	3324      	adds	r3, #36	; 0x24
 800ce74:	4618      	mov	r0, r3
 800ce76:	f001 f8c5 	bl	800e004 <xTaskRemoveFromEventList>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d013      	beq.n	800cea8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce80:	4b3f      	ldr	r3, [pc, #252]	; (800cf80 <xQueueGenericSend+0x1f8>)
 800ce82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	e00a      	b.n	800cea8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce98:	4b39      	ldr	r3, [pc, #228]	; (800cf80 <xQueueGenericSend+0x1f8>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cea8:	f001 fffc 	bl	800eea4 <vPortExitCritical>
				return pdPASS;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e063      	b.n	800cf78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ceb6:	f001 fff5 	bl	800eea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e05c      	b.n	800cf78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d106      	bne.n	800ced2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cec4:	f107 0314 	add.w	r3, r7, #20
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 f8ff 	bl	800e0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ced2:	f001 ffe7 	bl	800eea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ced6:	f000 fe6b 	bl	800dbb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceda:	f001 ffb3 	bl	800ee44 <vPortEnterCritical>
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cee4:	b25b      	sxtb	r3, r3
 800cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceea:	d103      	bne.n	800cef4 <xQueueGenericSend+0x16c>
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	2200      	movs	r2, #0
 800cef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cefa:	b25b      	sxtb	r3, r3
 800cefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf00:	d103      	bne.n	800cf0a <xQueueGenericSend+0x182>
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf0a:	f001 ffcb 	bl	800eea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf0e:	1d3a      	adds	r2, r7, #4
 800cf10:	f107 0314 	add.w	r3, r7, #20
 800cf14:	4611      	mov	r1, r2
 800cf16:	4618      	mov	r0, r3
 800cf18:	f001 f8ee 	bl	800e0f8 <xTaskCheckForTimeOut>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d124      	bne.n	800cf6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf24:	f000 fac5 	bl	800d4b2 <prvIsQueueFull>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d018      	beq.n	800cf60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	3310      	adds	r3, #16
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f814 	bl	800df64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf3e:	f000 fa50 	bl	800d3e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf42:	f000 fe43 	bl	800dbcc <xTaskResumeAll>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f af7c 	bne.w	800ce46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <xQueueGenericSend+0x1f8>)
 800cf50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	e772      	b.n	800ce46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf62:	f000 fa3e 	bl	800d3e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf66:	f000 fe31 	bl	800dbcc <xTaskResumeAll>
 800cf6a:	e76c      	b.n	800ce46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf6e:	f000 fa38 	bl	800d3e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf72:	f000 fe2b 	bl	800dbcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3738      	adds	r7, #56	; 0x38
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	e000ed04 	.word	0xe000ed04

0800cf84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b090      	sub	sp, #64	; 0x40
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <xQueueGenericSendFromISR+0x3c>
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <xQueueGenericSendFromISR+0x40>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e000      	b.n	800cfc6 <xQueueGenericSendFromISR+0x42>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d103      	bne.n	800cfee <xQueueGenericSendFromISR+0x6a>
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d101      	bne.n	800cff2 <xQueueGenericSendFromISR+0x6e>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e000      	b.n	800cff4 <xQueueGenericSendFromISR+0x70>
 800cff2:	2300      	movs	r3, #0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	623b      	str	r3, [r7, #32]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d00e:	f001 fffb 	bl	800f008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d012:	f3ef 8211 	mrs	r2, BASEPRI
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	61fa      	str	r2, [r7, #28]
 800d028:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d02a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d02c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	429a      	cmp	r2, r3
 800d038:	d302      	bcc.n	800d040 <xQueueGenericSendFromISR+0xbc>
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d12f      	bne.n	800d0a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d056:	f000 f934 	bl	800d2c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d05a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d112      	bne.n	800d08a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d016      	beq.n	800d09a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	3324      	adds	r3, #36	; 0x24
 800d070:	4618      	mov	r0, r3
 800d072:	f000 ffc7 	bl	800e004 <xTaskRemoveFromEventList>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00e      	beq.n	800d09a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00b      	beq.n	800d09a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2201      	movs	r2, #1
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	e007      	b.n	800d09a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d08a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d08e:	3301      	adds	r3, #1
 800d090:	b2db      	uxtb	r3, r3
 800d092:	b25a      	sxtb	r2, r3
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d09a:	2301      	movs	r3, #1
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d09e:	e001      	b.n	800d0a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d0ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3740      	adds	r7, #64	; 0x40
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08c      	sub	sp, #48	; 0x30
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10a      	bne.n	800d0ec <xQueueReceive+0x30>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	623b      	str	r3, [r7, #32]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <xQueueReceive+0x3e>
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <xQueueReceive+0x42>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e000      	b.n	800d100 <xQueueReceive+0x44>
 800d0fe:	2300      	movs	r3, #0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10a      	bne.n	800d11a <xQueueReceive+0x5e>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	61fb      	str	r3, [r7, #28]
}
 800d116:	bf00      	nop
 800d118:	e7fe      	b.n	800d118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d11a:	f001 f937 	bl	800e38c <xTaskGetSchedulerState>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <xQueueReceive+0x6e>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <xQueueReceive+0x72>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <xQueueReceive+0x74>
 800d12e:	2300      	movs	r3, #0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10a      	bne.n	800d14a <xQueueReceive+0x8e>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	61bb      	str	r3, [r7, #24]
}
 800d146:	bf00      	nop
 800d148:	e7fe      	b.n	800d148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d14a:	f001 fe7b 	bl	800ee44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d01f      	beq.n	800d19a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d15e:	f000 f91a 	bl	800d396 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	1e5a      	subs	r2, r3, #1
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00f      	beq.n	800d192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d174:	3310      	adds	r3, #16
 800d176:	4618      	mov	r0, r3
 800d178:	f000 ff44 	bl	800e004 <xTaskRemoveFromEventList>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d007      	beq.n	800d192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d182:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <xQueueReceive+0x1bc>)
 800d184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d192:	f001 fe87 	bl	800eea4 <vPortExitCritical>
				return pdPASS;
 800d196:	2301      	movs	r3, #1
 800d198:	e069      	b.n	800d26e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d103      	bne.n	800d1a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1a0:	f001 fe80 	bl	800eea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e062      	b.n	800d26e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d106      	bne.n	800d1bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1ae:	f107 0310 	add.w	r3, r7, #16
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f000 ff8a 	bl	800e0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1bc:	f001 fe72 	bl	800eea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1c0:	f000 fcf6 	bl	800dbb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1c4:	f001 fe3e 	bl	800ee44 <vPortEnterCritical>
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1ce:	b25b      	sxtb	r3, r3
 800d1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d4:	d103      	bne.n	800d1de <xQueueReceive+0x122>
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1e4:	b25b      	sxtb	r3, r3
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ea:	d103      	bne.n	800d1f4 <xQueueReceive+0x138>
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1f4:	f001 fe56 	bl	800eea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1f8:	1d3a      	adds	r2, r7, #4
 800d1fa:	f107 0310 	add.w	r3, r7, #16
 800d1fe:	4611      	mov	r1, r2
 800d200:	4618      	mov	r0, r3
 800d202:	f000 ff79 	bl	800e0f8 <xTaskCheckForTimeOut>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d123      	bne.n	800d254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20e:	f000 f93a 	bl	800d486 <prvIsQueueEmpty>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d017      	beq.n	800d248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	3324      	adds	r3, #36	; 0x24
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	4611      	mov	r1, r2
 800d220:	4618      	mov	r0, r3
 800d222:	f000 fe9f 	bl	800df64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d228:	f000 f8db 	bl	800d3e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d22c:	f000 fcce 	bl	800dbcc <xTaskResumeAll>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d189      	bne.n	800d14a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d236:	4b10      	ldr	r3, [pc, #64]	; (800d278 <xQueueReceive+0x1bc>)
 800d238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	e780      	b.n	800d14a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d24a:	f000 f8ca 	bl	800d3e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d24e:	f000 fcbd 	bl	800dbcc <xTaskResumeAll>
 800d252:	e77a      	b.n	800d14a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d256:	f000 f8c4 	bl	800d3e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d25a:	f000 fcb7 	bl	800dbcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d260:	f000 f911 	bl	800d486 <prvIsQueueEmpty>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	f43f af6f 	beq.w	800d14a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d26c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3730      	adds	r7, #48	; 0x30
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10a      	bne.n	800d2a4 <vQueueDelete+0x28>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	60bb      	str	r3, [r7, #8]
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f000 f947 	bl	800d538 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d102      	bne.n	800d2ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f001 ffb3 	bl	800f220 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d2ba:	bf00      	nop
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b086      	sub	sp, #24
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	60f8      	str	r0, [r7, #12]
 800d2ca:	60b9      	str	r1, [r7, #8]
 800d2cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10d      	bne.n	800d2fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d14d      	bne.n	800d384 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f001 f86b 	bl	800e3c8 <xTaskPriorityDisinherit>
 800d2f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	609a      	str	r2, [r3, #8]
 800d2fa:	e043      	b.n	800d384 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d119      	bne.n	800d336 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6858      	ldr	r0, [r3, #4]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30a:	461a      	mov	r2, r3
 800d30c:	68b9      	ldr	r1, [r7, #8]
 800d30e:	f002 f8cb 	bl	800f4a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	685a      	ldr	r2, [r3, #4]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31a:	441a      	add	r2, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d32b      	bcc.n	800d384 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	605a      	str	r2, [r3, #4]
 800d334:	e026      	b.n	800d384 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	68d8      	ldr	r0, [r3, #12]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	461a      	mov	r2, r3
 800d340:	68b9      	ldr	r1, [r7, #8]
 800d342:	f002 f8b1 	bl	800f4a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68da      	ldr	r2, [r3, #12]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	425b      	negs	r3, r3
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	68da      	ldr	r2, [r3, #12]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d207      	bcs.n	800d372 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	689a      	ldr	r2, [r3, #8]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36a:	425b      	negs	r3, r3
 800d36c:	441a      	add	r2, r3
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d105      	bne.n	800d384 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3b01      	subs	r3, #1
 800d382:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d38c:	697b      	ldr	r3, [r7, #20]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d018      	beq.n	800d3da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68da      	ldr	r2, [r3, #12]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	441a      	add	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68da      	ldr	r2, [r3, #12]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d303      	bcc.n	800d3ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68d9      	ldr	r1, [r3, #12]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	6838      	ldr	r0, [r7, #0]
 800d3d6:	f002 f867 	bl	800f4a8 <memcpy>
	}
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3ea:	f001 fd2b 	bl	800ee44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3f6:	e011      	b.n	800d41c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3324      	adds	r3, #36	; 0x24
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fdfd 	bl	800e004 <xTaskRemoveFromEventList>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d410:	f000 fed4 	bl	800e1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	3b01      	subs	r3, #1
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d420:	2b00      	cmp	r3, #0
 800d422:	dce9      	bgt.n	800d3f8 <prvUnlockQueue+0x16>
 800d424:	e000      	b.n	800d428 <prvUnlockQueue+0x46>
					break;
 800d426:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	22ff      	movs	r2, #255	; 0xff
 800d42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d430:	f001 fd38 	bl	800eea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d434:	f001 fd06 	bl	800ee44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d43e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d440:	e011      	b.n	800d466 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d012      	beq.n	800d470 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	3310      	adds	r3, #16
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fdd8 	bl	800e004 <xTaskRemoveFromEventList>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d45a:	f000 feaf 	bl	800e1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
 800d460:	3b01      	subs	r3, #1
 800d462:	b2db      	uxtb	r3, r3
 800d464:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dce9      	bgt.n	800d442 <prvUnlockQueue+0x60>
 800d46e:	e000      	b.n	800d472 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d470:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	22ff      	movs	r2, #255	; 0xff
 800d476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d47a:	f001 fd13 	bl	800eea4 <vPortExitCritical>
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d48e:	f001 fcd9 	bl	800ee44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d49a:	2301      	movs	r3, #1
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	e001      	b.n	800d4a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4a4:	f001 fcfe 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4ba:	f001 fcc3 	bl	800ee44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d102      	bne.n	800d4d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
 800d4ce:	e001      	b.n	800d4d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4d4:	f001 fce6 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e014      	b.n	800d51e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4f4:	4a0f      	ldr	r2, [pc, #60]	; (800d534 <vQueueAddToRegistry+0x50>)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10b      	bne.n	800d518 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d500:	490c      	ldr	r1, [pc, #48]	; (800d534 <vQueueAddToRegistry+0x50>)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d50a:	4a0a      	ldr	r2, [pc, #40]	; (800d534 <vQueueAddToRegistry+0x50>)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	4413      	add	r3, r2
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d516:	e006      	b.n	800d526 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3301      	adds	r3, #1
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b07      	cmp	r3, #7
 800d522:	d9e7      	bls.n	800d4f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d524:	bf00      	nop
 800d526:	bf00      	nop
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	2000a000 	.word	0x2000a000

0800d538 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	e016      	b.n	800d574 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d546:	4a10      	ldr	r2, [pc, #64]	; (800d588 <vQueueUnregisterQueue+0x50>)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	4413      	add	r3, r2
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	429a      	cmp	r2, r3
 800d554:	d10b      	bne.n	800d56e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d556:	4a0c      	ldr	r2, [pc, #48]	; (800d588 <vQueueUnregisterQueue+0x50>)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2100      	movs	r1, #0
 800d55c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d560:	4a09      	ldr	r2, [pc, #36]	; (800d588 <vQueueUnregisterQueue+0x50>)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	4413      	add	r3, r2
 800d568:	2200      	movs	r2, #0
 800d56a:	605a      	str	r2, [r3, #4]
				break;
 800d56c:	e006      	b.n	800d57c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3301      	adds	r3, #1
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b07      	cmp	r3, #7
 800d578:	d9e5      	bls.n	800d546 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	2000a000 	.word	0x2000a000

0800d58c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d59c:	f001 fc52 	bl	800ee44 <vPortEnterCritical>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ac:	d103      	bne.n	800d5b6 <vQueueWaitForMessageRestricted+0x2a>
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d103      	bne.n	800d5cc <vQueueWaitForMessageRestricted+0x40>
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5cc:	f001 fc6a 	bl	800eea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d106      	bne.n	800d5e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	3324      	adds	r3, #36	; 0x24
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 fce3 	bl	800dfac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	f7ff fefb 	bl	800d3e2 <prvUnlockQueue>
	}
 800d5ec:	bf00      	nop
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08e      	sub	sp, #56	; 0x38
 800d5f8:	af04      	add	r7, sp, #16
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
 800d600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	623b      	str	r3, [r7, #32]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xTaskCreateStatic+0x46>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	61fb      	str	r3, [r7, #28]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d63a:	23c0      	movs	r3, #192	; 0xc0
 800d63c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2bc0      	cmp	r3, #192	; 0xc0
 800d642:	d00a      	beq.n	800d65a <xTaskCreateStatic+0x66>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	61bb      	str	r3, [r7, #24]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d65a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01e      	beq.n	800d6a0 <xTaskCreateStatic+0xac>
 800d662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d664:	2b00      	cmp	r3, #0
 800d666:	d01b      	beq.n	800d6a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d670:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	2202      	movs	r2, #2
 800d676:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d67a:	2300      	movs	r3, #0
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	9302      	str	r3, [sp, #8]
 800d682:	f107 0314 	add.w	r3, r7, #20
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	68b9      	ldr	r1, [r7, #8]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 f850 	bl	800d738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d69a:	f000 f8f7 	bl	800d88c <prvAddNewTaskToReadyList>
 800d69e:	e001      	b.n	800d6a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6a4:	697b      	ldr	r3, [r7, #20]
	}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3728      	adds	r7, #40	; 0x28
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b08c      	sub	sp, #48	; 0x30
 800d6b2:	af04      	add	r7, sp, #16
 800d6b4:	60f8      	str	r0, [r7, #12]
 800d6b6:	60b9      	str	r1, [r7, #8]
 800d6b8:	603b      	str	r3, [r7, #0]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6be:	88fb      	ldrh	r3, [r7, #6]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f001 fce0 	bl	800f088 <pvPortMalloc>
 800d6c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00e      	beq.n	800d6ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6d0:	20c0      	movs	r0, #192	; 0xc0
 800d6d2:	f001 fcd9 	bl	800f088 <pvPortMalloc>
 800d6d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	631a      	str	r2, [r3, #48]	; 0x30
 800d6e4:	e005      	b.n	800d6f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6e6:	6978      	ldr	r0, [r7, #20]
 800d6e8:	f001 fd9a 	bl	800f220 <vPortFree>
 800d6ec:	e001      	b.n	800d6f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d017      	beq.n	800d728 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d700:	88fa      	ldrh	r2, [r7, #6]
 800d702:	2300      	movs	r3, #0
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	9302      	str	r3, [sp, #8]
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f000 f80e 	bl	800d738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d71c:	69f8      	ldr	r0, [r7, #28]
 800d71e:	f000 f8b5 	bl	800d88c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d722:	2301      	movs	r3, #1
 800d724:	61bb      	str	r3, [r7, #24]
 800d726:	e002      	b.n	800d72e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d728:	f04f 33ff 	mov.w	r3, #4294967295
 800d72c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d72e:	69bb      	ldr	r3, [r7, #24]
	}
 800d730:	4618      	mov	r0, r3
 800d732:	3720      	adds	r7, #32
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	461a      	mov	r2, r3
 800d750:	21a5      	movs	r1, #165	; 0xa5
 800d752:	f001 feb7 	bl	800f4c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d760:	3b01      	subs	r3, #1
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	f023 0307 	bic.w	r3, r3, #7
 800d76e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	f003 0307 	and.w	r3, r3, #7
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00a      	beq.n	800d790 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	617b      	str	r3, [r7, #20]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d01f      	beq.n	800d7d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d796:	2300      	movs	r3, #0
 800d798:	61fb      	str	r3, [r7, #28]
 800d79a:	e012      	b.n	800d7c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	7819      	ldrb	r1, [r3, #0]
 800d7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	3334      	adds	r3, #52	; 0x34
 800d7ac:	460a      	mov	r2, r1
 800d7ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	61fb      	str	r3, [r7, #28]
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	2b0f      	cmp	r3, #15
 800d7c6:	d9e9      	bls.n	800d79c <prvInitialiseNewTask+0x64>
 800d7c8:	e000      	b.n	800d7cc <prvInitialiseNewTask+0x94>
			{
				break;
 800d7ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d7d4:	e003      	b.n	800d7de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	2b37      	cmp	r3, #55	; 0x37
 800d7e2:	d901      	bls.n	800d7e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7e4:	2337      	movs	r3, #55	; 0x37
 800d7e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff f886 	bl	800c910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	3318      	adds	r3, #24
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff f881 	bl	800c910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	2200      	movs	r2, #0
 800d828:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	2200      	movs	r2, #0
 800d82e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2200      	movs	r2, #0
 800d836:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	3358      	adds	r3, #88	; 0x58
 800d83e:	2260      	movs	r2, #96	; 0x60
 800d840:	2100      	movs	r1, #0
 800d842:	4618      	mov	r0, r3
 800d844:	f001 fe3e 	bl	800f4c4 <memset>
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	4a0d      	ldr	r2, [pc, #52]	; (800d880 <prvInitialiseNewTask+0x148>)
 800d84c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	4a0c      	ldr	r2, [pc, #48]	; (800d884 <prvInitialiseNewTask+0x14c>)
 800d852:	661a      	str	r2, [r3, #96]	; 0x60
 800d854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d856:	4a0c      	ldr	r2, [pc, #48]	; (800d888 <prvInitialiseNewTask+0x150>)
 800d858:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	68f9      	ldr	r1, [r7, #12]
 800d85e:	69b8      	ldr	r0, [r7, #24]
 800d860:	f001 f9c2 	bl	800ebe8 <pxPortInitialiseStack>
 800d864:	4602      	mov	r2, r0
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	0800f974 	.word	0x0800f974
 800d884:	0800f994 	.word	0x0800f994
 800d888:	0800f954 	.word	0x0800f954

0800d88c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d894:	f001 fad6 	bl	800ee44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d898:	4b2d      	ldr	r3, [pc, #180]	; (800d950 <prvAddNewTaskToReadyList+0xc4>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	3301      	adds	r3, #1
 800d89e:	4a2c      	ldr	r2, [pc, #176]	; (800d950 <prvAddNewTaskToReadyList+0xc4>)
 800d8a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8a2:	4b2c      	ldr	r3, [pc, #176]	; (800d954 <prvAddNewTaskToReadyList+0xc8>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d109      	bne.n	800d8be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8aa:	4a2a      	ldr	r2, [pc, #168]	; (800d954 <prvAddNewTaskToReadyList+0xc8>)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8b0:	4b27      	ldr	r3, [pc, #156]	; (800d950 <prvAddNewTaskToReadyList+0xc4>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d110      	bne.n	800d8da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8b8:	f000 fca6 	bl	800e208 <prvInitialiseTaskLists>
 800d8bc:	e00d      	b.n	800d8da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8be:	4b26      	ldr	r3, [pc, #152]	; (800d958 <prvAddNewTaskToReadyList+0xcc>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d109      	bne.n	800d8da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8c6:	4b23      	ldr	r3, [pc, #140]	; (800d954 <prvAddNewTaskToReadyList+0xc8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d802      	bhi.n	800d8da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d8d4:	4a1f      	ldr	r2, [pc, #124]	; (800d954 <prvAddNewTaskToReadyList+0xc8>)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8da:	4b20      	ldr	r3, [pc, #128]	; (800d95c <prvAddNewTaskToReadyList+0xd0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	4a1e      	ldr	r2, [pc, #120]	; (800d95c <prvAddNewTaskToReadyList+0xd0>)
 800d8e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d8e4:	4b1d      	ldr	r3, [pc, #116]	; (800d95c <prvAddNewTaskToReadyList+0xd0>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f0:	4b1b      	ldr	r3, [pc, #108]	; (800d960 <prvAddNewTaskToReadyList+0xd4>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d903      	bls.n	800d900 <prvAddNewTaskToReadyList+0x74>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	4a18      	ldr	r2, [pc, #96]	; (800d960 <prvAddNewTaskToReadyList+0xd4>)
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d904:	4613      	mov	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4a15      	ldr	r2, [pc, #84]	; (800d964 <prvAddNewTaskToReadyList+0xd8>)
 800d90e:	441a      	add	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	3304      	adds	r3, #4
 800d914:	4619      	mov	r1, r3
 800d916:	4610      	mov	r0, r2
 800d918:	f7ff f807 	bl	800c92a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d91c:	f001 fac2 	bl	800eea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d920:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <prvAddNewTaskToReadyList+0xcc>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00e      	beq.n	800d946 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d928:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <prvAddNewTaskToReadyList+0xc8>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d932:	429a      	cmp	r2, r3
 800d934:	d207      	bcs.n	800d946 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <prvAddNewTaskToReadyList+0xdc>)
 800d938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20000d08 	.word	0x20000d08
 800d954:	20000834 	.word	0x20000834
 800d958:	20000d14 	.word	0x20000d14
 800d95c:	20000d24 	.word	0x20000d24
 800d960:	20000d10 	.word	0x20000d10
 800d964:	20000838 	.word	0x20000838
 800d968:	e000ed04 	.word	0xe000ed04

0800d96c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	; 0x28
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d976:	2300      	movs	r3, #0
 800d978:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10a      	bne.n	800d996 <vTaskDelayUntil+0x2a>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	617b      	str	r3, [r7, #20]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10a      	bne.n	800d9b2 <vTaskDelayUntil+0x46>
	__asm volatile
 800d99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	613b      	str	r3, [r7, #16]
}
 800d9ae:	bf00      	nop
 800d9b0:	e7fe      	b.n	800d9b0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d9b2:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <vTaskDelayUntil+0xf0>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00a      	beq.n	800d9d0 <vTaskDelayUntil+0x64>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9be:	f383 8811 	msr	BASEPRI, r3
 800d9c2:	f3bf 8f6f 	isb	sy
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	60fb      	str	r3, [r7, #12]
}
 800d9cc:	bf00      	nop
 800d9ce:	e7fe      	b.n	800d9ce <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d9d0:	f000 f8ee 	bl	800dbb0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d9d4:	4b22      	ldr	r3, [pc, #136]	; (800da60 <vTaskDelayUntil+0xf4>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6a3a      	ldr	r2, [r7, #32]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d20b      	bcs.n	800da06 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	69fa      	ldr	r2, [r7, #28]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d211      	bcs.n	800da1c <vTaskDelayUntil+0xb0>
 800d9f8:	69fa      	ldr	r2, [r7, #28]
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d90d      	bls.n	800da1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800da00:	2301      	movs	r3, #1
 800da02:	627b      	str	r3, [r7, #36]	; 0x24
 800da04:	e00a      	b.n	800da1c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69fa      	ldr	r2, [r7, #28]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d303      	bcc.n	800da18 <vTaskDelayUntil+0xac>
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	429a      	cmp	r2, r3
 800da16:	d901      	bls.n	800da1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800da18:	2301      	movs	r3, #1
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	69fa      	ldr	r2, [r7, #28]
 800da20:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800da28:	69fa      	ldr	r2, [r7, #28]
 800da2a:	6a3b      	ldr	r3, [r7, #32]
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	2100      	movs	r1, #0
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fd37 	bl	800e4a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800da36:	f000 f8c9 	bl	800dbcc <xTaskResumeAll>
 800da3a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d107      	bne.n	800da52 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800da42:	4b08      	ldr	r3, [pc, #32]	; (800da64 <vTaskDelayUntil+0xf8>)
 800da44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da52:	bf00      	nop
 800da54:	3728      	adds	r7, #40	; 0x28
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000d30 	.word	0x20000d30
 800da60:	20000d0c 	.word	0x20000d0c
 800da64:	e000ed04 	.word	0xe000ed04

0800da68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da70:	2300      	movs	r3, #0
 800da72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d017      	beq.n	800daaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da7a:	4b13      	ldr	r3, [pc, #76]	; (800dac8 <vTaskDelay+0x60>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00a      	beq.n	800da98 <vTaskDelay+0x30>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	60bb      	str	r3, [r7, #8]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da98:	f000 f88a 	bl	800dbb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da9c:	2100      	movs	r1, #0
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 fd00 	bl	800e4a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daa4:	f000 f892 	bl	800dbcc <xTaskResumeAll>
 800daa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d107      	bne.n	800dac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dab0:	4b06      	ldr	r3, [pc, #24]	; (800dacc <vTaskDelay+0x64>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dac0:	bf00      	nop
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	20000d30 	.word	0x20000d30
 800dacc:	e000ed04 	.word	0xe000ed04

0800dad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08a      	sub	sp, #40	; 0x28
 800dad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dada:	2300      	movs	r3, #0
 800dadc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dade:	463a      	mov	r2, r7
 800dae0:	1d39      	adds	r1, r7, #4
 800dae2:	f107 0308 	add.w	r3, r7, #8
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe febe 	bl	800c868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	9202      	str	r2, [sp, #8]
 800daf4:	9301      	str	r3, [sp, #4]
 800daf6:	2300      	movs	r3, #0
 800daf8:	9300      	str	r3, [sp, #0]
 800dafa:	2300      	movs	r3, #0
 800dafc:	460a      	mov	r2, r1
 800dafe:	4924      	ldr	r1, [pc, #144]	; (800db90 <vTaskStartScheduler+0xc0>)
 800db00:	4824      	ldr	r0, [pc, #144]	; (800db94 <vTaskStartScheduler+0xc4>)
 800db02:	f7ff fd77 	bl	800d5f4 <xTaskCreateStatic>
 800db06:	4603      	mov	r3, r0
 800db08:	4a23      	ldr	r2, [pc, #140]	; (800db98 <vTaskStartScheduler+0xc8>)
 800db0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db0c:	4b22      	ldr	r3, [pc, #136]	; (800db98 <vTaskStartScheduler+0xc8>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db14:	2301      	movs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e001      	b.n	800db1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d102      	bne.n	800db2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db24:	f000 fd12 	bl	800e54c <xTimerCreateTimerTask>
 800db28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d11b      	bne.n	800db68 <vTaskStartScheduler+0x98>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	613b      	str	r3, [r7, #16]
}
 800db42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db44:	4b15      	ldr	r3, [pc, #84]	; (800db9c <vTaskStartScheduler+0xcc>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3358      	adds	r3, #88	; 0x58
 800db4a:	4a15      	ldr	r2, [pc, #84]	; (800dba0 <vTaskStartScheduler+0xd0>)
 800db4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db4e:	4b15      	ldr	r3, [pc, #84]	; (800dba4 <vTaskStartScheduler+0xd4>)
 800db50:	f04f 32ff 	mov.w	r2, #4294967295
 800db54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db56:	4b14      	ldr	r3, [pc, #80]	; (800dba8 <vTaskStartScheduler+0xd8>)
 800db58:	2201      	movs	r2, #1
 800db5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db5c:	4b13      	ldr	r3, [pc, #76]	; (800dbac <vTaskStartScheduler+0xdc>)
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db62:	f001 f8cd 	bl	800ed00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db66:	e00e      	b.n	800db86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db6e:	d10a      	bne.n	800db86 <vTaskStartScheduler+0xb6>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	60fb      	str	r3, [r7, #12]
}
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <vTaskStartScheduler+0xb4>
}
 800db86:	bf00      	nop
 800db88:	3718      	adds	r7, #24
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	0800f724 	.word	0x0800f724
 800db94:	0800e1d5 	.word	0x0800e1d5
 800db98:	20000d2c 	.word	0x20000d2c
 800db9c:	20000834 	.word	0x20000834
 800dba0:	20000010 	.word	0x20000010
 800dba4:	20000d28 	.word	0x20000d28
 800dba8:	20000d14 	.word	0x20000d14
 800dbac:	20000d0c 	.word	0x20000d0c

0800dbb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbb4:	4b04      	ldr	r3, [pc, #16]	; (800dbc8 <vTaskSuspendAll+0x18>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	4a03      	ldr	r2, [pc, #12]	; (800dbc8 <vTaskSuspendAll+0x18>)
 800dbbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbbe:	bf00      	nop
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	20000d30 	.word	0x20000d30

0800dbcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbda:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <xTaskResumeAll+0x118>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10a      	bne.n	800dbf8 <xTaskResumeAll+0x2c>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	603b      	str	r3, [r7, #0]
}
 800dbf4:	bf00      	nop
 800dbf6:	e7fe      	b.n	800dbf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbf8:	f001 f924 	bl	800ee44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbfc:	4b39      	ldr	r3, [pc, #228]	; (800dce4 <xTaskResumeAll+0x118>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	4a38      	ldr	r2, [pc, #224]	; (800dce4 <xTaskResumeAll+0x118>)
 800dc04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc06:	4b37      	ldr	r3, [pc, #220]	; (800dce4 <xTaskResumeAll+0x118>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d162      	bne.n	800dcd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc0e:	4b36      	ldr	r3, [pc, #216]	; (800dce8 <xTaskResumeAll+0x11c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d05e      	beq.n	800dcd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc16:	e02f      	b.n	800dc78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc18:	4b34      	ldr	r3, [pc, #208]	; (800dcec <xTaskResumeAll+0x120>)
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3318      	adds	r3, #24
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe fedd 	bl	800c9e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe fed8 	bl	800c9e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	4b2d      	ldr	r3, [pc, #180]	; (800dcf0 <xTaskResumeAll+0x124>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d903      	bls.n	800dc48 <xTaskResumeAll+0x7c>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc44:	4a2a      	ldr	r2, [pc, #168]	; (800dcf0 <xTaskResumeAll+0x124>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a27      	ldr	r2, [pc, #156]	; (800dcf4 <xTaskResumeAll+0x128>)
 800dc56:	441a      	add	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fe63 	bl	800c92a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	4b23      	ldr	r3, [pc, #140]	; (800dcf8 <xTaskResumeAll+0x12c>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d302      	bcc.n	800dc78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc72:	4b22      	ldr	r3, [pc, #136]	; (800dcfc <xTaskResumeAll+0x130>)
 800dc74:	2201      	movs	r2, #1
 800dc76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc78:	4b1c      	ldr	r3, [pc, #112]	; (800dcec <xTaskResumeAll+0x120>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1cb      	bne.n	800dc18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc86:	f000 fb61 	bl	800e34c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc8a:	4b1d      	ldr	r3, [pc, #116]	; (800dd00 <xTaskResumeAll+0x134>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d010      	beq.n	800dcb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc96:	f000 f847 	bl	800dd28 <xTaskIncrementTick>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dca0:	4b16      	ldr	r3, [pc, #88]	; (800dcfc <xTaskResumeAll+0x130>)
 800dca2:	2201      	movs	r2, #1
 800dca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1f1      	bne.n	800dc96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dcb2:	4b13      	ldr	r3, [pc, #76]	; (800dd00 <xTaskResumeAll+0x134>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dcb8:	4b10      	ldr	r3, [pc, #64]	; (800dcfc <xTaskResumeAll+0x130>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d009      	beq.n	800dcd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcc4:	4b0f      	ldr	r3, [pc, #60]	; (800dd04 <xTaskResumeAll+0x138>)
 800dcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcca:	601a      	str	r2, [r3, #0]
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcd4:	f001 f8e6 	bl	800eea4 <vPortExitCritical>

	return xAlreadyYielded;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000d30 	.word	0x20000d30
 800dce8:	20000d08 	.word	0x20000d08
 800dcec:	20000cc8 	.word	0x20000cc8
 800dcf0:	20000d10 	.word	0x20000d10
 800dcf4:	20000838 	.word	0x20000838
 800dcf8:	20000834 	.word	0x20000834
 800dcfc:	20000d1c 	.word	0x20000d1c
 800dd00:	20000d18 	.word	0x20000d18
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd0e:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <xTaskGetTickCount+0x1c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd14:	687b      	ldr	r3, [r7, #4]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	370c      	adds	r7, #12
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	20000d0c 	.word	0x20000d0c

0800dd28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd32:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <xTaskIncrementTick+0x148>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f040 808f 	bne.w	800de5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd3c:	4b4d      	ldr	r3, [pc, #308]	; (800de74 <xTaskIncrementTick+0x14c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3301      	adds	r3, #1
 800dd42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd44:	4a4b      	ldr	r2, [pc, #300]	; (800de74 <xTaskIncrementTick+0x14c>)
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d120      	bne.n	800dd92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd50:	4b49      	ldr	r3, [pc, #292]	; (800de78 <xTaskIncrementTick+0x150>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00a      	beq.n	800dd70 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	603b      	str	r3, [r7, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <xTaskIncrementTick+0x46>
 800dd70:	4b41      	ldr	r3, [pc, #260]	; (800de78 <xTaskIncrementTick+0x150>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	4b41      	ldr	r3, [pc, #260]	; (800de7c <xTaskIncrementTick+0x154>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a3f      	ldr	r2, [pc, #252]	; (800de78 <xTaskIncrementTick+0x150>)
 800dd7c:	6013      	str	r3, [r2, #0]
 800dd7e:	4a3f      	ldr	r2, [pc, #252]	; (800de7c <xTaskIncrementTick+0x154>)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	4b3e      	ldr	r3, [pc, #248]	; (800de80 <xTaskIncrementTick+0x158>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	4a3d      	ldr	r2, [pc, #244]	; (800de80 <xTaskIncrementTick+0x158>)
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	f000 fadd 	bl	800e34c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd92:	4b3c      	ldr	r3, [pc, #240]	; (800de84 <xTaskIncrementTick+0x15c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d349      	bcc.n	800de30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd9c:	4b36      	ldr	r3, [pc, #216]	; (800de78 <xTaskIncrementTick+0x150>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d104      	bne.n	800ddb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dda6:	4b37      	ldr	r3, [pc, #220]	; (800de84 <xTaskIncrementTick+0x15c>)
 800dda8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddac:	601a      	str	r2, [r3, #0]
					break;
 800ddae:	e03f      	b.n	800de30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb0:	4b31      	ldr	r3, [pc, #196]	; (800de78 <xTaskIncrementTick+0x150>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d203      	bcs.n	800ddd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddc8:	4a2e      	ldr	r2, [pc, #184]	; (800de84 <xTaskIncrementTick+0x15c>)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddce:	e02f      	b.n	800de30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fe05 	bl	800c9e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	3318      	adds	r3, #24
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fdfc 	bl	800c9e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	4b25      	ldr	r3, [pc, #148]	; (800de88 <xTaskIncrementTick+0x160>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d903      	bls.n	800de00 <xTaskIncrementTick+0xd8>
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfc:	4a22      	ldr	r2, [pc, #136]	; (800de88 <xTaskIncrementTick+0x160>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4a1f      	ldr	r2, [pc, #124]	; (800de8c <xTaskIncrementTick+0x164>)
 800de0e:	441a      	add	r2, r3
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	3304      	adds	r3, #4
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	f7fe fd87 	bl	800c92a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de20:	4b1b      	ldr	r3, [pc, #108]	; (800de90 <xTaskIncrementTick+0x168>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	429a      	cmp	r2, r3
 800de28:	d3b8      	bcc.n	800dd9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de2a:	2301      	movs	r3, #1
 800de2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de2e:	e7b5      	b.n	800dd9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de30:	4b17      	ldr	r3, [pc, #92]	; (800de90 <xTaskIncrementTick+0x168>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de36:	4915      	ldr	r1, [pc, #84]	; (800de8c <xTaskIncrementTick+0x164>)
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	440b      	add	r3, r1
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d901      	bls.n	800de4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de48:	2301      	movs	r3, #1
 800de4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de4c:	4b11      	ldr	r3, [pc, #68]	; (800de94 <xTaskIncrementTick+0x16c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de54:	2301      	movs	r3, #1
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	e004      	b.n	800de64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <xTaskIncrementTick+0x170>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3301      	adds	r3, #1
 800de60:	4a0d      	ldr	r2, [pc, #52]	; (800de98 <xTaskIncrementTick+0x170>)
 800de62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de64:	697b      	ldr	r3, [r7, #20]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20000d30 	.word	0x20000d30
 800de74:	20000d0c 	.word	0x20000d0c
 800de78:	20000cc0 	.word	0x20000cc0
 800de7c:	20000cc4 	.word	0x20000cc4
 800de80:	20000d20 	.word	0x20000d20
 800de84:	20000d28 	.word	0x20000d28
 800de88:	20000d10 	.word	0x20000d10
 800de8c:	20000838 	.word	0x20000838
 800de90:	20000834 	.word	0x20000834
 800de94:	20000d1c 	.word	0x20000d1c
 800de98:	20000d18 	.word	0x20000d18

0800de9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dea2:	4b2a      	ldr	r3, [pc, #168]	; (800df4c <vTaskSwitchContext+0xb0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800deaa:	4b29      	ldr	r3, [pc, #164]	; (800df50 <vTaskSwitchContext+0xb4>)
 800deac:	2201      	movs	r2, #1
 800deae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800deb0:	e046      	b.n	800df40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800deb2:	4b27      	ldr	r3, [pc, #156]	; (800df50 <vTaskSwitchContext+0xb4>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb8:	4b26      	ldr	r3, [pc, #152]	; (800df54 <vTaskSwitchContext+0xb8>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	60fb      	str	r3, [r7, #12]
 800debe:	e010      	b.n	800dee2 <vTaskSwitchContext+0x46>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10a      	bne.n	800dedc <vTaskSwitchContext+0x40>
	__asm volatile
 800dec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	607b      	str	r3, [r7, #4]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <vTaskSwitchContext+0x3e>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3b01      	subs	r3, #1
 800dee0:	60fb      	str	r3, [r7, #12]
 800dee2:	491d      	ldr	r1, [pc, #116]	; (800df58 <vTaskSwitchContext+0xbc>)
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	4613      	mov	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	440b      	add	r3, r1
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0e4      	beq.n	800dec0 <vTaskSwitchContext+0x24>
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	4613      	mov	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4a15      	ldr	r2, [pc, #84]	; (800df58 <vTaskSwitchContext+0xbc>)
 800df02:	4413      	add	r3, r2
 800df04:	60bb      	str	r3, [r7, #8]
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	605a      	str	r2, [r3, #4]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	685a      	ldr	r2, [r3, #4]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	3308      	adds	r3, #8
 800df18:	429a      	cmp	r2, r3
 800df1a:	d104      	bne.n	800df26 <vTaskSwitchContext+0x8a>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	605a      	str	r2, [r3, #4]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	4a0b      	ldr	r2, [pc, #44]	; (800df5c <vTaskSwitchContext+0xc0>)
 800df2e:	6013      	str	r3, [r2, #0]
 800df30:	4a08      	ldr	r2, [pc, #32]	; (800df54 <vTaskSwitchContext+0xb8>)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <vTaskSwitchContext+0xc0>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3358      	adds	r3, #88	; 0x58
 800df3c:	4a08      	ldr	r2, [pc, #32]	; (800df60 <vTaskSwitchContext+0xc4>)
 800df3e:	6013      	str	r3, [r2, #0]
}
 800df40:	bf00      	nop
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	20000d30 	.word	0x20000d30
 800df50:	20000d1c 	.word	0x20000d1c
 800df54:	20000d10 	.word	0x20000d10
 800df58:	20000838 	.word	0x20000838
 800df5c:	20000834 	.word	0x20000834
 800df60:	20000010 	.word	0x20000010

0800df64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10a      	bne.n	800df8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	60fb      	str	r3, [r7, #12]
}
 800df86:	bf00      	nop
 800df88:	e7fe      	b.n	800df88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df8a:	4b07      	ldr	r3, [pc, #28]	; (800dfa8 <vTaskPlaceOnEventList+0x44>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3318      	adds	r3, #24
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fe fced 	bl	800c972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df98:	2101      	movs	r1, #1
 800df9a:	6838      	ldr	r0, [r7, #0]
 800df9c:	f000 fa82 	bl	800e4a4 <prvAddCurrentTaskToDelayedList>
}
 800dfa0:	bf00      	nop
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000834 	.word	0x20000834

0800dfac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10a      	bne.n	800dfd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	617b      	str	r3, [r7, #20]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	3318      	adds	r3, #24
 800dfda:	4619      	mov	r1, r3
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7fe fca4 	bl	800c92a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	68b8      	ldr	r0, [r7, #8]
 800dff2:	f000 fa57 	bl	800e4a4 <prvAddCurrentTaskToDelayedList>
	}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	20000834 	.word	0x20000834

0800e004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b086      	sub	sp, #24
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10a      	bne.n	800e030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	60fb      	str	r3, [r7, #12]
}
 800e02c:	bf00      	nop
 800e02e:	e7fe      	b.n	800e02e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	3318      	adds	r3, #24
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe fcd5 	bl	800c9e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e03a:	4b1e      	ldr	r3, [pc, #120]	; (800e0b4 <xTaskRemoveFromEventList+0xb0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d11d      	bne.n	800e07e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3304      	adds	r3, #4
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fccc 	bl	800c9e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	4b19      	ldr	r3, [pc, #100]	; (800e0b8 <xTaskRemoveFromEventList+0xb4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d903      	bls.n	800e060 <xTaskRemoveFromEventList+0x5c>
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	4a16      	ldr	r2, [pc, #88]	; (800e0b8 <xTaskRemoveFromEventList+0xb4>)
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4a13      	ldr	r2, [pc, #76]	; (800e0bc <xTaskRemoveFromEventList+0xb8>)
 800e06e:	441a      	add	r2, r3
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3304      	adds	r3, #4
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f7fe fc57 	bl	800c92a <vListInsertEnd>
 800e07c:	e005      	b.n	800e08a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	3318      	adds	r3, #24
 800e082:	4619      	mov	r1, r3
 800e084:	480e      	ldr	r0, [pc, #56]	; (800e0c0 <xTaskRemoveFromEventList+0xbc>)
 800e086:	f7fe fc50 	bl	800c92a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08e:	4b0d      	ldr	r3, [pc, #52]	; (800e0c4 <xTaskRemoveFromEventList+0xc0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	429a      	cmp	r2, r3
 800e096:	d905      	bls.n	800e0a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e098:	2301      	movs	r3, #1
 800e09a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e09c:	4b0a      	ldr	r3, [pc, #40]	; (800e0c8 <xTaskRemoveFromEventList+0xc4>)
 800e09e:	2201      	movs	r2, #1
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	e001      	b.n	800e0a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0a8:	697b      	ldr	r3, [r7, #20]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3718      	adds	r7, #24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	20000d30 	.word	0x20000d30
 800e0b8:	20000d10 	.word	0x20000d10
 800e0bc:	20000838 	.word	0x20000838
 800e0c0:	20000cc8 	.word	0x20000cc8
 800e0c4:	20000834 	.word	0x20000834
 800e0c8:	20000d1c 	.word	0x20000d1c

0800e0cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0d4:	4b06      	ldr	r3, [pc, #24]	; (800e0f0 <vTaskInternalSetTimeOutState+0x24>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <vTaskInternalSetTimeOutState+0x28>)
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	605a      	str	r2, [r3, #4]
}
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr
 800e0f0:	20000d20 	.word	0x20000d20
 800e0f4:	20000d0c 	.word	0x20000d0c

0800e0f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10a      	bne.n	800e11e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	613b      	str	r3, [r7, #16]
}
 800e11a:	bf00      	nop
 800e11c:	e7fe      	b.n	800e11c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e13a:	f000 fe83 	bl	800ee44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e13e:	4b1d      	ldr	r3, [pc, #116]	; (800e1b4 <xTaskCheckForTimeOut+0xbc>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	69ba      	ldr	r2, [r7, #24]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e156:	d102      	bne.n	800e15e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e158:	2300      	movs	r3, #0
 800e15a:	61fb      	str	r3, [r7, #28]
 800e15c:	e023      	b.n	800e1a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <xTaskCheckForTimeOut+0xc0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	429a      	cmp	r2, r3
 800e168:	d007      	beq.n	800e17a <xTaskCheckForTimeOut+0x82>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	69ba      	ldr	r2, [r7, #24]
 800e170:	429a      	cmp	r2, r3
 800e172:	d302      	bcc.n	800e17a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e174:	2301      	movs	r3, #1
 800e176:	61fb      	str	r3, [r7, #28]
 800e178:	e015      	b.n	800e1a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	429a      	cmp	r2, r3
 800e182:	d20b      	bcs.n	800e19c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	1ad2      	subs	r2, r2, r3
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ff9b 	bl	800e0cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e196:	2300      	movs	r3, #0
 800e198:	61fb      	str	r3, [r7, #28]
 800e19a:	e004      	b.n	800e1a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1a6:	f000 fe7d 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800e1aa:	69fb      	ldr	r3, [r7, #28]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3720      	adds	r7, #32
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20000d0c 	.word	0x20000d0c
 800e1b8:	20000d20 	.word	0x20000d20

0800e1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1c0:	4b03      	ldr	r3, [pc, #12]	; (800e1d0 <vTaskMissedYield+0x14>)
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	601a      	str	r2, [r3, #0]
}
 800e1c6:	bf00      	nop
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20000d1c 	.word	0x20000d1c

0800e1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1dc:	f000 f854 	bl	800e288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1e0:	4b07      	ldr	r3, [pc, #28]	; (800e200 <prvIdleTask+0x2c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d907      	bls.n	800e1f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e1e8:	4b06      	ldr	r3, [pc, #24]	; (800e204 <prvIdleTask+0x30>)
 800e1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e1f8:	f7f2 fc36 	bl	8000a68 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e1fc:	e7ee      	b.n	800e1dc <prvIdleTask+0x8>
 800e1fe:	bf00      	nop
 800e200:	20000838 	.word	0x20000838
 800e204:	e000ed04 	.word	0xe000ed04

0800e208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e20e:	2300      	movs	r3, #0
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	e00c      	b.n	800e22e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	4613      	mov	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4413      	add	r3, r2
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	4a12      	ldr	r2, [pc, #72]	; (800e268 <prvInitialiseTaskLists+0x60>)
 800e220:	4413      	add	r3, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe fb54 	bl	800c8d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3301      	adds	r3, #1
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b37      	cmp	r3, #55	; 0x37
 800e232:	d9ef      	bls.n	800e214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e234:	480d      	ldr	r0, [pc, #52]	; (800e26c <prvInitialiseTaskLists+0x64>)
 800e236:	f7fe fb4b 	bl	800c8d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e23a:	480d      	ldr	r0, [pc, #52]	; (800e270 <prvInitialiseTaskLists+0x68>)
 800e23c:	f7fe fb48 	bl	800c8d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e240:	480c      	ldr	r0, [pc, #48]	; (800e274 <prvInitialiseTaskLists+0x6c>)
 800e242:	f7fe fb45 	bl	800c8d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e246:	480c      	ldr	r0, [pc, #48]	; (800e278 <prvInitialiseTaskLists+0x70>)
 800e248:	f7fe fb42 	bl	800c8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e24c:	480b      	ldr	r0, [pc, #44]	; (800e27c <prvInitialiseTaskLists+0x74>)
 800e24e:	f7fe fb3f 	bl	800c8d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e252:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <prvInitialiseTaskLists+0x78>)
 800e254:	4a05      	ldr	r2, [pc, #20]	; (800e26c <prvInitialiseTaskLists+0x64>)
 800e256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e258:	4b0a      	ldr	r3, [pc, #40]	; (800e284 <prvInitialiseTaskLists+0x7c>)
 800e25a:	4a05      	ldr	r2, [pc, #20]	; (800e270 <prvInitialiseTaskLists+0x68>)
 800e25c:	601a      	str	r2, [r3, #0]
}
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20000838 	.word	0x20000838
 800e26c:	20000c98 	.word	0x20000c98
 800e270:	20000cac 	.word	0x20000cac
 800e274:	20000cc8 	.word	0x20000cc8
 800e278:	20000cdc 	.word	0x20000cdc
 800e27c:	20000cf4 	.word	0x20000cf4
 800e280:	20000cc0 	.word	0x20000cc0
 800e284:	20000cc4 	.word	0x20000cc4

0800e288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e28e:	e019      	b.n	800e2c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e290:	f000 fdd8 	bl	800ee44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e294:	4b10      	ldr	r3, [pc, #64]	; (800e2d8 <prvCheckTasksWaitingTermination+0x50>)
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	3304      	adds	r3, #4
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7fe fb9f 	bl	800c9e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2a6:	4b0d      	ldr	r3, [pc, #52]	; (800e2dc <prvCheckTasksWaitingTermination+0x54>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	4a0b      	ldr	r2, [pc, #44]	; (800e2dc <prvCheckTasksWaitingTermination+0x54>)
 800e2ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2b0:	4b0b      	ldr	r3, [pc, #44]	; (800e2e0 <prvCheckTasksWaitingTermination+0x58>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	4a0a      	ldr	r2, [pc, #40]	; (800e2e0 <prvCheckTasksWaitingTermination+0x58>)
 800e2b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2ba:	f000 fdf3 	bl	800eea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f810 	bl	800e2e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2c4:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <prvCheckTasksWaitingTermination+0x58>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e1      	bne.n	800e290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2cc:	bf00      	nop
 800e2ce:	bf00      	nop
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	20000cdc 	.word	0x20000cdc
 800e2dc:	20000d08 	.word	0x20000d08
 800e2e0:	20000cf0 	.word	0x20000cf0

0800e2e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3358      	adds	r3, #88	; 0x58
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f001 f8fd 	bl	800f4f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d108      	bne.n	800e312 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e304:	4618      	mov	r0, r3
 800e306:	f000 ff8b 	bl	800f220 <vPortFree>
				vPortFree( pxTCB );
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 ff88 	bl	800f220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e310:	e018      	b.n	800e344 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d103      	bne.n	800e324 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 ff7f 	bl	800f220 <vPortFree>
	}
 800e322:	e00f      	b.n	800e344 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	d00a      	beq.n	800e344 <prvDeleteTCB+0x60>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	60fb      	str	r3, [r7, #12]
}
 800e340:	bf00      	nop
 800e342:	e7fe      	b.n	800e342 <prvDeleteTCB+0x5e>
	}
 800e344:	bf00      	nop
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e352:	4b0c      	ldr	r3, [pc, #48]	; (800e384 <prvResetNextTaskUnblockTime+0x38>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d104      	bne.n	800e366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e35c:	4b0a      	ldr	r3, [pc, #40]	; (800e388 <prvResetNextTaskUnblockTime+0x3c>)
 800e35e:	f04f 32ff 	mov.w	r2, #4294967295
 800e362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e364:	e008      	b.n	800e378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e366:	4b07      	ldr	r3, [pc, #28]	; (800e384 <prvResetNextTaskUnblockTime+0x38>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	4a04      	ldr	r2, [pc, #16]	; (800e388 <prvResetNextTaskUnblockTime+0x3c>)
 800e376:	6013      	str	r3, [r2, #0]
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	20000cc0 	.word	0x20000cc0
 800e388:	20000d28 	.word	0x20000d28

0800e38c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e392:	4b0b      	ldr	r3, [pc, #44]	; (800e3c0 <xTaskGetSchedulerState+0x34>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d102      	bne.n	800e3a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e39a:	2301      	movs	r3, #1
 800e39c:	607b      	str	r3, [r7, #4]
 800e39e:	e008      	b.n	800e3b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3a0:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <xTaskGetSchedulerState+0x38>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	607b      	str	r3, [r7, #4]
 800e3ac:	e001      	b.n	800e3b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3b2:	687b      	ldr	r3, [r7, #4]
	}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	20000d14 	.word	0x20000d14
 800e3c4:	20000d30 	.word	0x20000d30

0800e3c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d056      	beq.n	800e48c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e3de:	4b2e      	ldr	r3, [pc, #184]	; (800e498 <xTaskPriorityDisinherit+0xd0>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d00a      	beq.n	800e3fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ec:	f383 8811 	msr	BASEPRI, r3
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	60fb      	str	r3, [r7, #12]
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10a      	bne.n	800e41c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	60bb      	str	r3, [r7, #8]
}
 800e418:	bf00      	nop
 800e41a:	e7fe      	b.n	800e41a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e420:	1e5a      	subs	r2, r3, #1
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e42e:	429a      	cmp	r2, r3
 800e430:	d02c      	beq.n	800e48c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e436:	2b00      	cmp	r3, #0
 800e438:	d128      	bne.n	800e48c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fad0 	bl	800c9e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e450:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45c:	4b0f      	ldr	r3, [pc, #60]	; (800e49c <xTaskPriorityDisinherit+0xd4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	429a      	cmp	r2, r3
 800e462:	d903      	bls.n	800e46c <xTaskPriorityDisinherit+0xa4>
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e468:	4a0c      	ldr	r2, [pc, #48]	; (800e49c <xTaskPriorityDisinherit+0xd4>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e470:	4613      	mov	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4413      	add	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4a09      	ldr	r2, [pc, #36]	; (800e4a0 <xTaskPriorityDisinherit+0xd8>)
 800e47a:	441a      	add	r2, r3
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	3304      	adds	r3, #4
 800e480:	4619      	mov	r1, r3
 800e482:	4610      	mov	r0, r2
 800e484:	f7fe fa51 	bl	800c92a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e48c:	697b      	ldr	r3, [r7, #20]
	}
 800e48e:	4618      	mov	r0, r3
 800e490:	3718      	adds	r7, #24
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	20000834 	.word	0x20000834
 800e49c:	20000d10 	.word	0x20000d10
 800e4a0:	20000838 	.word	0x20000838

0800e4a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4ae:	4b21      	ldr	r3, [pc, #132]	; (800e534 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4b4:	4b20      	ldr	r3, [pc, #128]	; (800e538 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fa92 	bl	800c9e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c6:	d10a      	bne.n	800e4de <prvAddCurrentTaskToDelayedList+0x3a>
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d007      	beq.n	800e4de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ce:	4b1a      	ldr	r3, [pc, #104]	; (800e538 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4819      	ldr	r0, [pc, #100]	; (800e53c <prvAddCurrentTaskToDelayedList+0x98>)
 800e4d8:	f7fe fa27 	bl	800c92a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4dc:	e026      	b.n	800e52c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4e6:	4b14      	ldr	r3, [pc, #80]	; (800e538 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d209      	bcs.n	800e50a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f6:	4b12      	ldr	r3, [pc, #72]	; (800e540 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	4b0f      	ldr	r3, [pc, #60]	; (800e538 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fe fa35 	bl	800c972 <vListInsert>
}
 800e508:	e010      	b.n	800e52c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e50a:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <prvAddCurrentTaskToDelayedList+0x94>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	3304      	adds	r3, #4
 800e514:	4619      	mov	r1, r3
 800e516:	4610      	mov	r0, r2
 800e518:	f7fe fa2b 	bl	800c972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68ba      	ldr	r2, [r7, #8]
 800e522:	429a      	cmp	r2, r3
 800e524:	d202      	bcs.n	800e52c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e526:	4a08      	ldr	r2, [pc, #32]	; (800e548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6013      	str	r3, [r2, #0]
}
 800e52c:	bf00      	nop
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	20000d0c 	.word	0x20000d0c
 800e538:	20000834 	.word	0x20000834
 800e53c:	20000cf4 	.word	0x20000cf4
 800e540:	20000cc4 	.word	0x20000cc4
 800e544:	20000cc0 	.word	0x20000cc0
 800e548:	20000d28 	.word	0x20000d28

0800e54c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08a      	sub	sp, #40	; 0x28
 800e550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e556:	f000 fb07 	bl	800eb68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e55a:	4b1c      	ldr	r3, [pc, #112]	; (800e5cc <xTimerCreateTimerTask+0x80>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d021      	beq.n	800e5a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e56a:	1d3a      	adds	r2, r7, #4
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	f107 030c 	add.w	r3, r7, #12
 800e574:	4618      	mov	r0, r3
 800e576:	f7fe f991 	bl	800c89c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	9202      	str	r2, [sp, #8]
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	2302      	movs	r3, #2
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	2300      	movs	r3, #0
 800e58a:	460a      	mov	r2, r1
 800e58c:	4910      	ldr	r1, [pc, #64]	; (800e5d0 <xTimerCreateTimerTask+0x84>)
 800e58e:	4811      	ldr	r0, [pc, #68]	; (800e5d4 <xTimerCreateTimerTask+0x88>)
 800e590:	f7ff f830 	bl	800d5f4 <xTaskCreateStatic>
 800e594:	4603      	mov	r3, r0
 800e596:	4a10      	ldr	r2, [pc, #64]	; (800e5d8 <xTimerCreateTimerTask+0x8c>)
 800e598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <xTimerCreateTimerTask+0x8c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d10a      	bne.n	800e5c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	613b      	str	r3, [r7, #16]
}
 800e5be:	bf00      	nop
 800e5c0:	e7fe      	b.n	800e5c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5c2:	697b      	ldr	r3, [r7, #20]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20000d64 	.word	0x20000d64
 800e5d0:	0800f72c 	.word	0x0800f72c
 800e5d4:	0800e711 	.word	0x0800e711
 800e5d8:	20000d68 	.word	0x20000d68

0800e5dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08a      	sub	sp, #40	; 0x28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10a      	bne.n	800e60a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	623b      	str	r3, [r7, #32]
}
 800e606:	bf00      	nop
 800e608:	e7fe      	b.n	800e608 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e60a:	4b1a      	ldr	r3, [pc, #104]	; (800e674 <xTimerGenericCommand+0x98>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d02a      	beq.n	800e668 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	2b05      	cmp	r3, #5
 800e622:	dc18      	bgt.n	800e656 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e624:	f7ff feb2 	bl	800e38c <xTaskGetSchedulerState>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d109      	bne.n	800e642 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e62e:	4b11      	ldr	r3, [pc, #68]	; (800e674 <xTimerGenericCommand+0x98>)
 800e630:	6818      	ldr	r0, [r3, #0]
 800e632:	f107 0110 	add.w	r1, r7, #16
 800e636:	2300      	movs	r3, #0
 800e638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e63a:	f7fe fba5 	bl	800cd88 <xQueueGenericSend>
 800e63e:	6278      	str	r0, [r7, #36]	; 0x24
 800e640:	e012      	b.n	800e668 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e642:	4b0c      	ldr	r3, [pc, #48]	; (800e674 <xTimerGenericCommand+0x98>)
 800e644:	6818      	ldr	r0, [r3, #0]
 800e646:	f107 0110 	add.w	r1, r7, #16
 800e64a:	2300      	movs	r3, #0
 800e64c:	2200      	movs	r2, #0
 800e64e:	f7fe fb9b 	bl	800cd88 <xQueueGenericSend>
 800e652:	6278      	str	r0, [r7, #36]	; 0x24
 800e654:	e008      	b.n	800e668 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e656:	4b07      	ldr	r3, [pc, #28]	; (800e674 <xTimerGenericCommand+0x98>)
 800e658:	6818      	ldr	r0, [r3, #0]
 800e65a:	f107 0110 	add.w	r1, r7, #16
 800e65e:	2300      	movs	r3, #0
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	f7fe fc8f 	bl	800cf84 <xQueueGenericSendFromISR>
 800e666:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3728      	adds	r7, #40	; 0x28
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20000d64 	.word	0x20000d64

0800e678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af02      	add	r7, sp, #8
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e682:	4b22      	ldr	r3, [pc, #136]	; (800e70c <prvProcessExpiredTimer+0x94>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	3304      	adds	r3, #4
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe f9a7 	bl	800c9e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e69c:	f003 0304 	and.w	r3, r3, #4
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d022      	beq.n	800e6ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	699a      	ldr	r2, [r3, #24]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	18d1      	adds	r1, r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	6978      	ldr	r0, [r7, #20]
 800e6b2:	f000 f8d1 	bl	800e858 <prvInsertTimerInActiveList>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d01f      	beq.n	800e6fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6bc:	2300      	movs	r3, #0
 800e6be:	9300      	str	r3, [sp, #0]
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	6978      	ldr	r0, [r7, #20]
 800e6c8:	f7ff ff88 	bl	800e5dc <xTimerGenericCommand>
 800e6cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d113      	bne.n	800e6fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	60fb      	str	r3, [r7, #12]
}
 800e6e6:	bf00      	nop
 800e6e8:	e7fe      	b.n	800e6e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6f0:	f023 0301 	bic.w	r3, r3, #1
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	6a1b      	ldr	r3, [r3, #32]
 800e700:	6978      	ldr	r0, [r7, #20]
 800e702:	4798      	blx	r3
}
 800e704:	bf00      	nop
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20000d5c 	.word	0x20000d5c

0800e710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e718:	f107 0308 	add.w	r3, r7, #8
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 f857 	bl	800e7d0 <prvGetNextExpireTime>
 800e722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	4619      	mov	r1, r3
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f000 f803 	bl	800e734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e72e:	f000 f8d5 	bl	800e8dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e732:	e7f1      	b.n	800e718 <prvTimerTask+0x8>

0800e734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e73e:	f7ff fa37 	bl	800dbb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e742:	f107 0308 	add.w	r3, r7, #8
 800e746:	4618      	mov	r0, r3
 800e748:	f000 f866 	bl	800e818 <prvSampleTimeNow>
 800e74c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d130      	bne.n	800e7b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10a      	bne.n	800e770 <prvProcessTimerOrBlockTask+0x3c>
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d806      	bhi.n	800e770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e762:	f7ff fa33 	bl	800dbcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e766:	68f9      	ldr	r1, [r7, #12]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7ff ff85 	bl	800e678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e76e:	e024      	b.n	800e7ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d008      	beq.n	800e788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e776:	4b13      	ldr	r3, [pc, #76]	; (800e7c4 <prvProcessTimerOrBlockTask+0x90>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <prvProcessTimerOrBlockTask+0x50>
 800e780:	2301      	movs	r3, #1
 800e782:	e000      	b.n	800e786 <prvProcessTimerOrBlockTask+0x52>
 800e784:	2300      	movs	r3, #0
 800e786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e788:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <prvProcessTimerOrBlockTask+0x94>)
 800e78a:	6818      	ldr	r0, [r3, #0]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	4619      	mov	r1, r3
 800e796:	f7fe fef9 	bl	800d58c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e79a:	f7ff fa17 	bl	800dbcc <xTaskResumeAll>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7a4:	4b09      	ldr	r3, [pc, #36]	; (800e7cc <prvProcessTimerOrBlockTask+0x98>)
 800e7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	f3bf 8f6f 	isb	sy
}
 800e7b4:	e001      	b.n	800e7ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7b6:	f7ff fa09 	bl	800dbcc <xTaskResumeAll>
}
 800e7ba:	bf00      	nop
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20000d60 	.word	0x20000d60
 800e7c8:	20000d64 	.word	0x20000d64
 800e7cc:	e000ed04 	.word	0xe000ed04

0800e7d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7d8:	4b0e      	ldr	r3, [pc, #56]	; (800e814 <prvGetNextExpireTime+0x44>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <prvGetNextExpireTime+0x16>
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	e000      	b.n	800e7e8 <prvGetNextExpireTime+0x18>
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d105      	bne.n	800e800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7f4:	4b07      	ldr	r3, [pc, #28]	; (800e814 <prvGetNextExpireTime+0x44>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60fb      	str	r3, [r7, #12]
 800e7fe:	e001      	b.n	800e804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e800:	2300      	movs	r3, #0
 800e802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e804:	68fb      	ldr	r3, [r7, #12]
}
 800e806:	4618      	mov	r0, r3
 800e808:	3714      	adds	r7, #20
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	20000d5c 	.word	0x20000d5c

0800e818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e820:	f7ff fa72 	bl	800dd08 <xTaskGetTickCount>
 800e824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e826:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <prvSampleTimeNow+0x3c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d205      	bcs.n	800e83c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e830:	f000 f936 	bl	800eaa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	e002      	b.n	800e842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e842:	4a04      	ldr	r2, [pc, #16]	; (800e854 <prvSampleTimeNow+0x3c>)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	20000d6c 	.word	0x20000d6c

0800e858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
 800e864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d812      	bhi.n	800e8a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d302      	bcc.n	800e892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e88c:	2301      	movs	r3, #1
 800e88e:	617b      	str	r3, [r7, #20]
 800e890:	e01b      	b.n	800e8ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e892:	4b10      	ldr	r3, [pc, #64]	; (800e8d4 <prvInsertTimerInActiveList+0x7c>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3304      	adds	r3, #4
 800e89a:	4619      	mov	r1, r3
 800e89c:	4610      	mov	r0, r2
 800e89e:	f7fe f868 	bl	800c972 <vListInsert>
 800e8a2:	e012      	b.n	800e8ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d206      	bcs.n	800e8ba <prvInsertTimerInActiveList+0x62>
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d302      	bcc.n	800e8ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	617b      	str	r3, [r7, #20]
 800e8b8:	e007      	b.n	800e8ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ba:	4b07      	ldr	r3, [pc, #28]	; (800e8d8 <prvInsertTimerInActiveList+0x80>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	4610      	mov	r0, r2
 800e8c6:	f7fe f854 	bl	800c972 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8ca:	697b      	ldr	r3, [r7, #20]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3718      	adds	r7, #24
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	20000d60 	.word	0x20000d60
 800e8d8:	20000d5c 	.word	0x20000d5c

0800e8dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08e      	sub	sp, #56	; 0x38
 800e8e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8e2:	e0ca      	b.n	800ea7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	da18      	bge.n	800e91c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8ea:	1d3b      	adds	r3, r7, #4
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d10a      	bne.n	800e90c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	61fb      	str	r3, [r7, #28]
}
 800e908:	bf00      	nop
 800e90a:	e7fe      	b.n	800e90a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e912:	6850      	ldr	r0, [r2, #4]
 800e914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e916:	6892      	ldr	r2, [r2, #8]
 800e918:	4611      	mov	r1, r2
 800e91a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f2c0 80aa 	blt.w	800ea78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d004      	beq.n	800e93a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	3304      	adds	r3, #4
 800e934:	4618      	mov	r0, r3
 800e936:	f7fe f855 	bl	800c9e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e93a:	463b      	mov	r3, r7
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff ff6b 	bl	800e818 <prvSampleTimeNow>
 800e942:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b09      	cmp	r3, #9
 800e948:	f200 8097 	bhi.w	800ea7a <prvProcessReceivedCommands+0x19e>
 800e94c:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <prvProcessReceivedCommands+0x78>)
 800e94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e952:	bf00      	nop
 800e954:	0800e97d 	.word	0x0800e97d
 800e958:	0800e97d 	.word	0x0800e97d
 800e95c:	0800e97d 	.word	0x0800e97d
 800e960:	0800e9f1 	.word	0x0800e9f1
 800e964:	0800ea05 	.word	0x0800ea05
 800e968:	0800ea4f 	.word	0x0800ea4f
 800e96c:	0800e97d 	.word	0x0800e97d
 800e970:	0800e97d 	.word	0x0800e97d
 800e974:	0800e9f1 	.word	0x0800e9f1
 800e978:	0800ea05 	.word	0x0800ea05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e982:	f043 0301 	orr.w	r3, r3, #1
 800e986:	b2da      	uxtb	r2, r3
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e98e:	68ba      	ldr	r2, [r7, #8]
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	18d1      	adds	r1, r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e99c:	f7ff ff5c 	bl	800e858 <prvInsertTimerInActiveList>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d069      	beq.n	800ea7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d05e      	beq.n	800ea7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	441a      	add	r2, r3
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ce:	f7ff fe05 	bl	800e5dc <xTimerGenericCommand>
 800e9d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d14f      	bne.n	800ea7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	61bb      	str	r3, [r7, #24]
}
 800e9ec:	bf00      	nop
 800e9ee:	e7fe      	b.n	800e9ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f6:	f023 0301 	bic.w	r3, r3, #1
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea02:	e03a      	b.n	800ea7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea0a:	f043 0301 	orr.w	r3, r3, #1
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10a      	bne.n	800ea3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	617b      	str	r3, [r7, #20]
}
 800ea36:	bf00      	nop
 800ea38:	e7fe      	b.n	800ea38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	699a      	ldr	r2, [r3, #24]
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea40:	18d1      	adds	r1, r2, r3
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea48:	f7ff ff06 	bl	800e858 <prvInsertTimerInActiveList>
					break;
 800ea4c:	e015      	b.n	800ea7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea54:	f003 0302 	and.w	r3, r3, #2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d103      	bne.n	800ea64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5e:	f000 fbdf 	bl	800f220 <vPortFree>
 800ea62:	e00a      	b.n	800ea7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea6a:	f023 0301 	bic.w	r3, r3, #1
 800ea6e:	b2da      	uxtb	r2, r3
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea76:	e000      	b.n	800ea7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea7a:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <prvProcessReceivedCommands+0x1c0>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	1d39      	adds	r1, r7, #4
 800ea80:	2200      	movs	r2, #0
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fe fb1a 	bl	800d0bc <xQueueReceive>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f47f af2a 	bne.w	800e8e4 <prvProcessReceivedCommands+0x8>
	}
}
 800ea90:	bf00      	nop
 800ea92:	bf00      	nop
 800ea94:	3730      	adds	r7, #48	; 0x30
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20000d64 	.word	0x20000d64

0800eaa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaa6:	e048      	b.n	800eb3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaa8:	4b2d      	ldr	r3, [pc, #180]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eab2:	4b2b      	ldr	r3, [pc, #172]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3304      	adds	r3, #4
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fd ff8f 	bl	800c9e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ead4:	f003 0304 	and.w	r3, r3, #4
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d02e      	beq.n	800eb3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	693a      	ldr	r2, [r7, #16]
 800eae2:	4413      	add	r3, r2
 800eae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d90e      	bls.n	800eb0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eafa:	4b19      	ldr	r3, [pc, #100]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7fd ff34 	bl	800c972 <vListInsert>
 800eb0a:	e016      	b.n	800eb3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	2300      	movs	r3, #0
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	2100      	movs	r1, #0
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7ff fd60 	bl	800e5dc <xTimerGenericCommand>
 800eb1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10a      	bne.n	800eb3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	603b      	str	r3, [r7, #0]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb3a:	4b09      	ldr	r3, [pc, #36]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1b1      	bne.n	800eaa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb44:	4b06      	ldr	r3, [pc, #24]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb4a:	4b06      	ldr	r3, [pc, #24]	; (800eb64 <prvSwitchTimerLists+0xc4>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a04      	ldr	r2, [pc, #16]	; (800eb60 <prvSwitchTimerLists+0xc0>)
 800eb50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb52:	4a04      	ldr	r2, [pc, #16]	; (800eb64 <prvSwitchTimerLists+0xc4>)
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	6013      	str	r3, [r2, #0]
}
 800eb58:	bf00      	nop
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	20000d5c 	.word	0x20000d5c
 800eb64:	20000d60 	.word	0x20000d60

0800eb68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb6e:	f000 f969 	bl	800ee44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb72:	4b15      	ldr	r3, [pc, #84]	; (800ebc8 <prvCheckForValidListAndQueue+0x60>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d120      	bne.n	800ebbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb7a:	4814      	ldr	r0, [pc, #80]	; (800ebcc <prvCheckForValidListAndQueue+0x64>)
 800eb7c:	f7fd fea8 	bl	800c8d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb80:	4813      	ldr	r0, [pc, #76]	; (800ebd0 <prvCheckForValidListAndQueue+0x68>)
 800eb82:	f7fd fea5 	bl	800c8d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb86:	4b13      	ldr	r3, [pc, #76]	; (800ebd4 <prvCheckForValidListAndQueue+0x6c>)
 800eb88:	4a10      	ldr	r2, [pc, #64]	; (800ebcc <prvCheckForValidListAndQueue+0x64>)
 800eb8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb8c:	4b12      	ldr	r3, [pc, #72]	; (800ebd8 <prvCheckForValidListAndQueue+0x70>)
 800eb8e:	4a10      	ldr	r2, [pc, #64]	; (800ebd0 <prvCheckForValidListAndQueue+0x68>)
 800eb90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb92:	2300      	movs	r3, #0
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	4b11      	ldr	r3, [pc, #68]	; (800ebdc <prvCheckForValidListAndQueue+0x74>)
 800eb98:	4a11      	ldr	r2, [pc, #68]	; (800ebe0 <prvCheckForValidListAndQueue+0x78>)
 800eb9a:	2110      	movs	r1, #16
 800eb9c:	200a      	movs	r0, #10
 800eb9e:	f7fd ffb3 	bl	800cb08 <xQueueGenericCreateStatic>
 800eba2:	4603      	mov	r3, r0
 800eba4:	4a08      	ldr	r2, [pc, #32]	; (800ebc8 <prvCheckForValidListAndQueue+0x60>)
 800eba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eba8:	4b07      	ldr	r3, [pc, #28]	; (800ebc8 <prvCheckForValidListAndQueue+0x60>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebb0:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <prvCheckForValidListAndQueue+0x60>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	490b      	ldr	r1, [pc, #44]	; (800ebe4 <prvCheckForValidListAndQueue+0x7c>)
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fc94 	bl	800d4e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebbc:	f000 f972 	bl	800eea4 <vPortExitCritical>
}
 800ebc0:	bf00      	nop
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000d64 	.word	0x20000d64
 800ebcc:	20000d34 	.word	0x20000d34
 800ebd0:	20000d48 	.word	0x20000d48
 800ebd4:	20000d5c 	.word	0x20000d5c
 800ebd8:	20000d60 	.word	0x20000d60
 800ebdc:	20000e10 	.word	0x20000e10
 800ebe0:	20000d70 	.word	0x20000d70
 800ebe4:	0800f734 	.word	0x0800f734

0800ebe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3b04      	subs	r3, #4
 800ebf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3b04      	subs	r3, #4
 800ec06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f023 0201 	bic.w	r2, r3, #1
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	3b04      	subs	r3, #4
 800ec16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec18:	4a0c      	ldr	r2, [pc, #48]	; (800ec4c <pxPortInitialiseStack+0x64>)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3b14      	subs	r3, #20
 800ec22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3b04      	subs	r3, #4
 800ec2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f06f 0202 	mvn.w	r2, #2
 800ec36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	3b20      	subs	r3, #32
 800ec3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr
 800ec4c:	0800ec51 	.word	0x0800ec51

0800ec50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec5a:	4b12      	ldr	r3, [pc, #72]	; (800eca4 <prvTaskExitError+0x54>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d00a      	beq.n	800ec7a <prvTaskExitError+0x2a>
	__asm volatile
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	60fb      	str	r3, [r7, #12]
}
 800ec76:	bf00      	nop
 800ec78:	e7fe      	b.n	800ec78 <prvTaskExitError+0x28>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	60bb      	str	r3, [r7, #8]
}
 800ec8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec8e:	bf00      	nop
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d0fc      	beq.n	800ec90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec96:	bf00      	nop
 800ec98:	bf00      	nop
 800ec9a:	3714      	adds	r7, #20
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	2000000c 	.word	0x2000000c
	...

0800ecb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <pxCurrentTCBConst2>)
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	6808      	ldr	r0, [r1, #0]
 800ecb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecba:	f380 8809 	msr	PSP, r0
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f04f 0000 	mov.w	r0, #0
 800ecc6:	f380 8811 	msr	BASEPRI, r0
 800ecca:	4770      	bx	lr
 800eccc:	f3af 8000 	nop.w

0800ecd0 <pxCurrentTCBConst2>:
 800ecd0:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop

0800ecd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ecd8:	4808      	ldr	r0, [pc, #32]	; (800ecfc <prvPortStartFirstTask+0x24>)
 800ecda:	6800      	ldr	r0, [r0, #0]
 800ecdc:	6800      	ldr	r0, [r0, #0]
 800ecde:	f380 8808 	msr	MSP, r0
 800ece2:	f04f 0000 	mov.w	r0, #0
 800ece6:	f380 8814 	msr	CONTROL, r0
 800ecea:	b662      	cpsie	i
 800ecec:	b661      	cpsie	f
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	df00      	svc	0
 800ecf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecfa:	bf00      	nop
 800ecfc:	e000ed08 	.word	0xe000ed08

0800ed00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed06:	4b46      	ldr	r3, [pc, #280]	; (800ee20 <xPortStartScheduler+0x120>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a46      	ldr	r2, [pc, #280]	; (800ee24 <xPortStartScheduler+0x124>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d10a      	bne.n	800ed26 <xPortStartScheduler+0x26>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	613b      	str	r3, [r7, #16]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed26:	4b3e      	ldr	r3, [pc, #248]	; (800ee20 <xPortStartScheduler+0x120>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a3f      	ldr	r2, [pc, #252]	; (800ee28 <xPortStartScheduler+0x128>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d10a      	bne.n	800ed46 <xPortStartScheduler+0x46>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	60fb      	str	r3, [r7, #12]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed46:	4b39      	ldr	r3, [pc, #228]	; (800ee2c <xPortStartScheduler+0x12c>)
 800ed48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	22ff      	movs	r2, #255	; 0xff
 800ed56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed60:	78fb      	ldrb	r3, [r7, #3]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	4b31      	ldr	r3, [pc, #196]	; (800ee30 <xPortStartScheduler+0x130>)
 800ed6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed6e:	4b31      	ldr	r3, [pc, #196]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed70:	2207      	movs	r2, #7
 800ed72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed74:	e009      	b.n	800ed8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed76:	4b2f      	ldr	r3, [pc, #188]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	4a2d      	ldr	r2, [pc, #180]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed80:	78fb      	ldrb	r3, [r7, #3]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed92:	2b80      	cmp	r3, #128	; 0x80
 800ed94:	d0ef      	beq.n	800ed76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed96:	4b27      	ldr	r3, [pc, #156]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f1c3 0307 	rsb	r3, r3, #7
 800ed9e:	2b04      	cmp	r3, #4
 800eda0:	d00a      	beq.n	800edb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	60bb      	str	r3, [r7, #8]
}
 800edb4:	bf00      	nop
 800edb6:	e7fe      	b.n	800edb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edb8:	4b1e      	ldr	r3, [pc, #120]	; (800ee34 <xPortStartScheduler+0x134>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	4a1d      	ldr	r2, [pc, #116]	; (800ee34 <xPortStartScheduler+0x134>)
 800edc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800edc2:	4b1c      	ldr	r3, [pc, #112]	; (800ee34 <xPortStartScheduler+0x134>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edca:	4a1a      	ldr	r2, [pc, #104]	; (800ee34 <xPortStartScheduler+0x134>)
 800edcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800edd6:	4b18      	ldr	r3, [pc, #96]	; (800ee38 <xPortStartScheduler+0x138>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a17      	ldr	r2, [pc, #92]	; (800ee38 <xPortStartScheduler+0x138>)
 800eddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ede0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ede2:	4b15      	ldr	r3, [pc, #84]	; (800ee38 <xPortStartScheduler+0x138>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a14      	ldr	r2, [pc, #80]	; (800ee38 <xPortStartScheduler+0x138>)
 800ede8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edee:	f000 f8dd 	bl	800efac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edf2:	4b12      	ldr	r3, [pc, #72]	; (800ee3c <xPortStartScheduler+0x13c>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edf8:	f000 f8fc 	bl	800eff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edfc:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <xPortStartScheduler+0x140>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a0f      	ldr	r2, [pc, #60]	; (800ee40 <xPortStartScheduler+0x140>)
 800ee02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee08:	f7ff ff66 	bl	800ecd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee0c:	f7ff f846 	bl	800de9c <vTaskSwitchContext>
	prvTaskExitError();
 800ee10:	f7ff ff1e 	bl	800ec50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	e000ed00 	.word	0xe000ed00
 800ee24:	410fc271 	.word	0x410fc271
 800ee28:	410fc270 	.word	0x410fc270
 800ee2c:	e000e400 	.word	0xe000e400
 800ee30:	20000e60 	.word	0x20000e60
 800ee34:	20000e64 	.word	0x20000e64
 800ee38:	e000ed20 	.word	0xe000ed20
 800ee3c:	2000000c 	.word	0x2000000c
 800ee40:	e000ef34 	.word	0xe000ef34

0800ee44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
	__asm volatile
 800ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	607b      	str	r3, [r7, #4]
}
 800ee5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee5e:	4b0f      	ldr	r3, [pc, #60]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	4a0d      	ldr	r2, [pc, #52]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee68:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d10f      	bne.n	800ee90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee70:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <vPortEnterCritical+0x5c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00a      	beq.n	800ee90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	603b      	str	r3, [r7, #0]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <vPortEnterCritical+0x4a>
	}
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	2000000c 	.word	0x2000000c
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeaa:	4b12      	ldr	r3, [pc, #72]	; (800eef4 <vPortExitCritical+0x50>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <vPortExitCritical+0x24>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	607b      	str	r3, [r7, #4]
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eec8:	4b0a      	ldr	r3, [pc, #40]	; (800eef4 <vPortExitCritical+0x50>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3b01      	subs	r3, #1
 800eece:	4a09      	ldr	r2, [pc, #36]	; (800eef4 <vPortExitCritical+0x50>)
 800eed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eed2:	4b08      	ldr	r3, [pc, #32]	; (800eef4 <vPortExitCritical+0x50>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d105      	bne.n	800eee6 <vPortExitCritical+0x42>
 800eeda:	2300      	movs	r3, #0
 800eedc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	f383 8811 	msr	BASEPRI, r3
}
 800eee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	2000000c 	.word	0x2000000c
	...

0800ef00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef00:	f3ef 8009 	mrs	r0, PSP
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	4b15      	ldr	r3, [pc, #84]	; (800ef60 <pxCurrentTCBConst>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	f01e 0f10 	tst.w	lr, #16
 800ef10:	bf08      	it	eq
 800ef12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1a:	6010      	str	r0, [r2, #0]
 800ef1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef24:	f380 8811 	msr	BASEPRI, r0
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f7fe ffb4 	bl	800de9c <vTaskSwitchContext>
 800ef34:	f04f 0000 	mov.w	r0, #0
 800ef38:	f380 8811 	msr	BASEPRI, r0
 800ef3c:	bc09      	pop	{r0, r3}
 800ef3e:	6819      	ldr	r1, [r3, #0]
 800ef40:	6808      	ldr	r0, [r1, #0]
 800ef42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef46:	f01e 0f10 	tst.w	lr, #16
 800ef4a:	bf08      	it	eq
 800ef4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef50:	f380 8809 	msr	PSP, r0
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	f3af 8000 	nop.w

0800ef60 <pxCurrentTCBConst>:
 800ef60:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop

0800ef68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	607b      	str	r3, [r7, #4]
}
 800ef80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef82:	f7fe fed1 	bl	800dd28 <xTaskIncrementTick>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d003      	beq.n	800ef94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <xPortSysTickHandler+0x40>)
 800ef8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	2300      	movs	r3, #0
 800ef96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	f383 8811 	msr	BASEPRI, r3
}
 800ef9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	e000ed04 	.word	0xe000ed04

0800efac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efac:	b480      	push	{r7}
 800efae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efb0:	4b0b      	ldr	r3, [pc, #44]	; (800efe0 <vPortSetupTimerInterrupt+0x34>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efb6:	4b0b      	ldr	r3, [pc, #44]	; (800efe4 <vPortSetupTimerInterrupt+0x38>)
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efbc:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <vPortSetupTimerInterrupt+0x3c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a0a      	ldr	r2, [pc, #40]	; (800efec <vPortSetupTimerInterrupt+0x40>)
 800efc2:	fba2 2303 	umull	r2, r3, r2, r3
 800efc6:	099b      	lsrs	r3, r3, #6
 800efc8:	4a09      	ldr	r2, [pc, #36]	; (800eff0 <vPortSetupTimerInterrupt+0x44>)
 800efca:	3b01      	subs	r3, #1
 800efcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efce:	4b04      	ldr	r3, [pc, #16]	; (800efe0 <vPortSetupTimerInterrupt+0x34>)
 800efd0:	2207      	movs	r2, #7
 800efd2:	601a      	str	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	e000e010 	.word	0xe000e010
 800efe4:	e000e018 	.word	0xe000e018
 800efe8:	20000000 	.word	0x20000000
 800efec:	10624dd3 	.word	0x10624dd3
 800eff0:	e000e014 	.word	0xe000e014

0800eff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f004 <vPortEnableVFP+0x10>
 800eff8:	6801      	ldr	r1, [r0, #0]
 800effa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800effe:	6001      	str	r1, [r0, #0]
 800f000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f002:	bf00      	nop
 800f004:	e000ed88 	.word	0xe000ed88

0800f008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f00e:	f3ef 8305 	mrs	r3, IPSR
 800f012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b0f      	cmp	r3, #15
 800f018:	d914      	bls.n	800f044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f01a:	4a17      	ldr	r2, [pc, #92]	; (800f078 <vPortValidateInterruptPriority+0x70>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4413      	add	r3, r2
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f024:	4b15      	ldr	r3, [pc, #84]	; (800f07c <vPortValidateInterruptPriority+0x74>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	7afa      	ldrb	r2, [r7, #11]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d20a      	bcs.n	800f044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	607b      	str	r3, [r7, #4]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <vPortValidateInterruptPriority+0x78>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f04c:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <vPortValidateInterruptPriority+0x7c>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	429a      	cmp	r2, r3
 800f052:	d90a      	bls.n	800f06a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	603b      	str	r3, [r7, #0]
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <vPortValidateInterruptPriority+0x60>
	}
 800f06a:	bf00      	nop
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	e000e3f0 	.word	0xe000e3f0
 800f07c:	20000e60 	.word	0x20000e60
 800f080:	e000ed0c 	.word	0xe000ed0c
 800f084:	20000e64 	.word	0x20000e64

0800f088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f094:	f7fe fd8c 	bl	800dbb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f098:	4b5b      	ldr	r3, [pc, #364]	; (800f208 <pvPortMalloc+0x180>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0a0:	f000 f920 	bl	800f2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0a4:	4b59      	ldr	r3, [pc, #356]	; (800f20c <pvPortMalloc+0x184>)
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f040 8093 	bne.w	800f1d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01d      	beq.n	800f0f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0b8:	2208      	movs	r2, #8
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4413      	add	r3, r2
 800f0be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d014      	beq.n	800f0f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f023 0307 	bic.w	r3, r3, #7
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00a      	beq.n	800f0f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	617b      	str	r3, [r7, #20]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d06e      	beq.n	800f1d8 <pvPortMalloc+0x150>
 800f0fa:	4b45      	ldr	r3, [pc, #276]	; (800f210 <pvPortMalloc+0x188>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d869      	bhi.n	800f1d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f104:	4b43      	ldr	r3, [pc, #268]	; (800f214 <pvPortMalloc+0x18c>)
 800f106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f108:	4b42      	ldr	r3, [pc, #264]	; (800f214 <pvPortMalloc+0x18c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f10e:	e004      	b.n	800f11a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d903      	bls.n	800f12c <pvPortMalloc+0xa4>
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f1      	bne.n	800f110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f12c:	4b36      	ldr	r3, [pc, #216]	; (800f208 <pvPortMalloc+0x180>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f132:	429a      	cmp	r2, r3
 800f134:	d050      	beq.n	800f1d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2208      	movs	r2, #8
 800f13c:	4413      	add	r3, r2
 800f13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	6a3b      	ldr	r3, [r7, #32]
 800f146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	1ad2      	subs	r2, r2, r3
 800f150:	2308      	movs	r3, #8
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	429a      	cmp	r2, r3
 800f156:	d91f      	bls.n	800f198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00a      	beq.n	800f180 <pvPortMalloc+0xf8>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	613b      	str	r3, [r7, #16]
}
 800f17c:	bf00      	nop
 800f17e:	e7fe      	b.n	800f17e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	1ad2      	subs	r2, r2, r3
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f192:	69b8      	ldr	r0, [r7, #24]
 800f194:	f000 f908 	bl	800f3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f198:	4b1d      	ldr	r3, [pc, #116]	; (800f210 <pvPortMalloc+0x188>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	4a1b      	ldr	r2, [pc, #108]	; (800f210 <pvPortMalloc+0x188>)
 800f1a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1a6:	4b1a      	ldr	r3, [pc, #104]	; (800f210 <pvPortMalloc+0x188>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	4b1b      	ldr	r3, [pc, #108]	; (800f218 <pvPortMalloc+0x190>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d203      	bcs.n	800f1ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1b2:	4b17      	ldr	r3, [pc, #92]	; (800f210 <pvPortMalloc+0x188>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a18      	ldr	r2, [pc, #96]	; (800f218 <pvPortMalloc+0x190>)
 800f1b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	4b13      	ldr	r3, [pc, #76]	; (800f20c <pvPortMalloc+0x184>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1ce:	4b13      	ldr	r3, [pc, #76]	; (800f21c <pvPortMalloc+0x194>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	4a11      	ldr	r2, [pc, #68]	; (800f21c <pvPortMalloc+0x194>)
 800f1d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1d8:	f7fe fcf8 	bl	800dbcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	f003 0307 	and.w	r3, r3, #7
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00a      	beq.n	800f1fc <pvPortMalloc+0x174>
	__asm volatile
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	60fb      	str	r3, [r7, #12]
}
 800f1f8:	bf00      	nop
 800f1fa:	e7fe      	b.n	800f1fa <pvPortMalloc+0x172>
	return pvReturn;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3728      	adds	r7, #40	; 0x28
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20008e70 	.word	0x20008e70
 800f20c:	20008e84 	.word	0x20008e84
 800f210:	20008e74 	.word	0x20008e74
 800f214:	20008e68 	.word	0x20008e68
 800f218:	20008e78 	.word	0x20008e78
 800f21c:	20008e7c 	.word	0x20008e7c

0800f220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d04d      	beq.n	800f2ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f232:	2308      	movs	r3, #8
 800f234:	425b      	negs	r3, r3
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	4413      	add	r3, r2
 800f23a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	4b24      	ldr	r3, [pc, #144]	; (800f2d8 <vPortFree+0xb8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4013      	ands	r3, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <vPortFree+0x44>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	60fb      	str	r3, [r7, #12]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00a      	beq.n	800f282 <vPortFree+0x62>
	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	60bb      	str	r3, [r7, #8]
}
 800f27e:	bf00      	nop
 800f280:	e7fe      	b.n	800f280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	4b14      	ldr	r3, [pc, #80]	; (800f2d8 <vPortFree+0xb8>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4013      	ands	r3, r2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d01e      	beq.n	800f2ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d11a      	bne.n	800f2ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	4b0e      	ldr	r3, [pc, #56]	; (800f2d8 <vPortFree+0xb8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	401a      	ands	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2a8:	f7fe fc82 	bl	800dbb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <vPortFree+0xbc>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	4a09      	ldr	r2, [pc, #36]	; (800f2dc <vPortFree+0xbc>)
 800f2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f000 f874 	bl	800f3a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2c0:	4b07      	ldr	r3, [pc, #28]	; (800f2e0 <vPortFree+0xc0>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4a06      	ldr	r2, [pc, #24]	; (800f2e0 <vPortFree+0xc0>)
 800f2c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2ca:	f7fe fc7f 	bl	800dbcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2ce:	bf00      	nop
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20008e84 	.word	0x20008e84
 800f2dc:	20008e74 	.word	0x20008e74
 800f2e0:	20008e80 	.word	0x20008e80

0800f2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2f0:	4b27      	ldr	r3, [pc, #156]	; (800f390 <prvHeapInit+0xac>)
 800f2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f003 0307 	and.w	r3, r3, #7
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00c      	beq.n	800f318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3307      	adds	r3, #7
 800f302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f023 0307 	bic.w	r3, r3, #7
 800f30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	4a1f      	ldr	r2, [pc, #124]	; (800f390 <prvHeapInit+0xac>)
 800f314:	4413      	add	r3, r2
 800f316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f31c:	4a1d      	ldr	r2, [pc, #116]	; (800f394 <prvHeapInit+0xb0>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f322:	4b1c      	ldr	r3, [pc, #112]	; (800f394 <prvHeapInit+0xb0>)
 800f324:	2200      	movs	r2, #0
 800f326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	4413      	add	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f330:	2208      	movs	r2, #8
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	1a9b      	subs	r3, r3, r2
 800f336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f023 0307 	bic.w	r3, r3, #7
 800f33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	4a15      	ldr	r2, [pc, #84]	; (800f398 <prvHeapInit+0xb4>)
 800f344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f346:	4b14      	ldr	r3, [pc, #80]	; (800f398 <prvHeapInit+0xb4>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2200      	movs	r2, #0
 800f34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f34e:	4b12      	ldr	r3, [pc, #72]	; (800f398 <prvHeapInit+0xb4>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	1ad2      	subs	r2, r2, r3
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f364:	4b0c      	ldr	r3, [pc, #48]	; (800f398 <prvHeapInit+0xb4>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <prvHeapInit+0xb8>)
 800f372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <prvHeapInit+0xbc>)
 800f37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <prvHeapInit+0xc0>)
 800f37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f382:	601a      	str	r2, [r3, #0]
}
 800f384:	bf00      	nop
 800f386:	3714      	adds	r7, #20
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	20000e68 	.word	0x20000e68
 800f394:	20008e68 	.word	0x20008e68
 800f398:	20008e70 	.word	0x20008e70
 800f39c:	20008e78 	.word	0x20008e78
 800f3a0:	20008e74 	.word	0x20008e74
 800f3a4:	20008e84 	.word	0x20008e84

0800f3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3b0:	4b28      	ldr	r3, [pc, #160]	; (800f454 <prvInsertBlockIntoFreeList+0xac>)
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	e002      	b.n	800f3bc <prvInsertBlockIntoFreeList+0x14>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d8f7      	bhi.n	800f3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d108      	bne.n	800f3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	441a      	add	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	441a      	add	r2, r3
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d118      	bne.n	800f430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	4b15      	ldr	r3, [pc, #84]	; (800f458 <prvInsertBlockIntoFreeList+0xb0>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d00d      	beq.n	800f426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	441a      	add	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	e008      	b.n	800f438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f426:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <prvInsertBlockIntoFreeList+0xb0>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	e003      	b.n	800f438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d002      	beq.n	800f446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f446:	bf00      	nop
 800f448:	3714      	adds	r7, #20
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	20008e68 	.word	0x20008e68
 800f458:	20008e70 	.word	0x20008e70

0800f45c <__libc_init_array>:
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	4d0d      	ldr	r5, [pc, #52]	; (800f494 <__libc_init_array+0x38>)
 800f460:	4c0d      	ldr	r4, [pc, #52]	; (800f498 <__libc_init_array+0x3c>)
 800f462:	1b64      	subs	r4, r4, r5
 800f464:	10a4      	asrs	r4, r4, #2
 800f466:	2600      	movs	r6, #0
 800f468:	42a6      	cmp	r6, r4
 800f46a:	d109      	bne.n	800f480 <__libc_init_array+0x24>
 800f46c:	4d0b      	ldr	r5, [pc, #44]	; (800f49c <__libc_init_array+0x40>)
 800f46e:	4c0c      	ldr	r4, [pc, #48]	; (800f4a0 <__libc_init_array+0x44>)
 800f470:	f000 f8f6 	bl	800f660 <_init>
 800f474:	1b64      	subs	r4, r4, r5
 800f476:	10a4      	asrs	r4, r4, #2
 800f478:	2600      	movs	r6, #0
 800f47a:	42a6      	cmp	r6, r4
 800f47c:	d105      	bne.n	800f48a <__libc_init_array+0x2e>
 800f47e:	bd70      	pop	{r4, r5, r6, pc}
 800f480:	f855 3b04 	ldr.w	r3, [r5], #4
 800f484:	4798      	blx	r3
 800f486:	3601      	adds	r6, #1
 800f488:	e7ee      	b.n	800f468 <__libc_init_array+0xc>
 800f48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f48e:	4798      	blx	r3
 800f490:	3601      	adds	r6, #1
 800f492:	e7f2      	b.n	800f47a <__libc_init_array+0x1e>
 800f494:	0800f9bc 	.word	0x0800f9bc
 800f498:	0800f9bc 	.word	0x0800f9bc
 800f49c:	0800f9bc 	.word	0x0800f9bc
 800f4a0:	0800f9c0 	.word	0x0800f9c0

0800f4a4 <__retarget_lock_acquire_recursive>:
 800f4a4:	4770      	bx	lr

0800f4a6 <__retarget_lock_release_recursive>:
 800f4a6:	4770      	bx	lr

0800f4a8 <memcpy>:
 800f4a8:	440a      	add	r2, r1
 800f4aa:	4291      	cmp	r1, r2
 800f4ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4b0:	d100      	bne.n	800f4b4 <memcpy+0xc>
 800f4b2:	4770      	bx	lr
 800f4b4:	b510      	push	{r4, lr}
 800f4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4be:	4291      	cmp	r1, r2
 800f4c0:	d1f9      	bne.n	800f4b6 <memcpy+0xe>
 800f4c2:	bd10      	pop	{r4, pc}

0800f4c4 <memset>:
 800f4c4:	4402      	add	r2, r0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d100      	bne.n	800f4ce <memset+0xa>
 800f4cc:	4770      	bx	lr
 800f4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800f4d2:	e7f9      	b.n	800f4c8 <memset+0x4>

0800f4d4 <cleanup_glue>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	460c      	mov	r4, r1
 800f4d8:	6809      	ldr	r1, [r1, #0]
 800f4da:	4605      	mov	r5, r0
 800f4dc:	b109      	cbz	r1, 800f4e2 <cleanup_glue+0xe>
 800f4de:	f7ff fff9 	bl	800f4d4 <cleanup_glue>
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ea:	f000 b869 	b.w	800f5c0 <_free_r>
	...

0800f4f0 <_reclaim_reent>:
 800f4f0:	4b2c      	ldr	r3, [pc, #176]	; (800f5a4 <_reclaim_reent+0xb4>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4283      	cmp	r3, r0
 800f4f6:	b570      	push	{r4, r5, r6, lr}
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	d051      	beq.n	800f5a0 <_reclaim_reent+0xb0>
 800f4fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f4fe:	b143      	cbz	r3, 800f512 <_reclaim_reent+0x22>
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d14a      	bne.n	800f59c <_reclaim_reent+0xac>
 800f506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f508:	6819      	ldr	r1, [r3, #0]
 800f50a:	b111      	cbz	r1, 800f512 <_reclaim_reent+0x22>
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 f857 	bl	800f5c0 <_free_r>
 800f512:	6961      	ldr	r1, [r4, #20]
 800f514:	b111      	cbz	r1, 800f51c <_reclaim_reent+0x2c>
 800f516:	4620      	mov	r0, r4
 800f518:	f000 f852 	bl	800f5c0 <_free_r>
 800f51c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f51e:	b111      	cbz	r1, 800f526 <_reclaim_reent+0x36>
 800f520:	4620      	mov	r0, r4
 800f522:	f000 f84d 	bl	800f5c0 <_free_r>
 800f526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f528:	b111      	cbz	r1, 800f530 <_reclaim_reent+0x40>
 800f52a:	4620      	mov	r0, r4
 800f52c:	f000 f848 	bl	800f5c0 <_free_r>
 800f530:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f532:	b111      	cbz	r1, 800f53a <_reclaim_reent+0x4a>
 800f534:	4620      	mov	r0, r4
 800f536:	f000 f843 	bl	800f5c0 <_free_r>
 800f53a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f53c:	b111      	cbz	r1, 800f544 <_reclaim_reent+0x54>
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 f83e 	bl	800f5c0 <_free_r>
 800f544:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f546:	b111      	cbz	r1, 800f54e <_reclaim_reent+0x5e>
 800f548:	4620      	mov	r0, r4
 800f54a:	f000 f839 	bl	800f5c0 <_free_r>
 800f54e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f550:	b111      	cbz	r1, 800f558 <_reclaim_reent+0x68>
 800f552:	4620      	mov	r0, r4
 800f554:	f000 f834 	bl	800f5c0 <_free_r>
 800f558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f55a:	b111      	cbz	r1, 800f562 <_reclaim_reent+0x72>
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 f82f 	bl	800f5c0 <_free_r>
 800f562:	69a3      	ldr	r3, [r4, #24]
 800f564:	b1e3      	cbz	r3, 800f5a0 <_reclaim_reent+0xb0>
 800f566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f568:	4620      	mov	r0, r4
 800f56a:	4798      	blx	r3
 800f56c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f56e:	b1b9      	cbz	r1, 800f5a0 <_reclaim_reent+0xb0>
 800f570:	4620      	mov	r0, r4
 800f572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f576:	f7ff bfad 	b.w	800f4d4 <cleanup_glue>
 800f57a:	5949      	ldr	r1, [r1, r5]
 800f57c:	b941      	cbnz	r1, 800f590 <_reclaim_reent+0xa0>
 800f57e:	3504      	adds	r5, #4
 800f580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f582:	2d80      	cmp	r5, #128	; 0x80
 800f584:	68d9      	ldr	r1, [r3, #12]
 800f586:	d1f8      	bne.n	800f57a <_reclaim_reent+0x8a>
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 f819 	bl	800f5c0 <_free_r>
 800f58e:	e7ba      	b.n	800f506 <_reclaim_reent+0x16>
 800f590:	680e      	ldr	r6, [r1, #0]
 800f592:	4620      	mov	r0, r4
 800f594:	f000 f814 	bl	800f5c0 <_free_r>
 800f598:	4631      	mov	r1, r6
 800f59a:	e7ef      	b.n	800f57c <_reclaim_reent+0x8c>
 800f59c:	2500      	movs	r5, #0
 800f59e:	e7ef      	b.n	800f580 <_reclaim_reent+0x90>
 800f5a0:	bd70      	pop	{r4, r5, r6, pc}
 800f5a2:	bf00      	nop
 800f5a4:	20000010 	.word	0x20000010

0800f5a8 <__malloc_lock>:
 800f5a8:	4801      	ldr	r0, [pc, #4]	; (800f5b0 <__malloc_lock+0x8>)
 800f5aa:	f7ff bf7b 	b.w	800f4a4 <__retarget_lock_acquire_recursive>
 800f5ae:	bf00      	nop
 800f5b0:	2000a044 	.word	0x2000a044

0800f5b4 <__malloc_unlock>:
 800f5b4:	4801      	ldr	r0, [pc, #4]	; (800f5bc <__malloc_unlock+0x8>)
 800f5b6:	f7ff bf76 	b.w	800f4a6 <__retarget_lock_release_recursive>
 800f5ba:	bf00      	nop
 800f5bc:	2000a044 	.word	0x2000a044

0800f5c0 <_free_r>:
 800f5c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5c2:	2900      	cmp	r1, #0
 800f5c4:	d048      	beq.n	800f658 <_free_r+0x98>
 800f5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ca:	9001      	str	r0, [sp, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f1a1 0404 	sub.w	r4, r1, #4
 800f5d2:	bfb8      	it	lt
 800f5d4:	18e4      	addlt	r4, r4, r3
 800f5d6:	f7ff ffe7 	bl	800f5a8 <__malloc_lock>
 800f5da:	4a20      	ldr	r2, [pc, #128]	; (800f65c <_free_r+0x9c>)
 800f5dc:	9801      	ldr	r0, [sp, #4]
 800f5de:	6813      	ldr	r3, [r2, #0]
 800f5e0:	4615      	mov	r5, r2
 800f5e2:	b933      	cbnz	r3, 800f5f2 <_free_r+0x32>
 800f5e4:	6063      	str	r3, [r4, #4]
 800f5e6:	6014      	str	r4, [r2, #0]
 800f5e8:	b003      	add	sp, #12
 800f5ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5ee:	f7ff bfe1 	b.w	800f5b4 <__malloc_unlock>
 800f5f2:	42a3      	cmp	r3, r4
 800f5f4:	d90b      	bls.n	800f60e <_free_r+0x4e>
 800f5f6:	6821      	ldr	r1, [r4, #0]
 800f5f8:	1862      	adds	r2, r4, r1
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	bf04      	itt	eq
 800f5fe:	681a      	ldreq	r2, [r3, #0]
 800f600:	685b      	ldreq	r3, [r3, #4]
 800f602:	6063      	str	r3, [r4, #4]
 800f604:	bf04      	itt	eq
 800f606:	1852      	addeq	r2, r2, r1
 800f608:	6022      	streq	r2, [r4, #0]
 800f60a:	602c      	str	r4, [r5, #0]
 800f60c:	e7ec      	b.n	800f5e8 <_free_r+0x28>
 800f60e:	461a      	mov	r2, r3
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	b10b      	cbz	r3, 800f618 <_free_r+0x58>
 800f614:	42a3      	cmp	r3, r4
 800f616:	d9fa      	bls.n	800f60e <_free_r+0x4e>
 800f618:	6811      	ldr	r1, [r2, #0]
 800f61a:	1855      	adds	r5, r2, r1
 800f61c:	42a5      	cmp	r5, r4
 800f61e:	d10b      	bne.n	800f638 <_free_r+0x78>
 800f620:	6824      	ldr	r4, [r4, #0]
 800f622:	4421      	add	r1, r4
 800f624:	1854      	adds	r4, r2, r1
 800f626:	42a3      	cmp	r3, r4
 800f628:	6011      	str	r1, [r2, #0]
 800f62a:	d1dd      	bne.n	800f5e8 <_free_r+0x28>
 800f62c:	681c      	ldr	r4, [r3, #0]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	6053      	str	r3, [r2, #4]
 800f632:	4421      	add	r1, r4
 800f634:	6011      	str	r1, [r2, #0]
 800f636:	e7d7      	b.n	800f5e8 <_free_r+0x28>
 800f638:	d902      	bls.n	800f640 <_free_r+0x80>
 800f63a:	230c      	movs	r3, #12
 800f63c:	6003      	str	r3, [r0, #0]
 800f63e:	e7d3      	b.n	800f5e8 <_free_r+0x28>
 800f640:	6825      	ldr	r5, [r4, #0]
 800f642:	1961      	adds	r1, r4, r5
 800f644:	428b      	cmp	r3, r1
 800f646:	bf04      	itt	eq
 800f648:	6819      	ldreq	r1, [r3, #0]
 800f64a:	685b      	ldreq	r3, [r3, #4]
 800f64c:	6063      	str	r3, [r4, #4]
 800f64e:	bf04      	itt	eq
 800f650:	1949      	addeq	r1, r1, r5
 800f652:	6021      	streq	r1, [r4, #0]
 800f654:	6054      	str	r4, [r2, #4]
 800f656:	e7c7      	b.n	800f5e8 <_free_r+0x28>
 800f658:	b003      	add	sp, #12
 800f65a:	bd30      	pop	{r4, r5, pc}
 800f65c:	20008e88 	.word	0x20008e88

0800f660 <_init>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	bf00      	nop
 800f664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f666:	bc08      	pop	{r3}
 800f668:	469e      	mov	lr, r3
 800f66a:	4770      	bx	lr

0800f66c <_fini>:
 800f66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66e:	bf00      	nop
 800f670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f672:	bc08      	pop	{r3}
 800f674:	469e      	mov	lr, r3
 800f676:	4770      	bx	lr
