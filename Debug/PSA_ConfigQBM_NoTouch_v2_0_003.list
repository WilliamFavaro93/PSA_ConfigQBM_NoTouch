
PSA_ConfigQBM_NoTouch_v2_0_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de78  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800e038  0800e038  0001e038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6bc  0800e6bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6bc  0800e6bc  0001e6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6c4  0800e6c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6c4  0800e6c4  0001e6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6c8  0800e6c8  0001e6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800e6cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00003b30  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00002000  20003ba0  20003ba0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003992d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000640c  00000000  00000000  000599cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a30  00000000  00000000  0005fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027d0  00000000  00000000  00062810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000092cb  00000000  00000000  00064fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000365fa  00000000  00000000  0006e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00129030  00000000  00000000  000a48a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cd8d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b640  00000000  00000000  001cd928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e020 	.word	0x0800e020

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	0800e020 	.word	0x0800e020

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <fatman_init>:
 * @author William Favaro
 * @date 05/08/2022
 * @param ID The number that identifies the directory
 */
void fatman_init(uint8_t ID)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	/* If the file does not exist, create the directory */
	f_mkdir((TCHAR const*)fatman.Directory[ID].DirectoryName);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000518:	fb02 f303 	mul.w	r3, r2, r3
 800051c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000520:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <fatman_init+0x9c>)
 8000522:	4413      	add	r3, r2
 8000524:	3305      	adds	r3, #5
 8000526:	4618      	mov	r0, r3
 8000528:	f00d f89a 	bl	800d660 <f_mkdir>

	/* It creates the file */
	f_open(&fatman.OpenFIL, (TCHAR const*)fatman.Directory[ID].FilePath, FA_CREATE_ALWAYS|FA_WRITE);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800053a:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <fatman_init+0x9c>)
 800053c:	4413      	add	r3, r2
 800053e:	3307      	adds	r3, #7
 8000540:	220a      	movs	r2, #10
 8000542:	4619      	mov	r1, r3
 8000544:	4818      	ldr	r0, [pc, #96]	; (80005a8 <fatman_init+0xa0>)
 8000546:	f00c fae5 	bl	800cb14 <f_open>

	/* Save the file and close */
	memcpy(&fatman.Directory[ID].SaveFIL, &fatman.OpenFIL, sizeof(FIL));
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000558:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <fatman_init+0x9c>)
 800055a:	4413      	add	r3, r2
 800055c:	3304      	adds	r3, #4
 800055e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8000562:	4911      	ldr	r1, [pc, #68]	; (80005a8 <fatman_init+0xa0>)
 8000564:	4618      	mov	r0, r3
 8000566:	f00d fd35 	bl	800dfd4 <memcpy>

	f_close(&fatman.OpenFIL);
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <fatman_init+0xa0>)
 800056c:	f00d f84e 	bl	800d60c <f_close>
	/* Update Directory State */
	fatman.Directory[ID].FileIsCreated = 1;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <fatman_init+0x9c>)
 8000574:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000578:	fb01 f303 	mul.w	r3, r1, r3
 800057c:	4413      	add	r3, r2
 800057e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
	fatman.Directory[ID].AlreadyWrittenOnce = 0;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <fatman_init+0x9c>)
 800058a:	f44f 7119 	mov.w	r1, #612	; 0x264
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	4413      	add	r3, r2
 8000594:	f203 4395 	addw	r3, r3, #1173	; 0x495
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000054c 	.word	0x2000054c
 80005a8:	20000550 	.word	0x20000550

080005ac <fatman_write>:
 * @author William Favaro
 * @date 05/08/2022
 * @param ID The number that identifies the directory and the file
 */
void fatman_write(uint8_t ID)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	/* Write the text saved in fm.rwFileBuffer in the file targeted by fm.Directory[ID].FilePath */
	uint32_t byteswritten;
	memcpy(&fatman.OpenFIL, &fatman.Directory[ID].SaveFIL, sizeof(FIL));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f44f 7219 	mov.w	r2, #612	; 0x264
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <fatman_write+0xb0>)
 80005c6:	4413      	add	r3, r2
 80005c8:	3304      	adds	r3, #4
 80005ca:	f44f 720c 	mov.w	r2, #560	; 0x230
 80005ce:	4619      	mov	r1, r3
 80005d0:	4823      	ldr	r0, [pc, #140]	; (8000660 <fatman_write+0xb4>)
 80005d2:	f00d fcff 	bl	800dfd4 <memcpy>
	fatman.OpenFile_ID = ID;
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <fatman_write+0xb0>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	7053      	strb	r3, [r2, #1]
	f_write(&fatman.OpenFIL, (void *)&fatman.Buffer, fatman.Buffer_size, (void *)&byteswritten);
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <fatman_write+0xb0>)
 80005de:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 80005e2:	3314      	adds	r3, #20
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	491d      	ldr	r1, [pc, #116]	; (8000664 <fatman_write+0xb8>)
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <fatman_write+0xb4>)
 80005f0:	f00c fe19 	bl	800d226 <f_write>
	f_sync(&fatman.OpenFIL);
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <fatman_write+0xb4>)
 80005f6:	f00c ff8b 	bl	800d510 <f_sync>

	/* Save the FIL */
	memcpy(&fatman.Directory[ID].SaveFIL, &fatman.OpenFIL, sizeof(FIL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000600:	fb02 f303 	mul.w	r3, r2, r3
 8000604:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000608:	4a14      	ldr	r2, [pc, #80]	; (800065c <fatman_write+0xb0>)
 800060a:	4413      	add	r3, r2
 800060c:	3304      	adds	r3, #4
 800060e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8000612:	4913      	ldr	r1, [pc, #76]	; (8000660 <fatman_write+0xb4>)
 8000614:	4618      	mov	r0, r3
 8000616:	f00d fcdd 	bl	800dfd4 <memcpy>
	fatman.Directory[ID].AlreadyWrittenOnce = 1;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <fatman_write+0xb0>)
 800061e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000622:	fb01 f303 	mul.w	r3, r1, r3
 8000626:	4413      	add	r3, r2
 8000628:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]

	/* Clear fm.rwFileBuffer */
	fatman.Buffer_size = 0;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <fatman_write+0xb0>)
 8000632:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8000636:	3314      	adds	r3, #20
 8000638:	2200      	movs	r2, #0
 800063a:	801a      	strh	r2, [r3, #0]
	memset(&fatman.Buffer, 0, BUFFER_SIZE);
 800063c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000640:	2100      	movs	r1, #0
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <fatman_write+0xb8>)
 8000644:	f00d fcd4 	bl	800dff0 <memset>

	/* Close fm.OpenFIL */
	f_close(&fatman.OpenFIL);
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <fatman_write+0xb4>)
 800064a:	f00c ffdf 	bl	800d60c <f_close>
	fatman.OpenFile_ID = 0;
 800064e:	4b03      	ldr	r3, [pc, #12]	; (800065c <fatman_write+0xb0>)
 8000650:	2200      	movs	r2, #0
 8000652:	705a      	strb	r2, [r3, #1]
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000054c 	.word	0x2000054c
 8000660:	20000550 	.word	0x20000550
 8000664:	20001aa0 	.word	0x20001aa0

08000668 <fatman_read>:
 * @author William Favaro
 * @date 05/08/2022
 * @param ID The number that identifies the directory and the file
 */
void fatman_read()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
//	uint8_t status;
	uint32_t bytesread = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]

	/* It opens the file, if it exists, in read-only mode */
	f_open(&fatman.OpenFIL, (TCHAR const*)fatman.Directory[0].FilePath, FA_READ);
 8000672:	2201      	movs	r2, #1
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <fatman_read+0x64>)
 8000676:	4816      	ldr	r0, [pc, #88]	; (80006d0 <fatman_read+0x68>)
 8000678:	f00c fa4c 	bl	800cb14 <f_open>


	fatman.OpenFile_ID = N_DIRECTORY + 1;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <fatman_read+0x6c>)
 800067e:	2209      	movs	r2, #9
 8000680:	705a      	strb	r2, [r3, #1]

	/* Update Directory State */
	fatman.Directory[0].FileIsCreated = 1;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <fatman_read+0x6c>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
	fatman.Directory[0].AlreadyWrittenOnce = 0;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <fatman_read+0x6c>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

	f_read(&fatman.OpenFIL, &fatman.Buffer, BUFFER_SIZE, (void *)&bytesread);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000698:	490f      	ldr	r1, [pc, #60]	; (80006d8 <fatman_read+0x70>)
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <fatman_read+0x68>)
 800069c:	f00c fc84 	bl	800cfa8 <f_read>
	fatman.Buffer_size = bytesread;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <fatman_read+0x6c>)
 80006a6:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 80006aa:	3314      	adds	r3, #20
 80006ac:	801a      	strh	r2, [r3, #0]

	fatman.Directory[0].AlreadyWrittenOnce = 1;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <fatman_read+0x6c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

	/* Close fm.OpenFIL */
	f_close(&fatman.OpenFIL);
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <fatman_read+0x68>)
 80006b8:	f00c ffa8 	bl	800d60c <f_close>
	fatman.OpenFile_ID = 0;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <fatman_read+0x6c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	705a      	strb	r2, [r3, #1]
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000078b 	.word	0x2000078b
 80006d0:	20000550 	.word	0x20000550
 80006d4:	2000054c 	.word	0x2000054c
 80006d8:	20001aa0 	.word	0x20001aa0

080006dc <fm_test_NormalUse1>:
 * The purpose of this test is to see if it works normally
 * @author William Favaro
 * @date 05/08/2022
 */
void fm_test_NormalUse1()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	/* Fatman */
	memcpy(&fatman.Directory[1].DirectoryName, "TEST0", sizeof("FIGA"));
 80006e0:	2205      	movs	r2, #5
 80006e2:	490e      	ldr	r1, [pc, #56]	; (800071c <fm_test_NormalUse1+0x40>)
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <fm_test_NormalUse1+0x44>)
 80006e6:	f00d fc75 	bl	800dfd4 <memcpy>
	memcpy(&fatman.Directory[1].FilePath, "TEST0/TEST0.TXT", sizeof("TEST0/TEST0.TXT"));
 80006ea:	2210      	movs	r2, #16
 80006ec:	490d      	ldr	r1, [pc, #52]	; (8000724 <fm_test_NormalUse1+0x48>)
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <fm_test_NormalUse1+0x4c>)
 80006f0:	f00d fc70 	bl	800dfd4 <memcpy>
	fatman_init(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ff07 	bl	8000508 <fatman_init>
	memcpy(&fatman.Buffer, "Odio tutti\n", sizeof("Odio tutti\n"));
 80006fa:	220c      	movs	r2, #12
 80006fc:	490b      	ldr	r1, [pc, #44]	; (800072c <fm_test_NormalUse1+0x50>)
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <fm_test_NormalUse1+0x54>)
 8000700:	f00d fc68 	bl	800dfd4 <memcpy>
	fatman.Buffer_size = strlen("Odio tutti\n");
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <fm_test_NormalUse1+0x58>)
 8000706:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 800070a:	3314      	adds	r3, #20
 800070c:	220b      	movs	r2, #11
 800070e:	801a      	strh	r2, [r3, #0]
	fatman_write(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff ff4b 	bl	80005ac <fatman_write>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	0800e038 	.word	0x0800e038
 8000720:	200009e5 	.word	0x200009e5
 8000724:	0800e040 	.word	0x0800e040
 8000728:	200009ef 	.word	0x200009ef
 800072c:	0800e050 	.word	0x0800e050
 8000730:	20001aa0 	.word	0x20001aa0
 8000734:	2000054c 	.word	0x2000054c

08000738 <fm_test_NormalUse2>:
 * The purpose of this test is to see if it can adapt to the situation
 * @author William Favaro
 * @date 05/08/2022
 */
void fm_test_NormalUse2()
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
	uint8_t ID = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t NameDir[] = "TEST2";
 8000744:	4a65      	ldr	r2, [pc, #404]	; (80008dc <fm_test_NormalUse2+0x1a4>)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	3304      	adds	r3, #4
 8000752:	8019      	strh	r1, [r3, #0]
	uint8_t NameFile[] = "20220805";
 8000754:	4a62      	ldr	r2, [pc, #392]	; (80008e0 <fm_test_NormalUse2+0x1a8>)
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	ca07      	ldmia	r2, {r0, r1, r2}
 800075c:	c303      	stmia	r3!, {r0, r1}
 800075e:	701a      	strb	r2, [r3, #0]
	uint8_t wtext[] = "Funziona Bene!!\n";
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <fm_test_NormalUse2+0x1ac>)
 8000762:	463c      	mov	r4, r7
 8000764:	461d      	mov	r5, r3
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	682b      	ldr	r3, [r5, #0]
 800076c:	7023      	strb	r3, [r4, #0]
	/* fm.Directory[1].DirectoryName = "FILE" */
	memcpy(&fatman.Directory[ID].DirectoryName, &NameDir, sizeof(NameDir));
 800076e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000772:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800077e:	4a5a      	ldr	r2, [pc, #360]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 8000780:	4413      	add	r3, r2
 8000782:	3305      	adds	r3, #5
 8000784:	461a      	mov	r2, r3
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	6010      	str	r0, [r2, #0]
 800078e:	889b      	ldrh	r3, [r3, #4]
 8000790:	8093      	strh	r3, [r2, #4]
	/* fm.Directory[1].FilePath = "FILE/20220805_FILE" */
	memset((void *)fatman.Directory[ID].FilePath, 0, 30);
 8000792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000796:	f44f 7219 	mov.w	r2, #612	; 0x264
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007a2:	4a51      	ldr	r2, [pc, #324]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 80007a4:	4413      	add	r3, r2
 80007a6:	3307      	adds	r3, #7
 80007a8:	221e      	movs	r2, #30
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00d fc1f 	bl	800dff0 <memset>
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 80007b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b6:	f44f 7219 	mov.w	r2, #612	; 0x264
 80007ba:	fb02 f303 	mul.w	r3, r2, r3
 80007be:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007c2:	4a49      	ldr	r2, [pc, #292]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 80007c4:	4413      	add	r3, r2
 80007c6:	3307      	adds	r3, #7
 80007c8:	f107 0220 	add.w	r2, r7, #32
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00d fc16 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "/");
 80007d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d8:	f44f 7219 	mov.w	r2, #612	; 0x264
 80007dc:	fb02 f303 	mul.w	r3, r2, r3
 80007e0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80007e4:	4a40      	ldr	r2, [pc, #256]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 80007e6:	4413      	add	r3, r2
 80007e8:	1ddc      	adds	r4, r3, #7
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff fd08 	bl	8000200 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4423      	add	r3, r4
 80007f4:	493d      	ldr	r1, [pc, #244]	; (80008ec <fm_test_NormalUse2+0x1b4>)
 80007f6:	461a      	mov	r2, r3
 80007f8:	460b      	mov	r3, r1
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameFile);
 80007fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000802:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800080e:	4a36      	ldr	r2, [pc, #216]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 8000810:	4413      	add	r3, r2
 8000812:	3307      	adds	r3, #7
 8000814:	f107 0214 	add.w	r2, r7, #20
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f00d fbf0 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_");
 8000820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000824:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000830:	4a2d      	ldr	r2, [pc, #180]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 8000832:	4413      	add	r3, r2
 8000834:	1ddc      	adds	r4, r3, #7
 8000836:	4620      	mov	r0, r4
 8000838:	f7ff fce2 	bl	8000200 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	4423      	add	r3, r4
 8000840:	492b      	ldr	r1, [pc, #172]	; (80008f0 <fm_test_NormalUse2+0x1b8>)
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 800084a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084e:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 800085c:	4413      	add	r3, r2
 800085e:	3307      	adds	r3, #7
 8000860:	f107 0220 	add.w	r2, r7, #32
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f00d fbca 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, ".TXT");
 800086c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000870:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000874:	fb02 f303 	mul.w	r3, r2, r3
 8000878:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800087c:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 800087e:	4413      	add	r3, r2
 8000880:	1ddc      	adds	r4, r3, #7
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fcbc 	bl	8000200 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	4423      	add	r3, r4
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <fm_test_NormalUse2+0x1bc>)
 800088e:	6810      	ldr	r0, [r2, #0]
 8000890:	6018      	str	r0, [r3, #0]
 8000892:	7912      	ldrb	r2, [r2, #4]
 8000894:	711a      	strb	r2, [r3, #4]
	/* Fatman */
	fatman_init(ID);
 8000896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe34 	bl	8000508 <fatman_init>
	memcpy(&fatman.Buffer, wtext, strlen((char const*)wtext));
 80008a0:	463b      	mov	r3, r7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fcac 	bl	8000200 <strlen>
 80008a8:	4602      	mov	r2, r0
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <fm_test_NormalUse2+0x1c0>)
 80008b0:	f00d fb90 	bl	800dfd4 <memcpy>
	fatman.Buffer_size = strlen((char const*)wtext);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fca2 	bl	8000200 <strlen>
 80008bc:	4603      	mov	r3, r0
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <fm_test_NormalUse2+0x1b0>)
 80008c2:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 80008c6:	3314      	adds	r3, #20
 80008c8:	801a      	strh	r2, [r3, #0]
	fatman_write(ID);
 80008ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe6c 	bl	80005ac <fatman_write>
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bdb0      	pop	{r4, r5, r7, pc}
 80008dc:	0800e06c 	.word	0x0800e06c
 80008e0:	0800e074 	.word	0x0800e074
 80008e4:	0800e080 	.word	0x0800e080
 80008e8:	2000054c 	.word	0x2000054c
 80008ec:	0800e05c 	.word	0x0800e05c
 80008f0:	0800e060 	.word	0x0800e060
 80008f4:	0800e064 	.word	0x0800e064
 80008f8:	20001aa0 	.word	0x20001aa0

080008fc <fm_test_WHITheFilePathChanges>:
 * The purpose of this test is testing what happen when I create a new file in the same directory
 * @author William Favaro
 * @date 05/08/2022
 */
void fm_test_WHITheFilePathChanges()
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b09b      	sub	sp, #108	; 0x6c
 8000900:	af00      	add	r7, sp, #0
	uint8_t ID = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t NameDir[] = "TEST2";
 8000908:	4a65      	ldr	r2, [pc, #404]	; (8000aa0 <fm_test_WHITheFilePathChanges+0x1a4>)
 800090a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800090e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000912:	6018      	str	r0, [r3, #0]
 8000914:	3304      	adds	r3, #4
 8000916:	8019      	strh	r1, [r3, #0]
	uint8_t NameFile[] = "20220804";
 8000918:	4a62      	ldr	r2, [pc, #392]	; (8000aa4 <fm_test_WHITheFilePathChanges+0x1a8>)
 800091a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000920:	c303      	stmia	r3!, {r0, r1}
 8000922:	701a      	strb	r2, [r3, #0]
	uint8_t wtext[] = "Funziona Bene se all'interno della cartella c'è anche il file 20220805_TEST1\n";
 8000924:	4a60      	ldr	r2, [pc, #384]	; (8000aa8 <fm_test_WHITheFilePathChanges+0x1ac>)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4611      	mov	r1, r2
 800092a:	224f      	movs	r2, #79	; 0x4f
 800092c:	4618      	mov	r0, r3
 800092e:	f00d fb51 	bl	800dfd4 <memcpy>
	/* fm.Directory[1].DirectoryName = "FILE" */
	memcpy(&fatman.Directory[ID].DirectoryName, &NameDir, sizeof(NameDir));
 8000932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000936:	f44f 7219 	mov.w	r2, #612	; 0x264
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000942:	4a5a      	ldr	r2, [pc, #360]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000944:	4413      	add	r3, r2
 8000946:	3305      	adds	r3, #5
 8000948:	461a      	mov	r2, r3
 800094a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	6010      	str	r0, [r2, #0]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	8093      	strh	r3, [r2, #4]
	/* fm.Directory[1].FilePath = "FILE/20220805_FILE" */
	memset((void *)fatman.Directory[ID].FilePath, 0, 30);
 8000956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800095a:	f44f 7219 	mov.w	r2, #612	; 0x264
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000966:	4a51      	ldr	r2, [pc, #324]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000968:	4413      	add	r3, r2
 800096a:	3307      	adds	r3, #7
 800096c:	221e      	movs	r2, #30
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f00d fb3d 	bl	800dff0 <memset>
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000976:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800097a:	f44f 7219 	mov.w	r2, #612	; 0x264
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000986:	4a49      	ldr	r2, [pc, #292]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000988:	4413      	add	r3, r2
 800098a:	3307      	adds	r3, #7
 800098c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f00d fb34 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "/");
 8000998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800099c:	f44f 7219 	mov.w	r2, #612	; 0x264
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009a8:	4a40      	ldr	r2, [pc, #256]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 80009aa:	4413      	add	r3, r2
 80009ac:	1ddc      	adds	r4, r3, #7
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff fc26 	bl	8000200 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4423      	add	r3, r4
 80009b8:	493d      	ldr	r1, [pc, #244]	; (8000ab0 <fm_test_WHITheFilePathChanges+0x1b4>)
 80009ba:	461a      	mov	r2, r3
 80009bc:	460b      	mov	r3, r1
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameFile);
 80009c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009c6:	f44f 7219 	mov.w	r2, #612	; 0x264
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009d2:	4a36      	ldr	r2, [pc, #216]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 80009d4:	4413      	add	r3, r2
 80009d6:	3307      	adds	r3, #7
 80009d8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f00d fb0e 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_");
 80009e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009e8:	f44f 7219 	mov.w	r2, #612	; 0x264
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80009f4:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 80009f6:	4413      	add	r3, r2
 80009f8:	1ddc      	adds	r4, r3, #7
 80009fa:	4620      	mov	r0, r4
 80009fc:	f7ff fc00 	bl	8000200 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4423      	add	r3, r4
 8000a04:	492b      	ldr	r1, [pc, #172]	; (8000ab4 <fm_test_WHITheFilePathChanges+0x1b8>)
 8000a06:	461a      	mov	r2, r3
 8000a08:	460b      	mov	r3, r1
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000a0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a12:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000a20:	4413      	add	r3, r2
 8000a22:	3307      	adds	r3, #7
 8000a24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00d fae8 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, ".TXT");
 8000a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a34:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000a38:	fb02 f303 	mul.w	r3, r2, r3
 8000a3c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a40:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000a42:	4413      	add	r3, r2
 8000a44:	1ddc      	adds	r4, r3, #7
 8000a46:	4620      	mov	r0, r4
 8000a48:	f7ff fbda 	bl	8000200 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4423      	add	r3, r4
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <fm_test_WHITheFilePathChanges+0x1bc>)
 8000a52:	6810      	ldr	r0, [r2, #0]
 8000a54:	6018      	str	r0, [r3, #0]
 8000a56:	7912      	ldrb	r2, [r2, #4]
 8000a58:	711a      	strb	r2, [r3, #4]
	/* Fatman */
	fatman_init(ID);
 8000a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fd52 	bl	8000508 <fatman_init>
	memcpy(&fatman.Buffer, wtext, strlen((char const*)wtext));
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbca 	bl	8000200 <strlen>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <fm_test_WHITheFilePathChanges+0x1c0>)
 8000a74:	f00d faae 	bl	800dfd4 <memcpy>
	fatman.Buffer_size = strlen((char const*)wtext);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbc0 	bl	8000200 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <fm_test_WHITheFilePathChanges+0x1b0>)
 8000a86:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	801a      	strh	r2, [r3, #0]
	fatman_write(ID);
 8000a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fd8a 	bl	80005ac <fatman_write>
}
 8000a98:	bf00      	nop
 8000a9a:	376c      	adds	r7, #108	; 0x6c
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	0800e06c 	.word	0x0800e06c
 8000aa4:	0800e094 	.word	0x0800e094
 8000aa8:	0800e0a0 	.word	0x0800e0a0
 8000aac:	2000054c 	.word	0x2000054c
 8000ab0:	0800e05c 	.word	0x0800e05c
 8000ab4:	0800e060 	.word	0x0800e060
 8000ab8:	0800e064 	.word	0x0800e064
 8000abc:	20001aa0 	.word	0x20001aa0

08000ac0 <fm_test_WHIitsWritedSeveralConsecutiveTimes>:
 * The purpose of this test is testing what happen when I write more times in the same file
 * @author William Favaro
 * @date 05/08/2022
 */
void fm_test_WHIitsWritedSeveralConsecutiveTimes()
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b08b      	sub	sp, #44	; 0x2c
 8000ac4:	af00      	add	r7, sp, #0
	uint8_t ID = 3;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t NameDir[] = "TEST3";
 8000acc:	4a6e      	ldr	r2, [pc, #440]	; (8000c88 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1c8>)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	6018      	str	r0, [r3, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	8019      	strh	r1, [r3, #0]
	uint8_t NameFile[] = "20220805";
 8000adc:	4a6b      	ldr	r2, [pc, #428]	; (8000c8c <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1cc>)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae4:	c303      	stmia	r3!, {r0, r1}
 8000ae6:	701a      	strb	r2, [r3, #0]
	uint8_t wtext[] = "Diobello\n";
 8000ae8:	4a69      	ldr	r2, [pc, #420]	; (8000c90 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d0>)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aee:	c303      	stmia	r3!, {r0, r1}
 8000af0:	801a      	strh	r2, [r3, #0]
	uint8_t nTimes = 10;
 8000af2:	230a      	movs	r3, #10
 8000af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* fm.Directory[1].DirectoryName = "FILE" */
	memcpy(&fatman.Directory[ID].DirectoryName, &NameDir, sizeof(NameDir));
 8000af8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000afc:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000b08:	4a62      	ldr	r2, [pc, #392]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3305      	adds	r3, #5
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	6010      	str	r0, [r2, #0]
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	8093      	strh	r3, [r2, #4]
	/* fm.Directory[1].FilePath = "FILE/20220805_FILE" */
	memset((void *)fatman.Directory[ID].FilePath, 0, 30);
 8000b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b20:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b2c:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000b2e:	4413      	add	r3, r2
 8000b30:	3307      	adds	r3, #7
 8000b32:	221e      	movs	r2, #30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00d fa5a 	bl	800dff0 <memset>
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b40:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b4c:	4a51      	ldr	r2, [pc, #324]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	3307      	adds	r3, #7
 8000b52:	f107 021c 	add.w	r2, r7, #28
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00d fa51 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "/");
 8000b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b62:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b6e:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000b70:	4413      	add	r3, r2
 8000b72:	1ddc      	adds	r4, r3, #7
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff fb43 	bl	8000200 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4423      	add	r3, r4
 8000b7e:	4946      	ldr	r1, [pc, #280]	; (8000c98 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d8>)
 8000b80:	461a      	mov	r2, r3
 8000b82:	460b      	mov	r3, r1
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameFile);
 8000b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b8c:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000b98:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000b9a:	4413      	add	r3, r2
 8000b9c:	3307      	adds	r3, #7
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00d fa2b 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_");
 8000baa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bae:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	1ddc      	adds	r4, r3, #7
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fb1d 	bl	8000200 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4423      	add	r3, r4
 8000bca:	4934      	ldr	r1, [pc, #208]	; (8000c9c <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1dc>)
 8000bcc:	461a      	mov	r2, r3
 8000bce:	460b      	mov	r3, r1
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bd8:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000be6:	4413      	add	r3, r2
 8000be8:	3307      	adds	r3, #7
 8000bea:	f107 021c 	add.w	r2, r7, #28
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f00d fa05 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, ".TXT");
 8000bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bfa:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	1ddc      	adds	r4, r3, #7
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f7ff faf7 	bl	8000200 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4423      	add	r3, r4
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1e0>)
 8000c18:	6810      	ldr	r0, [r2, #0]
 8000c1a:	6018      	str	r0, [r3, #0]
 8000c1c:	7912      	ldrb	r2, [r2, #4]
 8000c1e:	711a      	strb	r2, [r3, #4]

	/* Fatman */
	fatman_init(ID);
 8000c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc6f 	bl	8000508 <fatman_init>
	for(uint8_t i = 0; i < nTimes; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c30:	e01e      	b.n	8000c70 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1b0>
	{
		memcpy(&fatman.Buffer, wtext, strlen((char const*)wtext));
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fae3 	bl	8000200 <strlen>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1e4>)
 8000c42:	f00d f9c7 	bl	800dfd4 <memcpy>
		fatman.Buffer_size = strlen((char const*)wtext);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fad9 	bl	8000200 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x1d4>)
 8000c54:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8000c58:	3314      	adds	r3, #20
 8000c5a:	801a      	strh	r2, [r3, #0]
		fatman_write(ID);
 8000c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fca3 	bl	80005ac <fatman_write>
	for(uint8_t i = 0; i < nTimes; i++)
 8000c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3da      	bcc.n	8000c32 <fm_test_WHIitsWritedSeveralConsecutiveTimes+0x172>
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	372c      	adds	r7, #44	; 0x2c
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	bf00      	nop
 8000c88:	0800e0f0 	.word	0x0800e0f0
 8000c8c:	0800e074 	.word	0x0800e074
 8000c90:	0800e0f8 	.word	0x0800e0f8
 8000c94:	2000054c 	.word	0x2000054c
 8000c98:	0800e05c 	.word	0x0800e05c
 8000c9c:	0800e060 	.word	0x0800e060
 8000ca0:	0800e064 	.word	0x0800e064
 8000ca4:	20001aa0 	.word	0x20001aa0

08000ca8 <fm_test_WHItheBufferIsTooBig>:
 * The purpose of this test is to simulate what could happen if I read a file too big for the buffer to before writing
 * @author William Favaro
 * @date 05/08/2022
 */
void fm_test_WHItheBufferIsTooBig()
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
	uint8_t ID = 6;
 8000cae:	2306      	movs	r3, #6
 8000cb0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t NameDir[] = "TEST6";
 8000cb4:	4a95      	ldr	r2, [pc, #596]	; (8000f0c <fm_test_WHItheBufferIsTooBig+0x264>)
 8000cb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cbe:	6018      	str	r0, [r3, #0]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	8019      	strh	r1, [r3, #0]
	uint8_t NameFile[] = "20220830";
 8000cc4:	4a92      	ldr	r2, [pc, #584]	; (8000f10 <fm_test_WHItheBufferIsTooBig+0x268>)
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ccc:	c303      	stmia	r3!, {r0, r1}
 8000cce:	701a      	strb	r2, [r3, #0]
	uint8_t wtext[] = "tanti auguri e buon compleanno!\n";
 8000cd0:	4b90      	ldr	r3, [pc, #576]	; (8000f14 <fm_test_WHItheBufferIsTooBig+0x26c>)
 8000cd2:	1d3c      	adds	r4, r7, #4
 8000cd4:	461d      	mov	r5, r3
 8000cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	7023      	strb	r3, [r4, #0]

	/* fm.Directory[1].DirectoryName = "FILE" */
	memcpy(&fatman.Directory[ID].DirectoryName, &NameDir, sizeof(NameDir));
 8000ce2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ce6:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000cf2:	4a89      	ldr	r2, [pc, #548]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	3305      	adds	r3, #5
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	6010      	str	r0, [r2, #0]
 8000d02:	889b      	ldrh	r3, [r3, #4]
 8000d04:	8093      	strh	r3, [r2, #4]
	/* fm.Directory[1].FilePath = "FILE/20220829_FILE" */
	memset((void *)fatman.Directory[ID].FilePath, 0, 30);
 8000d06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d0a:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d0e:	fb02 f303 	mul.w	r3, r2, r3
 8000d12:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000d16:	4a80      	ldr	r2, [pc, #512]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	221e      	movs	r2, #30
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00d f965 	bl	800dff0 <memset>
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000d26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d2a:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000d36:	4a78      	ldr	r2, [pc, #480]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3307      	adds	r3, #7
 8000d3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00d f95c 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "/");
 8000d48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d4c:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000d58:	4a6f      	ldr	r2, [pc, #444]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	1ddc      	adds	r4, r3, #7
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f7ff fa4e 	bl	8000200 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4423      	add	r3, r4
 8000d68:	496c      	ldr	r1, [pc, #432]	; (8000f1c <fm_test_WHItheBufferIsTooBig+0x274>)
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameFile);
 8000d72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d76:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000d82:	4a65      	ldr	r2, [pc, #404]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000d84:	4413      	add	r3, r2
 8000d86:	3307      	adds	r3, #7
 8000d88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00d f936 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_");
 8000d94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d98:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000da4:	4a5c      	ldr	r2, [pc, #368]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000da6:	4413      	add	r3, r2
 8000da8:	1ddc      	adds	r4, r3, #7
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff fa28 	bl	8000200 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4423      	add	r3, r4
 8000db4:	495a      	ldr	r1, [pc, #360]	; (8000f20 <fm_test_WHItheBufferIsTooBig+0x278>)
 8000db6:	461a      	mov	r2, r3
 8000db8:	460b      	mov	r3, r1
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000dbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dc2:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000dc6:	fb02 f303 	mul.w	r3, r2, r3
 8000dca:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000dce:	4a52      	ldr	r2, [pc, #328]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3307      	adds	r3, #7
 8000dd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00d f910 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_01");
 8000de0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000de4:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000df0:	4a49      	ldr	r2, [pc, #292]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000df2:	4413      	add	r3, r2
 8000df4:	1ddc      	adds	r4, r3, #7
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fa02 	bl	8000200 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4423      	add	r3, r4
 8000e00:	4a48      	ldr	r2, [pc, #288]	; (8000f24 <fm_test_WHItheBufferIsTooBig+0x27c>)
 8000e02:	6810      	ldr	r0, [r2, #0]
 8000e04:	6018      	str	r0, [r3, #0]
	strcat((char *)fatman.Directory[ID].FilePath, ".TXT");
 8000e06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e0a:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000e16:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	1ddc      	adds	r4, r3, #7
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff f9ef 	bl	8000200 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4423      	add	r3, r4
 8000e26:	4a40      	ldr	r2, [pc, #256]	; (8000f28 <fm_test_WHItheBufferIsTooBig+0x280>)
 8000e28:	6810      	ldr	r0, [r2, #0]
 8000e2a:	6018      	str	r0, [r3, #0]
 8000e2c:	7912      	ldrb	r2, [r2, #4]
 8000e2e:	711a      	strb	r2, [r3, #4]

	/* create the file to test */
	uint16_t bw = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
	fatman_init(ID);
 8000e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb65 	bl	8000508 <fatman_init>

	for(uint16_t i = 0; i < 300; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000e42:	e057      	b.n	8000ef4 <fm_test_WHItheBufferIsTooBig+0x24c>
	{
		/* Fill the buffer*/
		memcpy(&fatman.Buffer, wtext, strlen((char const*)wtext));
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff f9da 	bl	8000200 <strlen>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4836      	ldr	r0, [pc, #216]	; (8000f2c <fm_test_WHItheBufferIsTooBig+0x284>)
 8000e54:	f00d f8be 	bl	800dfd4 <memcpy>
		fatman.Buffer_size = strlen((char const*)wtext);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff f9d0 	bl	8000200 <strlen>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000e66:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	801a      	strh	r2, [r3, #0]

		/* Change name of the file if it's becoming to big  */
		if((fatman.Directory[ID].SaveFIL.fptr + fatman.Buffer_size) > BUFFER_SIZE)
 8000e6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e72:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000e74:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000e86:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8000e8a:	3314      	adds	r3, #20
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e94:	d91d      	bls.n	8000ed2 <fm_test_WHItheBufferIsTooBig+0x22a>
		{
			fatman.Directory[ID].FilePath[22] += 1;
 8000e96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000e9c:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f203 2355 	addw	r3, r3, #597	; 0x255
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eb0:	3201      	adds	r2, #1
 8000eb2:	b2d0      	uxtb	r0, r2
 8000eb4:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000eb6:	f44f 7119 	mov.w	r1, #612	; 0x264
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f203 2355 	addw	r3, r3, #597	; 0x255
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	701a      	strb	r2, [r3, #0]
			fatman_init(ID);
 8000ec8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb1b 	bl	8000508 <fatman_init>
		}

		/*  */
		fatman_write(ID);
 8000ed2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb68 	bl	80005ac <fatman_write>

		/* Just for help in debugging */
		bw += strlen((char const*)wtext);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f98e 	bl	8000200 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000eea:	4413      	add	r3, r2
 8000eec:	87fb      	strh	r3, [r7, #62]	; 0x3e
	for(uint16_t i = 0; i < 300; i++)
 8000eee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8000ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ef6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000efa:	d3a3      	bcc.n	8000e44 <fm_test_WHItheBufferIsTooBig+0x19c>
	}

	fatman.State = bw;
 8000efc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <fm_test_WHItheBufferIsTooBig+0x270>)
 8000f02:	701a      	strb	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3740      	adds	r7, #64	; 0x40
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0c:	0800e15c 	.word	0x0800e15c
 8000f10:	0800e164 	.word	0x0800e164
 8000f14:	0800e134 	.word	0x0800e134
 8000f18:	2000054c 	.word	0x2000054c
 8000f1c:	0800e05c 	.word	0x0800e05c
 8000f20:	0800e060 	.word	0x0800e060
 8000f24:	0800e158 	.word	0x0800e158
 8000f28:	0800e064 	.word	0x0800e064
 8000f2c:	20001aa0 	.word	0x20001aa0

08000f30 <fm_test_read>:

void fm_test_read()
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
	uint8_t ID = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
	uint8_t NameDir[] = "TEST1";
 8000f3a:	4a55      	ldr	r2, [pc, #340]	; (8001090 <fm_test_read+0x160>)
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f44:	6018      	str	r0, [r3, #0]
 8000f46:	3304      	adds	r3, #4
 8000f48:	8019      	strh	r1, [r3, #0]
	uint8_t NameFile[] = "20220901";
 8000f4a:	4a52      	ldr	r2, [pc, #328]	; (8001094 <fm_test_read+0x164>)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f50:	c303      	stmia	r3!, {r0, r1}
 8000f52:	701a      	strb	r2, [r3, #0]

	/* fm.Directory[1].DirectoryName = "FILE" */
	memcpy(&fatman.Directory[ID].DirectoryName, &NameDir, sizeof(NameDir));
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f62:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <fm_test_read+0x168>)
 8000f64:	4413      	add	r3, r2
 8000f66:	3305      	adds	r3, #5
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	6010      	str	r0, [r2, #0]
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	8093      	strh	r3, [r2, #4]
	/* fm.Directory[1].FilePath = "FILE/20220829_FILE" */
	memset((void *)fatman.Directory[ID].FilePath, 0, 30);
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000f84:	4a44      	ldr	r2, [pc, #272]	; (8001098 <fm_test_read+0x168>)
 8000f86:	4413      	add	r3, r2
 8000f88:	3307      	adds	r3, #7
 8000f8a:	221e      	movs	r2, #30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00d f82e 	bl	800dff0 <memset>
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000fa2:	4a3d      	ldr	r2, [pc, #244]	; (8001098 <fm_test_read+0x168>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00d f826 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "/");
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000fc2:	4a35      	ldr	r2, [pc, #212]	; (8001098 <fm_test_read+0x168>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	1ddc      	adds	r4, r3, #7
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f7ff f919 	bl	8000200 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4423      	add	r3, r4
 8000fd2:	4932      	ldr	r1, [pc, #200]	; (800109c <fm_test_read+0x16c>)
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameFile);
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	f44f 7219 	mov.w	r2, #612	; 0x264
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000fea:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <fm_test_read+0x168>)
 8000fec:	4413      	add	r3, r2
 8000fee:	3307      	adds	r3, #7
 8000ff0:	1d3a      	adds	r2, r7, #4
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00d f803 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, "_");
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	f44f 7219 	mov.w	r2, #612	; 0x264
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001008:	4a23      	ldr	r2, [pc, #140]	; (8001098 <fm_test_read+0x168>)
 800100a:	4413      	add	r3, r2
 800100c:	1ddc      	adds	r4, r3, #7
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff f8f6 	bl	8000200 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	4423      	add	r3, r4
 8001018:	4921      	ldr	r1, [pc, #132]	; (80010a0 <fm_test_read+0x170>)
 800101a:	461a      	mov	r2, r3
 800101c:	460b      	mov	r3, r1
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	8013      	strh	r3, [r2, #0]
	strcat((char *)fatman.Directory[ID].FilePath, (char const*)NameDir);
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	f44f 7219 	mov.w	r2, #612	; 0x264
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <fm_test_read+0x168>)
 8001032:	4413      	add	r3, r2
 8001034:	3307      	adds	r3, #7
 8001036:	f107 0210 	add.w	r2, r7, #16
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f00c ffdf 	bl	800e000 <strcat>
	strcat((char *)fatman.Directory[ID].FilePath, ".TXT");
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	f44f 7219 	mov.w	r2, #612	; 0x264
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <fm_test_read+0x168>)
 8001052:	4413      	add	r3, r2
 8001054:	1ddc      	adds	r4, r3, #7
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff f8d2 	bl	8000200 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	4423      	add	r3, r4
 8001060:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <fm_test_read+0x174>)
 8001062:	6810      	ldr	r0, [r2, #0]
 8001064:	6018      	str	r0, [r3, #0]
 8001066:	7912      	ldrb	r2, [r2, #4]
 8001068:	711a      	strb	r2, [r3, #4]

	fatman_init(ID);
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa4b 	bl	8000508 <fatman_init>

	memcpy(fatman.Directory[0].FilePath, "TEST6/20220830_TEST6_01.TXT", sizeof("TEST6/20220830_TEST6_01.TXT"));
 8001072:	221c      	movs	r2, #28
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <fm_test_read+0x178>)
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <fm_test_read+0x17c>)
 8001078:	f00c ffac 	bl	800dfd4 <memcpy>
	fatman_read();
 800107c:	f7ff faf4 	bl	8000668 <fatman_read>
//	fatman_init(ID);
	fatman_write(ID);
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa92 	bl	80005ac <fatman_write>
}
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	0800e18c 	.word	0x0800e18c
 8001094:	0800e194 	.word	0x0800e194
 8001098:	2000054c 	.word	0x2000054c
 800109c:	0800e05c 	.word	0x0800e05c
 80010a0:	0800e060 	.word	0x0800e060
 80010a4:	0800e064 	.word	0x0800e064
 80010a8:	0800e170 	.word	0x0800e170
 80010ac:	2000078b 	.word	0x2000078b

080010b0 <fatman_test_all>:
 * This method is used to test if the module works as wanted
 * @author William Favaro
 * @date 05/08/2022
 */
void fatman_test_all()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
#if FATMAN_AUTEST
	f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	490b      	ldr	r1, [pc, #44]	; (80010e4 <fatman_test_all+0x34>)
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <fatman_test_all+0x38>)
 80010ba:	f00b fce5 	bl	800ca88 <f_mount>

	fm_test_NormalUse1();
 80010be:	f7ff fb0d 	bl	80006dc <fm_test_NormalUse1>
	fm_test_NormalUse2();
 80010c2:	f7ff fb39 	bl	8000738 <fm_test_NormalUse2>

	fm_test_WHITheFilePathChanges();
 80010c6:	f7ff fc19 	bl	80008fc <fm_test_WHITheFilePathChanges>
	fm_test_WHIitsWritedSeveralConsecutiveTimes();
 80010ca:	f7ff fcf9 	bl	8000ac0 <fm_test_WHIitsWritedSeveralConsecutiveTimes>

	fm_test_WHItheBufferIsTooBig();
 80010ce:	f7ff fdeb 	bl	8000ca8 <fm_test_WHItheBufferIsTooBig>
	fm_test_read();
 80010d2:	f7ff ff2d 	bl	8000f30 <fm_test_read>

	f_mount(NULL, (TCHAR const*)SDPath, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	4902      	ldr	r1, [pc, #8]	; (80010e4 <fatman_test_all+0x34>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f00b fcd4 	bl	800ca88 <f_mount>
#endif /* FATMAN_UTEST */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20003738 	.word	0x20003738
 80010e8:	2000396c 	.word	0x2000396c

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f001 fd60 	bl	8002bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f83e 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 fd5a 	bl	8001bb0 <MX_GPIO_Init>
  MX_CRC_Init();
 80010fc:	f000 f9aa 	bl	8001454 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001100:	f000 f9bc 	bl	800147c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001104:	f000 f9ec 	bl	80014e0 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001108:	f000 fd02 	bl	8001b10 <MX_FMC_Init>
  MX_LTDC_Init();
 800110c:	f000 fb5e 	bl	80017cc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001110:	f000 fbda 	bl	80018c8 <MX_QUADSPI_Init>
  MX_I2C1_Init();
 8001114:	f000 fae4 	bl	80016e0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001118:	f000 f8f4 	bl	8001304 <MX_CAN1_Init>
  MX_CAN2_Init();
 800111c:	f000 f946 	bl	80013ac <MX_CAN2_Init>
  MX_SPI2_Init();
 8001120:	f000 fc1e 	bl	8001960 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001124:	f000 f89a 	bl	800125c <MX_ADC1_Init>
  MX_IWDG_Init();
 8001128:	f000 fb36 	bl	8001798 <MX_IWDG_Init>
  MX_TIM2_Init();
 800112c:	f000 fc4e 	bl	80019cc <MX_TIM2_Init>
  MX_I2C2_Init();
 8001130:	f000 fb04 	bl	800173c <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8001134:	f000 fc98 	bl	8001a68 <MX_USART6_UART_Init>
  MX_SDIO_SD_Init();
 8001138:	f000 fbf2 	bl	8001920 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800113c:	f009 f926 	bl	800a38c <MX_FATFS_Init>
  MX_DMA_Init();
 8001140:	f000 fcbe 	bl	8001ac0 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  PSA.B1_IncomingAirPressure.Value = 710;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <main+0x7c>)
 8001146:	f240 22c6 	movw	r2, #710	; 0x2c6
 800114a:	879a      	strh	r2, [r3, #60]	; 0x3c
  PSA.Mode.Ready = 1;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <main+0x7c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
//	fm_read();
//
//	fm_init(ID);
//	fm_write(ID);
//	f_mount(NULL, (TCHAR const*)SDPath, 0);
  fatman_test_all();
 8001152:	f7ff ffad 	bl	80010b0 <fatman_test_all>
  HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);	/* Illumina un led */
 8001156:	2108      	movs	r1, #8
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <main+0x80>)
 800115a:	f004 fb28 	bl	80057ae <HAL_GPIO_TogglePin>
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <main+0x84>)
 8001160:	f004 fcc6 	bl	8005af0 <HAL_IWDG_Refresh>
 8001164:	e7fb      	b.n	800115e <main+0x72>
 8001166:	bf00      	nop
 8001168:	20003630 	.word	0x20003630
 800116c:	40022800 	.word	0x40022800
 8001170:	20002dd0 	.word	0x20002dd0

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2234      	movs	r2, #52	; 0x34
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00c ff34 	bl	800dff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <SystemClock_Config+0xe0>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <SystemClock_Config+0xe0>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <SystemClock_Config+0xe0>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <SystemClock_Config+0xe4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <SystemClock_Config+0xe4>)
 80011be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <SystemClock_Config+0xe4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011d0:	2309      	movs	r3, #9
 80011d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011da:	2301      	movs	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011ec:	23b4      	movs	r3, #180	; 0xb4
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80011f4:	2308      	movs	r3, #8
 80011f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80011f8:	2306      	movs	r3, #6
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fd6b 	bl	8006cdc <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800120c:	f000 fe4c 	bl	8001ea8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001210:	f004 ffe6 	bl	80061e0 <HAL_PWREx_EnableOverDrive>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800121a:	f000 fe45 	bl	8001ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2105      	movs	r1, #5
 800123c:	4618      	mov	r0, r3
 800123e:	f005 f8e1 	bl	8006404 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001248:	f000 fe2e 	bl	8001ea8 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3750      	adds	r7, #80	; 0x50
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_ADC1_Init+0x9c>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_ADC1_Init+0x98>)
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <MX_ADC1_Init+0xa0>)
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012be:	f001 fcdf 	bl	8002c80 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 fdee 	bl	8001ea8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_ADC1_Init+0xa4>)
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012de:	f001 fd13 	bl	8002d08 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 fdde 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20003108 	.word	0x20003108
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001
 8001300:	10000012 	.word	0x10000012

08001304 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_CAN1_Init+0xa0>)
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <MX_CAN1_Init+0xa4>)
 800130e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 250;
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001312:	22fa      	movs	r2, #250	; 0xfa
 8001314:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_CAN1_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001324:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001328:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_CAN1_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_CAN1_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001344:	2200      	movs	r2, #0
 8001346:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_CAN1_Init+0xa0>)
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001356:	f001 ff05 	bl	8003164 <HAL_CAN_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001360:	f000 fda2 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN1_Filter = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2228      	movs	r2, #40	; 0x28
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00c fe40 	bl	800dff0 <memset>

  CAN1_Filter.FilterActivation = CAN_FILTER_ENABLE;		/* To enable/disable the filter */
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  CAN1_Filter.FilterBank = 9;							/* You can assign any filterbanks from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank */
 8001374:	2309      	movs	r3, #9
 8001376:	617b      	str	r3, [r7, #20]
  CAN1_Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  CAN1_Filter.FilterIdHigh = 0x0000 << 5;				/* */
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
  CAN1_Filter.FilterIdLow = 0x0000;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  CAN1_Filter.FilterMode = CAN_FILTERMODE_IDMASK;		/* If all the 1 matched with the sended ID. The message will be not filter out */
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  CAN1_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001388:	2301      	movs	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
  CAN1_Filter.SlaveStartFilterBank = 14; 				/* FilterBank from 0 to X-1 are assigned to CAN-MASTER (CAN1) and from X to 27 are assigned to CAN-SLAVE (CAN2), X = SlaveStartFilterBank*/
 800138c:	230e      	movs	r3, #14
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN1_Filter);
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_CAN1_Init+0xa0>)
 8001396:	f001 ffe1 	bl	800335c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000354c 	.word	0x2000354c
 80013a8:	40006400 	.word	0x40006400

080013ac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_CAN2_Init+0xa0>)
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <MX_CAN2_Init+0xa4>)
 80013b6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 40;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_CAN2_Init+0xa0>)
 80013ba:	2228      	movs	r2, #40	; 0x28
 80013bc:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_CAN2_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_CAN2_Init+0xa0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_CAN2_Init+0xa0>)
 80013cc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80013d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_CAN2_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_CAN2_Init+0xa0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_CAN2_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_CAN2_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_CAN2_Init+0xa0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_CAN2_Init+0xa0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_CAN2_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <MX_CAN2_Init+0xa0>)
 80013fe:	f001 feb1 	bl	8003164 <HAL_CAN_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 fd4e 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef CAN2_Filter = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2228      	movs	r2, #40	; 0x28
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00c fdec 	bl	800dff0 <memset>
  CAN2_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  CAN2_Filter.FilterBank = 18;
 800141c:	2312      	movs	r3, #18
 800141e:	617b      	str	r3, [r7, #20]
  CAN2_Filter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001420:	2301      	movs	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
  CAN2_Filter.FilterIdHigh = 0x701 << 5;
 8001424:	f24e 0320 	movw	r3, #57376	; 0xe020
 8001428:	603b      	str	r3, [r7, #0]
  CAN2_Filter.FilterIdLow = 0x0000;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  CAN2_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  CAN2_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  CAN2_Filter.SlaveStartFilterBank = 14;
 8001436:	230e      	movs	r3, #14
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &CAN2_Filter);
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_CAN2_Init+0xa0>)
 8001440:	f001 ff8c 	bl	800335c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20003150 	.word	0x20003150
 8001450:	40006800 	.word	0x40006800

08001454 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_CRC_Init+0x20>)
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <MX_CRC_Init+0x24>)
 800145c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_CRC_Init+0x20>)
 8001460:	f002 fc80 	bl	8003d64 <HAL_CRC_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800146a:	f000 fd1d 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20002ddc 	.word	0x20002ddc
 8001478:	40023000 	.word	0x40023000

0800147c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <MX_DMA2D_Init+0x60>)
 8001484:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 800149a:	2200      	movs	r2, #0
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 80014b2:	f003 f811 	bl	80044d8 <HAL_DMA2D_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014bc:	f000 fcf4 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014c0:	2101      	movs	r1, #1
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_DMA2D_Init+0x5c>)
 80014c4:	f003 f962 	bl	800478c <HAL_DMA2D_ConfigLayer>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014ce:	f000 fceb 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200034c4 	.word	0x200034c4
 80014dc:	4002b000 	.word	0x4002b000

080014e0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0aa      	sub	sp, #168	; 0xa8
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80014e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80014f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00c fd78 	bl	800dff0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001500:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8001512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f00c fd68 	bl	800dff0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	222c      	movs	r2, #44	; 0x2c
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f00c fd62 	bl	800dff0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800152e:	4a6b      	ldr	r2, [pc, #428]	; (80016dc <MX_DSIHOST_DSI_Init+0x1fc>)
 8001530:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001532:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001538:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800153a:	2204      	movs	r2, #4
 800153c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001544:	237d      	movs	r3, #125	; 0x7d
 8001546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800155a:	4619      	mov	r1, r3
 800155c:	485e      	ldr	r0, [pc, #376]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800155e:	f003 f9a7 	bl	80048b0 <HAL_DSI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 fc9e 	bl	8001ea8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800159e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015a2:	4619      	mov	r1, r3
 80015a4:	484c      	ldr	r0, [pc, #304]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80015a6:	f003 fe31 	bl	800520c <HAL_DSI_ConfigHostTimeouts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80015b0:	f000 fc7a 	bl	8001ea8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80015b4:	231c      	movs	r3, #28
 80015b6:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80015b8:	2321      	movs	r3, #33	; 0x21
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80015bc:	230f      	movs	r3, #15
 80015be:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80015c0:	2319      	movs	r3, #25
 80015c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80015cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015d0:	4619      	mov	r1, r3
 80015d2:	4841      	ldr	r0, [pc, #260]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80015d4:	f003 fdb0 	bl	8005138 <HAL_DSI_ConfigPhyTimer>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80015de:	f000 fc63 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80015e2:	2104      	movs	r1, #4
 80015e4:	483c      	ldr	r0, [pc, #240]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80015e6:	f003 fd7f 	bl	80050e8 <HAL_DSI_ConfigFlowControl>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80015f0:	f000 fc5a 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80015f4:	f242 7110 	movw	r1, #10000	; 0x2710
 80015f8:	4837      	ldr	r0, [pc, #220]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80015fa:	f003 fecd 	bl	8005398 <HAL_DSI_SetLowPowerRXFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001604:	f000 fc50 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800160c:	f003 fa6a 	bl	8004ae4 <HAL_DSI_ConfigErrorMonitor>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8001616:	f000 fc47 	bl	8001ea8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8001626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800162c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800163e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8001650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001654:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8001656:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800165a:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800165c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001660:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8001662:	2302      	movs	r3, #2
 8001664:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166a:	4619      	mov	r1, r3
 800166c:	481a      	ldr	r0, [pc, #104]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800166e:	f003 fcdd 	bl	800502c <HAL_DSI_ConfigCommand>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8001678:	f000 fc16 	bl	8001ea8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8001684:	23c8      	movs	r3, #200	; 0xc8
 8001686:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001688:	2310      	movs	r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001690:	2304      	movs	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80016ae:	f003 fbe5 	bl	8004e7c <HAL_DSI_ConfigAdaptedCommandMode>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80016b8:	f000 fbf6 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80016c0:	f003 fbb4 	bl	8004e2c <HAL_DSI_SetGenericVCID>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80016ca:	f000 fbed 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	37a8      	adds	r7, #168	; 0xa8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20003040 	.word	0x20003040
 80016dc:	40016c00 	.word	0x40016c00

080016e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C1_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_I2C1_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C1_Init+0x50>)
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_I2C1_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_I2C1_Init+0x50>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_I2C1_Init+0x50>)
 800171e:	f004 f861 	bl	80057e4 <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 fbbe 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20002d7c 	.word	0x20002d7c
 8001734:	40005400 	.word	0x40005400
 8001738:	00061a80 	.word	0x00061a80

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_I2C2_Init+0x54>)
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <MX_I2C2_Init+0x58>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_I2C2_Init+0x54>)
 8001748:	f24c 3250 	movw	r2, #50000	; 0xc350
 800174c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_I2C2_Init+0x54>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_I2C2_Init+0x54>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <MX_I2C2_Init+0x54>)
 800175c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001760:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_I2C2_Init+0x54>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_I2C2_Init+0x54>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_I2C2_Init+0x54>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_I2C2_Init+0x54>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_I2C2_Init+0x54>)
 800177c:	f004 f832 	bl	80057e4 <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001786:	f000 fb8f 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20002fec 	.word	0x20002fec
 8001794:	40005800 	.word	0x40005800

08001798 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_IWDG_Init+0x2c>)
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <MX_IWDG_Init+0x30>)
 80017a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_IWDG_Init+0x2c>)
 80017a4:	2203      	movs	r2, #3
 80017a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1999;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_IWDG_Init+0x2c>)
 80017aa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_IWDG_Init+0x2c>)
 80017b2:	f004 f95b 	bl	8005a6c <HAL_IWDG_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80017bc:	f000 fb74 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20002dd0 	.word	0x20002dd0
 80017c8:	40003000 	.word	0x40003000

080017cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2234      	movs	r2, #52	; 0x34
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00c fc09 	bl	800dff0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017e0:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <MX_LTDC_Init+0xf8>)
 80017e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80017fe:	2201      	movs	r2, #1
 8001800:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001804:	2201      	movs	r2, #1
 8001806:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_LTDC_Init+0xf4>)
 800180a:	2202      	movs	r2, #2
 800180c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001810:	2202      	movs	r2, #2
 8001812:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 202;
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001816:	22ca      	movs	r2, #202	; 0xca
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 482;
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_LTDC_Init+0xf4>)
 800181c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 203;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001824:	22cb      	movs	r2, #203	; 0xcb
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 483;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_LTDC_Init+0xf4>)
 800182a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_LTDC_Init+0xf4>)
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_LTDC_Init+0xf4>)
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <MX_LTDC_Init+0xf4>)
 800184a:	f004 f961 	bl	8005b10 <HAL_LTDC_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 fb28 	bl	8001ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 800185c:	23c8      	movs	r3, #200	; 0xc8
 800185e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001864:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001868:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800186a:	2302      	movs	r3, #2
 800186c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800186e:	23ff      	movs	r3, #255	; 0xff
 8001870:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800187c:	2305      	movs	r3, #5
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001880:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 8001886:	23c8      	movs	r3, #200	; 0xc8
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800188a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_LTDC_Init+0xf4>)
 80018aa:	f004 fac3 	bl	8005e34 <HAL_LTDC_ConfigLayer>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80018b4:	f000 faf8 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3738      	adds	r7, #56	; 0x38
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20003060 	.word	0x20003060
 80018c4:	40016800 	.word	0x40016800

080018c8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <MX_QUADSPI_Init+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018da:	2201      	movs	r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018e0:	2210      	movs	r2, #16
 80018e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 27;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018e6:	221b      	movs	r2, #27
 80018e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_QUADSPI_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_QUADSPI_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_QUADSPI_Init+0x50>)
 8001906:	f004 fcbb 	bl	8006280 <HAL_QSPI_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001910:	f000 faca 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200035e4 	.word	0x200035e4
 800191c:	a0001000 	.word	0xa0001000

08001920 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 8001926:	4a0d      	ldr	r2, [pc, #52]	; (800195c <MX_SDIO_SD_Init+0x3c>)
 8001928:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <MX_SDIO_SD_Init+0x38>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	200033f0 	.word	0x200033f0
 800195c:	40012c00 	.word	0x40012c00

08001960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001966:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <MX_SPI2_Init+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI2_Init+0x64>)
 800196c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_SPI2_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI2_Init+0x64>)
 800198c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI2_Init+0x64>)
 8001994:	2210      	movs	r2, #16
 8001996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_SPI2_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_SPI2_Init+0x64>)
 80019b2:	f006 ff64 	bl	800887e <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019bc:	f000 fa74 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20002b08 	.word	0x20002b08
 80019c8:	40003800 	.word	0x40003800

080019cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_TIM2_Init+0x98>)
 80019ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000 -1;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_TIM2_Init+0x98>)
 80019f2:	f242 3227 	movw	r2, #8999	; 0x2327
 80019f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM2_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a00:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a14:	f006 ffbc 	bl	8008990 <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a1e:	f000 fa43 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a30:	f007 f976 	bl	8008d20 <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a3a:	f000 fa35 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_TIM2_Init+0x98>)
 8001a4c:	f007 fb92 	bl	8009174 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a56:	f000 fa27 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20003504 	.word	0x20003504

08001a68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_USART6_UART_Init+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a80:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART6_UART_Init+0x50>)
 8001aa4:	f007 fbf6 	bl	8009294 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8001aae:	f000 f9fb 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20003480 	.word	0x20003480
 8001abc:	40011400 	.word	0x40011400

08001ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_DMA_Init+0x4c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <MX_DMA_Init+0x4c>)
 8001ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_DMA_Init+0x4c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	203b      	movs	r0, #59	; 0x3b
 8001ae8:	f002 f912 	bl	8003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001aec:	203b      	movs	r0, #59	; 0x3b
 8001aee:	f002 f92b 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2045      	movs	r0, #69	; 0x45
 8001af8:	f002 f90a 	bl	8003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001afc:	2045      	movs	r0, #69	; 0x45
 8001afe:	f002 f923 	bl	8003d48 <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b2a:	4a20      	ldr	r2, [pc, #128]	; (8001bac <MX_FMC_Init+0x9c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b42:	2220      	movs	r2, #32
 8001b44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b48:	2240      	movs	r2, #64	; 0x40
 8001b4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b4e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b74:	2307      	movs	r3, #7
 8001b76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b80:	2303      	movs	r3, #3
 8001b82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_FMC_Init+0x98>)
 8001b92:	f006 fe40 	bl	8008816 <HAL_SDRAM_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b9c:	f000 f984 	bl	8001ea8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20003588 	.word	0x20003588
 8001bac:	a0000140 	.word	0xa0000140

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bca:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a8e      	ldr	r2, [pc, #568]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b85      	ldr	r3, [pc, #532]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	4b81      	ldr	r3, [pc, #516]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a80      	ldr	r2, [pc, #512]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a79      	ldr	r2, [pc, #484]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a72      	ldr	r2, [pc, #456]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a6b      	ldr	r2, [pc, #428]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a64      	ldr	r2, [pc, #400]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a48      	ldr	r2, [pc, #288]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001ce8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <MX_GPIO_Init+0x258>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4843      	ldr	r0, [pc, #268]	; (8001e0c <MX_GPIO_Init+0x25c>)
 8001d00:	f003 fd3c 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2110      	movs	r1, #16
 8001d08:	4841      	ldr	r0, [pc, #260]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001d0a:	f003 fd37 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2110      	movs	r1, #16
 8001d12:	4840      	ldr	r0, [pc, #256]	; (8001e14 <MX_GPIO_Init+0x264>)
 8001d14:	f003 fd32 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7|SPI_CS_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	21c0      	movs	r1, #192	; 0xc0
 8001d1c:	483e      	ldr	r0, [pc, #248]	; (8001e18 <MX_GPIO_Init+0x268>)
 8001d1e:	f003 fd2d 	bl	800577c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_blue_Pin */
  GPIO_InitStruct.Pin = LED_blue_Pin;
 8001d22:	2308      	movs	r3, #8
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d26:	2311      	movs	r3, #17
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_blue_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4834      	ldr	r0, [pc, #208]	; (8001e0c <MX_GPIO_Init+0x25c>)
 8001d3a:	f003 fb5b 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d42:	2300      	movs	r3, #0
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4832      	ldr	r0, [pc, #200]	; (8001e1c <MX_GPIO_Init+0x26c>)
 8001d52:	f003 fb4f 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001d56:	2306      	movs	r3, #6
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d66:	4619      	mov	r1, r3
 8001d68:	4829      	ldr	r0, [pc, #164]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001d6a:	f003 fb43 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d82:	4619      	mov	r1, r3
 8001d84:	4822      	ldr	r0, [pc, #136]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001d86:	f003 fb35 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481c      	ldr	r0, [pc, #112]	; (8001e14 <MX_GPIO_Init+0x264>)
 8001da2:	f003 fb27 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001daa:	2311      	movs	r3, #17
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4816      	ldr	r0, [pc, #88]	; (8001e18 <MX_GPIO_Init+0x268>)
 8001dbe:	f003 fb19 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8001dc2:	23e0      	movs	r3, #224	; 0xe0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <MX_GPIO_Init+0x260>)
 8001dde:	f003 fb09 	bl	80053f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_GPIO_Init+0x268>)
 8001dfa:	f003 fafb 	bl	80053f4 <HAL_GPIO_Init>

}
 8001dfe:	bf00      	nop
 8001e00:	3740      	adds	r7, #64	; 0x40
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40022800 	.word	0x40022800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40021c00 	.word	0x40021c00
 8001e1c:	40021800 	.word	0x40021800

08001e20 <HAL_CAN_RxFifo1MsgPendingCallback>:

	/* DateTime */
	DateTime_Update(&today, 2022, 07, 11, 10, 25, 00); /* 2022/07/11 10:25:00*/
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	PSA.CAN_2.State = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	f107 0214 	add.w	r2, r7, #20
 8001e30:	2101      	movs	r1, #1
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 fb72 	bl	800351c <HAL_CAN_GetRxMessage>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001e3e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if(!PSA.CAN_2.State)
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001e44:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d113      	bne.n	8001e74 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
	{
		if((RxHeader.StdId == 0x701) && (RxHeader.DLC == 1))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f240 7201 	movw	r2, #1793	; 0x701
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10b      	bne.n	8001e74 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		{
			/* Valve are working -> Refresh Valve Timer */
			HAL_GPIO_TogglePin(GPIOK, GPIO_PIN_3);
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8001e60:	f003 fca5 	bl	80057ae <HAL_GPIO_TogglePin>
			PSA.ReceiveValveMessage.Timer = PSA.ReceiveValveMessage.Refresh;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001e66:	89da      	ldrh	r2, [r3, #14]
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001e6a:	819a      	strh	r2, [r3, #12]
			PSA.CAN_2.ReceiveAliveMessage = RxData[0];
 8001e6c:	7b3a      	ldrb	r2, [r7, #12]
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8001e70:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
	}
}
 8001e74:	bf00      	nop
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20003630 	.word	0x20003630
 8001e80:	40022800 	.word	0x40022800

08001e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e96:	f000 feaf 	bl	8002bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40001000 	.word	0x40001000

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <Error_Handler+0x8>
	...

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_MspInit+0x54>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_MspInit+0x54>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_MspInit+0x54>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_MspInit+0x54>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_MspInit+0x54>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_MspInit+0x54>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	f06f 0001 	mvn.w	r0, #1
 8001efa:	f001 ff09 	bl	8003d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <HAL_ADC_MspInit+0x3c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10d      	bne.n	8001f3a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_ADC_MspInit+0x40>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_ADC_MspInit+0x40>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_ADC_MspInit+0x40>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_CAN_MspInit+0x14c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d13e      	bne.n	8001ff0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a45      	ldr	r2, [pc, #276]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b3c      	ldr	r3, [pc, #240]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001fbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fce:	2309      	movs	r3, #9
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4833      	ldr	r0, [pc, #204]	; (80020a8 <HAL_CAN_MspInit+0x158>)
 8001fda:	f003 fa0b 	bl	80053f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	2014      	movs	r0, #20
 8001fe4:	f001 fe94 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f001 fead 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fee:	e050      	b.n	8002092 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <HAL_CAN_MspInit+0x15c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d14b      	bne.n	8002092 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8002004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 800201e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_CAN_MspInit+0x150>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10d      	bne.n	8002044 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8002032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_CAN_MspInit+0x154>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002060:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002072:	2309      	movs	r3, #9
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <HAL_CAN_MspInit+0x160>)
 800207e:	f003 f9b9 	bl	80053f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	2041      	movs	r0, #65	; 0x41
 8002088:	f001 fe42 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800208c:	2041      	movs	r0, #65	; 0x41
 800208e:	f001 fe5b 	bl	8003d48 <HAL_NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40006400 	.word	0x40006400
 80020a0:	2000008c 	.word	0x2000008c
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40006800 	.word	0x40006800
 80020b0:	40020400 	.word	0x40020400

080020b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_CRC_MspInit+0x3c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10d      	bne.n	80020e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_CRC_MspInit+0x40>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_CRC_MspInit+0x40>)
 80020d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_CRC_MspInit+0x40>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40023000 	.word	0x40023000
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_DMA2D_MspInit+0x48>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d115      	bne.n	8002136 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_DMA2D_MspInit+0x4c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_DMA2D_MspInit+0x4c>)
 8002114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_DMA2D_MspInit+0x4c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2105      	movs	r1, #5
 800212a:	205a      	movs	r0, #90	; 0x5a
 800212c:	f001 fdf0 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002130:	205a      	movs	r0, #90	; 0x5a
 8002132:	f001 fe09 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	4002b000 	.word	0x4002b000
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_DSI_MspInit+0x94>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d133      	bne.n	80021d2 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 8002174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 8002190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_DSI_MspInit+0x98>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a2:	2304      	movs	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80021b2:	230d      	movs	r3, #13
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <HAL_DSI_MspInit+0x9c>)
 80021be:	f003 f919 	bl	80053f4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	205c      	movs	r0, #92	; 0x5c
 80021c8:	f001 fda2 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80021cc:	205c      	movs	r0, #92	; 0x5c
 80021ce:	f001 fdbb 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40016c00 	.word	0x40016c00
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40022400 	.word	0x40022400

080021e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_I2C_MspInit+0xe8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12d      	bne.n	8002266 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a30      	ldr	r2, [pc, #192]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222c:	2312      	movs	r3, #18
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002238:	2304      	movs	r3, #4
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <HAL_I2C_MspInit+0xf0>)
 8002244:	f003 f8d6 	bl	80053f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 8002252:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002256:	6413      	str	r3, [r2, #64]	; 0x40
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002264:	e030      	b.n	80022c8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <HAL_I2C_MspInit+0xf4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d12b      	bne.n	80022c8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800228c:	2330      	movs	r3, #48	; 0x30
 800228e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002290:	2312      	movs	r3, #18
 8002292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800229c:	2304      	movs	r3, #4
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <HAL_I2C_MspInit+0xf8>)
 80022a8:	f003 f8a4 	bl	80053f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 80022b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ba:	6413      	str	r3, [r2, #64]	; 0x40
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_I2C_MspInit+0xec>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40005400 	.word	0x40005400
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40005800 	.word	0x40005800
 80022e0:	40021c00 	.word	0x40021c00

080022e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b092      	sub	sp, #72	; 0x48
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00b fe7b 	bl	800dff0 <memset>
  if(hltdc->Instance==LTDC)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_LTDC_MspInit+0x78>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d127      	bne.n	8002354 <HAL_LTDC_MspInit+0x70>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002304:	2308      	movs	r3, #8
 8002306:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002308:	2332      	movs	r3, #50	; 0x32
 800230a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4618      	mov	r0, r3
 800231a:	f004 faa1 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8002324:	f7ff fdc0 	bl	8001ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_LTDC_MspInit+0x7c>)
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_LTDC_MspInit+0x7c>)
 8002332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002336:	6453      	str	r3, [r2, #68]	; 0x44
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_LTDC_MspInit+0x7c>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2105      	movs	r1, #5
 8002348:	2058      	movs	r0, #88	; 0x58
 800234a:	f001 fce1 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800234e:	2058      	movs	r0, #88	; 0x58
 8002350:	f001 fcfa 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3748      	adds	r7, #72	; 0x48
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40016800 	.word	0x40016800
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a31      	ldr	r2, [pc, #196]	; (8002448 <HAL_QSPI_MspInit+0xe4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d15b      	bne.n	800243e <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4a2f      	ldr	r2, [pc, #188]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6393      	str	r3, [r2, #56]	; 0x38
 8002396:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023c8:	f043 0320 	orr.w	r3, r3, #32
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_QSPI_MspInit+0xe8>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80023ea:	230a      	movs	r3, #10
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4816      	ldr	r0, [pc, #88]	; (8002450 <HAL_QSPI_MspInit+0xec>)
 80023f6:	f002 fffd 	bl	80053f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
 80023fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800240c:	2309      	movs	r3, #9
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	480f      	ldr	r0, [pc, #60]	; (8002454 <HAL_QSPI_MspInit+0xf0>)
 8002418:	f002 ffec 	bl	80053f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800241c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800242e:	230a      	movs	r3, #10
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	4806      	ldr	r0, [pc, #24]	; (8002454 <HAL_QSPI_MspInit+0xf0>)
 800243a:	f002 ffdb 	bl	80053f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	a0001000 	.word	0xa0001000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020400 	.word	0x40020400
 8002454:	40021400 	.word	0x40021400

08002458 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b09a      	sub	sp, #104	; 0x68
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	223c      	movs	r2, #60	; 0x3c
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f00b fdb9 	bl	800dff0 <memset>
  if(hsd->Instance==SDIO)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a79      	ldr	r2, [pc, #484]	; (8002668 <HAL_SD_MspInit+0x210>)
 8002484:	4293      	cmp	r3, r2
 8002486:	f040 80eb 	bne.w	8002660 <HAL_SD_MspInit+0x208>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_SDIO;
 800248a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800248e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8002490:	2300      	movs	r3, #0
 8002492:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002494:	2300      	movs	r3, #0
 8002496:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002498:	f107 0318 	add.w	r3, r7, #24
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f9df 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80024a8:	f7ff fcfe 	bl	8001ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	4b6e      	ldr	r3, [pc, #440]	; (800266c <HAL_SD_MspInit+0x214>)
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	4a6d      	ldr	r2, [pc, #436]	; (800266c <HAL_SD_MspInit+0x214>)
 80024b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ba:	6453      	str	r3, [r2, #68]	; 0x44
 80024bc:	4b6b      	ldr	r3, [pc, #428]	; (800266c <HAL_SD_MspInit+0x214>)
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_SD_MspInit+0x214>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a66      	ldr	r2, [pc, #408]	; (800266c <HAL_SD_MspInit+0x214>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_SD_MspInit+0x214>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	4b60      	ldr	r3, [pc, #384]	; (800266c <HAL_SD_MspInit+0x214>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a5f      	ldr	r2, [pc, #380]	; (800266c <HAL_SD_MspInit+0x214>)
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
 80024f4:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_SD_MspInit+0x214>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002504:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002512:	230c      	movs	r3, #12
 8002514:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002516:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800251a:	4619      	mov	r1, r3
 800251c:	4854      	ldr	r0, [pc, #336]	; (8002670 <HAL_SD_MspInit+0x218>)
 800251e:	f002 ff69 	bl	80053f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8002522:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002526:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800252c:	2301      	movs	r3, #1
 800252e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002534:	230c      	movs	r3, #12
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800253c:	4619      	mov	r1, r3
 800253e:	484c      	ldr	r0, [pc, #304]	; (8002670 <HAL_SD_MspInit+0x218>)
 8002540:	f002 ff58 	bl	80053f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002544:	2304      	movs	r3, #4
 8002546:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254c:	2301      	movs	r3, #1
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002554:	230c      	movs	r3, #12
 8002556:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002558:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800255c:	4619      	mov	r1, r3
 800255e:	4845      	ldr	r0, [pc, #276]	; (8002674 <HAL_SD_MspInit+0x21c>)
 8002560:	f002 ff48 	bl	80053f4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002564:	4b44      	ldr	r3, [pc, #272]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002566:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_SD_MspInit+0x224>)
 8002568:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_SD_MspInit+0x220>)
 800256c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002570:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_SD_MspInit+0x220>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002584:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800258c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002594:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_SD_MspInit+0x220>)
 8002598:	2220      	movs	r2, #32
 800259a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_SD_MspInit+0x220>)
 800259e:	2200      	movs	r2, #0
 80025a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025a4:	2204      	movs	r2, #4
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025a8:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025aa:	2203      	movs	r2, #3
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80025be:	482e      	ldr	r0, [pc, #184]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025c0:	f001 fbec 	bl	8003d9c <HAL_DMA_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_SD_MspInit+0x176>
    {
      Error_Handler();
 80025ca:	f7ff fc6d 	bl	8001ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_SD_MspInit+0x220>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025dc:	4a29      	ldr	r2, [pc, #164]	; (8002684 <HAL_SD_MspInit+0x22c>)
 80025de:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_SD_MspInit+0x228>)
 80025fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002602:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800260a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_SD_MspInit+0x228>)
 800260e:	2220      	movs	r2, #32
 8002610:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_SD_MspInit+0x228>)
 800261a:	2204      	movs	r2, #4
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002620:	2203      	movs	r2, #3
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002626:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_SD_MspInit+0x228>)
 800262e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002634:	4812      	ldr	r0, [pc, #72]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002636:	f001 fbb1 	bl	8003d9c <HAL_DMA_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_SD_MspInit+0x1ec>
    {
      Error_Handler();
 8002640:	f7ff fc32 	bl	8001ea8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_SD_MspInit+0x228>)
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_SD_MspInit+0x228>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2105      	movs	r1, #5
 8002654:	2031      	movs	r0, #49	; 0x31
 8002656:	f001 fb5b 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800265a:	2031      	movs	r0, #49	; 0x31
 800265c:	f001 fb74 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002660:	bf00      	nop
 8002662:	3768      	adds	r7, #104	; 0x68
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40023800 	.word	0x40023800
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	20002aa4 	.word	0x20002aa4
 800267c:	40026458 	.word	0x40026458
 8002680:	20003390 	.word	0x20003390
 8002684:	400264a0 	.word	0x400264a0

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_SPI_MspInit+0xc0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d14a      	bne.n	8002740 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_SPI_MspInit+0xc4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026fe:	2308      	movs	r3, #8
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270a:	2302      	movs	r3, #2
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800270e:	2305      	movs	r3, #5
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	480d      	ldr	r0, [pc, #52]	; (8002750 <HAL_SPI_MspInit+0xc8>)
 800271a:	f002 fe6b 	bl	80053f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800271e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002728:	2301      	movs	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272c:	2302      	movs	r3, #2
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002730:	2305      	movs	r3, #5
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	; (8002754 <HAL_SPI_MspInit+0xcc>)
 800273c:	f002 fe5a 	bl	80053f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40003800 	.word	0x40003800
 800274c:	40023800 	.word	0x40023800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d115      	bne.n	8002796 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2105      	movs	r1, #5
 800278a:	201c      	movs	r0, #28
 800278c:	f001 fac0 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002790:	201c      	movs	r0, #28
 8002792:	f001 fad9 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12c      	bne.n	8002820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_MspInit+0x88>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_UART_MspInit+0x88>)
 80027d0:	f043 0320 	orr.w	r3, r3, #32
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0x88>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_UART_MspInit+0x88>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_UART_MspInit+0x88>)
 80027ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_UART_MspInit+0x88>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80027fe:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002810:	2308      	movs	r3, #8
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0x8c>)
 800281c:	f002 fdea 	bl	80053f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40011400 	.word	0x40011400
 800282c:	40023800 	.word	0x40023800
 8002830:	40021800 	.word	0x40021800

08002834 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002848:	4b44      	ldr	r3, [pc, #272]	; (800295c <HAL_FMC_MspInit+0x128>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8081 	bne.w	8002954 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_FMC_MspInit+0x128>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_FMC_MspInit+0x12c>)
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_FMC_MspInit+0x12c>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6393      	str	r3, [r2, #56]	; 0x38
 8002868:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_FMC_MspInit+0x12c>)
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8002874:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002878:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002886:	230c      	movs	r3, #12
 8002888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4835      	ldr	r0, [pc, #212]	; (8002964 <HAL_FMC_MspInit+0x130>)
 8002890:	f002 fdb0 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8002894:	f248 1333 	movw	r3, #33075	; 0x8133
 8002898:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a6:	230c      	movs	r3, #12
 80028a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	482e      	ldr	r0, [pc, #184]	; (8002968 <HAL_FMC_MspInit+0x134>)
 80028b0:	f002 fda0 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80028b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028c6:	230c      	movs	r3, #12
 80028c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4827      	ldr	r0, [pc, #156]	; (800296c <HAL_FMC_MspInit+0x138>)
 80028d0:	f002 fd90 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80028d4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80028d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028e6:	230c      	movs	r3, #12
 80028e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4820      	ldr	r0, [pc, #128]	; (8002970 <HAL_FMC_MspInit+0x13c>)
 80028f0:	f002 fd80 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80028f4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002906:	230c      	movs	r3, #12
 8002908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4819      	ldr	r0, [pc, #100]	; (8002974 <HAL_FMC_MspInit+0x140>)
 8002910:	f002 fd70 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8002914:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002918:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002926:	230c      	movs	r3, #12
 8002928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4812      	ldr	r0, [pc, #72]	; (8002978 <HAL_FMC_MspInit+0x144>)
 8002930:	f002 fd60 	bl	80053f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_2;
 8002934:	230d      	movs	r3, #13
 8002936:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002944:	230c      	movs	r3, #12
 8002946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4619      	mov	r1, r3
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <HAL_FMC_MspInit+0x148>)
 800294e:	f002 fd51 	bl	80053f4 <HAL_GPIO_Init>
 8002952:	e000      	b.n	8002956 <HAL_FMC_MspInit+0x122>
    return;
 8002954:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000090 	.word	0x20000090
 8002960:	40023800 	.word	0x40023800
 8002964:	40021000 	.word	0x40021000
 8002968:	40021800 	.word	0x40021800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40022000 	.word	0x40022000
 8002974:	40021400 	.word	0x40021400
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40020800 	.word	0x40020800

08002980 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002988:	f7ff ff54 	bl	8002834 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	2036      	movs	r0, #54	; 0x36
 80029aa:	f001 f9b1 	bl	8003d10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029ae:	2036      	movs	r0, #54	; 0x36
 80029b0:	f001 f9ca 	bl	8003d48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_InitTick+0xa4>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_InitTick+0xa4>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_InitTick+0xa4>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029d0:	f107 0210 	add.w	r2, r7, #16
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 ff0e 	bl	80067fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029e0:	f003 fee4 	bl	80067ac <HAL_RCC_GetPCLK1Freq>
 80029e4:	4603      	mov	r3, r0
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_InitTick+0xa8>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	3b01      	subs	r3, #1
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_InitTick+0xac>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_InitTick+0xb0>)
 80029fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_InitTick+0xac>)
 8002a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_InitTick+0xac>)
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_InitTick+0xac>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_InitTick+0xac>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a18:	4809      	ldr	r0, [pc, #36]	; (8002a40 <HAL_InitTick+0xac>)
 8002a1a:	f005 ffb9 	bl	8008990 <HAL_TIM_Base_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a24:	4806      	ldr	r0, [pc, #24]	; (8002a40 <HAL_InitTick+0xac>)
 8002a26:	f006 f803 	bl	8008a30 <HAL_TIM_Base_Start_IT>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	e000      	b.n	8002a30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3730      	adds	r7, #48	; 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	431bde83 	.word	0x431bde83
 8002a40:	200036e8 	.word	0x200036e8
 8002a44:	40001000 	.word	0x40001000

08002a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <NMI_Handler+0x4>

08002a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <BusFault_Handler+0x4>

08002a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <UsageFault_Handler+0x4>

08002a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <CAN1_RX0_IRQHandler+0x10>)
 8002a7a:	f000 fe61 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000354c 	.word	0x2000354c

08002a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <TIM2_IRQHandler+0x10>)
 8002a8e:	f006 f83f 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20003504 	.word	0x20003504

08002a9c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <SDIO_IRQHandler+0x10>)
 8002aa2:	f004 fe0f 	bl	80076c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200033f0 	.word	0x200033f0

08002ab0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <TIM6_DAC_IRQHandler+0x10>)
 8002ab6:	f006 f82b 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200036e8 	.word	0x200036e8

08002ac4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA2_Stream3_IRQHandler+0x10>)
 8002aca:	f001 fa8f 	bl	8003fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20002aa4 	.word	0x20002aa4

08002ad8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <CAN2_RX1_IRQHandler+0x10>)
 8002ade:	f000 fe2f 	bl	8003740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20003150 	.word	0x20003150

08002aec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <DMA2_Stream6_IRQHandler+0x10>)
 8002af2:	f001 fa7b 	bl	8003fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20003390 	.word	0x20003390

08002b00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <LTDC_IRQHandler+0x10>)
 8002b06:	f003 f8d3 	bl	8005cb0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20003060 	.word	0x20003060

08002b14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA2D_IRQHandler+0x10>)
 8002b1a:	f001 fd26 	bl	800456a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200034c4 	.word	0x200034c4

08002b28 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DSI_IRQHandler+0x10>)
 8002b2e:	f002 f896 	bl	8004c5e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20003040 	.word	0x20003040

08002b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <SystemInit+0x20>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <SystemInit+0x20>)
 8002b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b66:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b7c:	4c0b      	ldr	r4, [pc, #44]	; (8002bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b8a:	f7ff ffd7 	bl	8002b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f00b f9fd 	bl	800df8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b92:	f7fe faab 	bl	80010ec <main>
  bx  lr    
 8002b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ba4:	0800e6cc 	.word	0x0800e6cc
  ldr r2, =_sbss
 8002ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002bac:	20003ba0 	.word	0x20003ba0

08002bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb0:	e7fe      	b.n	8002bb0 <ADC_IRQHandler>
	...

08002bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <HAL_Init+0x40>)
 8002bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <HAL_Init+0x40>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_Init+0x40>)
 8002bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f001 f88c 	bl	8003cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7ff fed6 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be8:	f7ff f964 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20003730 	.word	0x20003730

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20003730 	.word	0x20003730

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e033      	b.n	8002cfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f934 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cc6:	f023 0302 	bic.w	r3, r3, #2
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f94a 	bl	8002f6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	e001      	b.n	8002cf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e113      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x244>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d925      	bls.n	8002d80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68d9      	ldr	r1, [r3, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	3b1e      	subs	r3, #30
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43da      	mvns	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	400a      	ands	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4403      	add	r3, r0
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	e022      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	2207      	movs	r2, #7
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	400a      	ands	r2, r1
 8002da2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6919      	ldr	r1, [r3, #16]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4403      	add	r3, r0
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d824      	bhi.n	8002e18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b05      	subs	r3, #5
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b05      	subs	r3, #5
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34
 8002e16:	e04c      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d824      	bhi.n	8002e6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b23      	subs	r3, #35	; 0x23
 8002e32:	221f      	movs	r2, #31
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	400a      	ands	r2, r1
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b23      	subs	r3, #35	; 0x23
 8002e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	e023      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3b41      	subs	r3, #65	; 0x41
 8002e7c:	221f      	movs	r2, #31
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	400a      	ands	r2, r1
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b41      	subs	r3, #65	; 0x41
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_ADC_ConfigChannel+0x250>)
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_ADC_ConfigChannel+0x254>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10f      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1d8>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b12      	cmp	r3, #18
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_ADC_ConfigChannel+0x254>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12b      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x23a>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_ADC_ConfigChannel+0x258>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x1f4>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d122      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_ADC_ConfigChannel+0x258>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d111      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_ADC_ConfigChannel+0x25c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_ADC_ConfigChannel+0x260>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	0c9a      	lsrs	r2, r3, #18
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f34:	e002      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40012300 	.word	0x40012300
 8002f5c:	40012000 	.word	0x40012000
 8002f60:	10000012 	.word	0x10000012
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <ADC_Init+0x1f0>)
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	4a58      	ldr	r2, [pc, #352]	; (8003160 <ADC_Init+0x1f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003012:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6899      	ldr	r1, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e00f      	b.n	800306a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003068:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0202 	bic.w	r2, r2, #2
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7e1b      	ldrb	r3, [r3, #24]
 8003084:	005a      	lsls	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	3b01      	subs	r3, #1
 80030c4:	035a      	lsls	r2, r3, #13
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e007      	b.n	80030e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	051a      	lsls	r2, r3, #20
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003122:	025a      	lsls	r2, r3, #9
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	029a      	lsls	r2, r3, #10
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012300 	.word	0x40012300
 8003160:	0f000001 	.word	0x0f000001

08003164 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0ed      	b.n	8003352 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fee4 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003198:	f7ff fd42 	bl	8002c20 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800319e:	e012      	b.n	80031c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a0:	f7ff fd3e 	bl	8002c20 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b0a      	cmp	r3, #10
 80031ac:	d90b      	bls.n	80031c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2205      	movs	r2, #5
 80031be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e0c5      	b.n	8003352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0e5      	beq.n	80031a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0202 	bic.w	r2, r2, #2
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e4:	f7ff fd1c 	bl	8002c20 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ea:	e012      	b.n	8003212 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ec:	f7ff fd18 	bl	8002c20 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d90b      	bls.n	8003212 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e09f      	b.n	8003352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7e1b      	ldrb	r3, [r3, #24]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e007      	b.n	800324a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7e5b      	ldrb	r3, [r3, #25]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e9b      	ldrb	r3, [r3, #26]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0220 	orr.w	r2, r2, #32
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0220 	bic.w	r2, r2, #32
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7edb      	ldrb	r3, [r3, #27]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0210 	bic.w	r2, r2, #16
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e007      	b.n	80032c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0210 	orr.w	r2, r2, #16
 80032c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7f1b      	ldrb	r3, [r3, #28]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0208 	orr.w	r2, r2, #8
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e007      	b.n	80032f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0208 	bic.w	r2, r2, #8
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7f5b      	ldrb	r3, [r3, #29]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0204 	orr.w	r2, r2, #4
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	ea42 0103 	orr.w	r1, r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003372:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d003      	beq.n	8003382 <HAL_CAN_ConfigFilter+0x26>
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b02      	cmp	r3, #2
 800337e:	f040 80be 	bne.w	80034fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_CAN_ConfigFilter+0x1bc>)
 8003384:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800339c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	431a      	orrs	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2201      	movs	r2, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	401a      	ands	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d123      	bne.n	800342c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003406:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3248      	adds	r2, #72	; 0x48
 800340c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003420:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003422:	6979      	ldr	r1, [r7, #20]
 8003424:	3348      	adds	r3, #72	; 0x48
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d122      	bne.n	800347a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003454:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3248      	adds	r2, #72	; 0x48
 800345a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800346e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	3348      	adds	r3, #72	; 0x48
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	43db      	mvns	r3, r3
 800348c:	401a      	ands	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003494:	e007      	b.n	80034a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	431a      	orrs	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	401a      	ands	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80034c0:	e007      	b.n	80034d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034f0:	f023 0201 	bic.w	r2, r3, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e006      	b.n	800350c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40006400 	.word	0x40006400

0800351c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003530:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d003      	beq.n	8003540 <HAL_CAN_GetRxMessage+0x24>
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 80f3 	bne.w	8003726 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0e7      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0d8      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	331b      	adds	r3, #27
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0204 	and.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10c      	bne.n	80035ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0d5b      	lsrs	r3, r3, #21
 80035b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	e00b      	b.n	80035d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	331b      	adds	r3, #27
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	331b      	adds	r3, #27
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0202 	and.w	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	331b      	adds	r3, #27
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	331b      	adds	r3, #27
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	331b      	adds	r3, #27
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4413      	add	r3, r2
 800363a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	4413      	add	r3, r2
 8003650:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0a1a      	lsrs	r2, r3, #8
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0c1a      	lsrs	r2, r3, #16
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3302      	adds	r3, #2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0e1a      	lsrs	r2, r3, #24
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3303      	adds	r3, #3
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	3304      	adds	r3, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0a1a      	lsrs	r2, r3, #8
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	3305      	adds	r3, #5
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0c1a      	lsrs	r2, r3, #16
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	3306      	adds	r3, #6
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0e1a      	lsrs	r2, r3, #24
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3307      	adds	r3, #7
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e007      	b.n	8003722 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e006      	b.n	8003734 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d07c      	beq.n	8003880 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f983 	bl	8003aae <HAL_CAN_TxMailbox0CompleteCallback>
 80037a8:	e016      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e00c      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e002      	b.n	80037d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f989 	bl	8003aea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d024      	beq.n	800382c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f963 	bl	8003ac2 <HAL_CAN_TxMailbox1CompleteCallback>
 80037fc:	e016      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e00c      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	e002      	b.n	800382c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f969 	bl	8003afe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800383e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f943 	bl	8003ad6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003850:	e016      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e00c      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e002      	b.n	8003880 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f949 	bl	8003b12 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2210      	movs	r2, #16
 80038a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f93a 	bl	8003b3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f921 	bl	8003b26 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00c      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2210      	movs	r2, #16
 8003906:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f912 	bl	8003b4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe fa6c 	bl	8001e20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2210      	movs	r2, #16
 8003962:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8fc 	bl	8003b62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8f5 	bl	8003b76 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d07b      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d072      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d043      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03e      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a0e:	2b60      	cmp	r3, #96	; 0x60
 8003a10:	d02b      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x32a>
 8003a12:	2b60      	cmp	r3, #96	; 0x60
 8003a14:	d82e      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a16:	2b50      	cmp	r3, #80	; 0x50
 8003a18:	d022      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x320>
 8003a1a:	2b50      	cmp	r3, #80	; 0x50
 8003a1c:	d82a      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d019      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x316>
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d826      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a26:	2b30      	cmp	r3, #48	; 0x30
 8003a28:	d010      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x30c>
 8003a2a:	2b30      	cmp	r3, #48	; 0x30
 8003a2c:	d822      	bhi.n	8003a74 <HAL_CAN_IRQHandler+0x334>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d002      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x2f8>
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d005      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a36:	e01d      	b.n	8003a74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a40:	e019      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f043 0310 	orr.w	r3, r3, #16
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4a:	e014      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a54:	e00f      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5e:	e00a      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a68:	e005      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a72:	e000      	b.n	8003a76 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f872 	bl	8003b8a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3728      	adds	r7, #40	; 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ff4c 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d22:	f7ff ff61 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	6978      	ldr	r0, [r7, #20]
 8003d2e:	f7ff ffb1 	bl	8003c94 <NVIC_EncodePriority>
 8003d32:	4602      	mov	r2, r0
 8003d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff80 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff54 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00e      	b.n	8003d94 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	795b      	ldrb	r3, [r3, #5]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe f994 	bl	80020b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7fe ff3a 	bl	8002c20 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e099      	b.n	8003eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd8:	e00f      	b.n	8003dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dda:	f7fe ff21 	bl	8002c20 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d908      	bls.n	8003dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2203      	movs	r2, #3
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e078      	b.n	8003eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e8      	bne.n	8003dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <HAL_DMA_Init+0x158>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d107      	bne.n	8003e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d117      	bne.n	8003ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa9d 	bl	80043e0 <DMA_CheckFifoParam>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e016      	b.n	8003eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa54 	bl	8004374 <DMA_CalcBaseAndBitshift>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	223f      	movs	r2, #63	; 0x3f
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	f010803f 	.word	0xf010803f

08003ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_DMA_Start_IT+0x26>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e040      	b.n	8003fa0 <HAL_DMA_Start_IT+0xa8>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12f      	bne.n	8003f92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f9e6 	bl	8004318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	223f      	movs	r2, #63	; 0x3f
 8003f52:	409a      	lsls	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0216 	orr.w	r2, r2, #22
 8003f66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e005      	b.n	8003f9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d004      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e00c      	b.n	8003fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2205      	movs	r2, #5
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ff8:	4b92      	ldr	r3, [pc, #584]	; (8004244 <HAL_DMA_IRQHandler+0x258>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a92      	ldr	r2, [pc, #584]	; (8004248 <HAL_DMA_IRQHandler+0x25c>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0a9b      	lsrs	r3, r3, #10
 8004004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	2208      	movs	r2, #8
 8004018:	409a      	lsls	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	2208      	movs	r2, #8
 8004046:	409a      	lsls	r2, r3
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d012      	beq.n	800408e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	2201      	movs	r2, #1
 800407c:	409a      	lsls	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	2204      	movs	r2, #4
 8004094:	409a      	lsls	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d012      	beq.n	80040c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	2204      	movs	r2, #4
 80040b2:	409a      	lsls	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	2210      	movs	r2, #16
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d043      	beq.n	800415c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d03c      	beq.n	800415c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	2210      	movs	r2, #16
 80040e8:	409a      	lsls	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d108      	bne.n	800411c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d024      	beq.n	800415c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
 800411a:	e01f      	b.n	800415c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01b      	beq.n	800415c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e016      	b.n	800415c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0208 	bic.w	r2, r2, #8
 800414a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	2220      	movs	r2, #32
 8004162:	409a      	lsls	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 808e 	beq.w	800428a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8086 	beq.w	800428a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2220      	movs	r2, #32
 8004184:	409a      	lsls	r2, r3
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b05      	cmp	r3, #5
 8004194:	d136      	bne.n	8004204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0216 	bic.w	r2, r2, #22
 80041a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x1da>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0208 	bic.w	r2, r2, #8
 80041d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	223f      	movs	r2, #63	; 0x3f
 80041dc:	409a      	lsls	r2, r3
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d07d      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
        }
        return;
 8004202:	e078      	b.n	80042f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01c      	beq.n	800424c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d108      	bne.n	8004232 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	2b00      	cmp	r3, #0
 8004226:	d030      	beq.n	800428a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
 8004230:	e02b      	b.n	800428a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d027      	beq.n	800428a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
 8004242:	e022      	b.n	800428a <HAL_DMA_IRQHandler+0x29e>
 8004244:	20000000 	.word	0x20000000
 8004248:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0210 	bic.w	r2, r2, #16
 8004268:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d032      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2205      	movs	r2, #5
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d307      	bcc.n	80042d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f2      	bne.n	80042b6 <HAL_DMA_IRQHandler+0x2ca>
 80042d0:	e000      	b.n	80042d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042d2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e000      	b.n	80042f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80042f6:	bf00      	nop
    }
  }
}
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop

08004300 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d108      	bne.n	8004358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004356:	e007      	b.n	8004368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	3b10      	subs	r3, #16
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <DMA_CalcBaseAndBitshift+0x68>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d909      	bls.n	80043b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	659a      	str	r2, [r3, #88]	; 0x58
 80043b4:	e007      	b.n	80043c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	aaaaaaab 	.word	0xaaaaaaab
 80043dc:	0800e200 	.word	0x0800e200

080043e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11f      	bne.n	800443a <DMA_CheckFifoParam+0x5a>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d856      	bhi.n	80044ae <DMA_CheckFifoParam+0xce>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <DMA_CheckFifoParam+0x28>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	08004419 	.word	0x08004419
 800440c:	0800442b 	.word	0x0800442b
 8004410:	08004419 	.word	0x08004419
 8004414:	080044af 	.word	0x080044af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d046      	beq.n	80044b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e043      	b.n	80044b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004432:	d140      	bne.n	80044b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004438:	e03d      	b.n	80044b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004442:	d121      	bne.n	8004488 <DMA_CheckFifoParam+0xa8>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d837      	bhi.n	80044ba <DMA_CheckFifoParam+0xda>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <DMA_CheckFifoParam+0x70>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004461 	.word	0x08004461
 8004454:	08004467 	.word	0x08004467
 8004458:	08004461 	.word	0x08004461
 800445c:	08004479 	.word	0x08004479
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
      break;
 8004464:	e030      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d025      	beq.n	80044be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004476:	e022      	b.n	80044be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004480:	d11f      	bne.n	80044c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004486:	e01c      	b.n	80044c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d903      	bls.n	8004496 <DMA_CheckFifoParam+0xb6>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d003      	beq.n	800449c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004494:	e018      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      break;
 800449a:	e015      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e00b      	b.n	80044c6 <DMA_CheckFifoParam+0xe6>
      break;
 80044ae:	bf00      	nop
 80044b0:	e00a      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;
 80044b2:	bf00      	nop
 80044b4:	e008      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
 80044b8:	e006      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ba:	bf00      	nop
 80044bc:	e004      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;
 80044be:	bf00      	nop
 80044c0:	e002      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <DMA_CheckFifoParam+0xe8>
      break;
 80044c6:	bf00      	nop
    }
  } 
  
  return status; 
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop

080044d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e03b      	b.n	8004562 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd fdfa 	bl	80020f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	f023 0107 	bic.w	r1, r3, #7
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004542:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68d1      	ldr	r1, [r2, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	430b      	orrs	r3, r1
 8004550:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d026      	beq.n	80045da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d026      	beq.n	8004632 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d021      	beq.n	8004632 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d026      	beq.n	800468a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	2b00      	cmp	r3, #0
 8004644:	d021      	beq.n	800468a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2204      	movs	r2, #4
 800466e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d013      	beq.n	80046bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2204      	movs	r2, #4
 80046b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f853 	bl	8004762 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d024      	beq.n	8004710 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01f      	beq.n	8004710 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2202      	movs	r2, #2
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01f      	beq.n	800475a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004732:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f80e 	bl	8004776 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_DMA2D_ConfigLayer+0x20>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e079      	b.n	80048a0 <HAL_DMA2D_ConfigLayer+0x114>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	3318      	adds	r3, #24
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_DMA2D_ConfigLayer+0x120>)
 80047d8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b0a      	cmp	r3, #10
 80047e0:	d003      	beq.n	80047ea <HAL_DMA2D_ConfigLayer+0x5e>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b09      	cmp	r3, #9
 80047e8:	d107      	bne.n	80047fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e005      	b.n	8004806 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d120      	bne.n	800484e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	43db      	mvns	r3, r3
 8004816:	ea02 0103 	and.w	r1, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	430a      	orrs	r2, r1
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b0a      	cmp	r3, #10
 8004834:	d003      	beq.n	800483e <HAL_DMA2D_ConfigLayer+0xb2>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b09      	cmp	r3, #9
 800483c:	d127      	bne.n	800488e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800484a:	629a      	str	r2, [r3, #40]	; 0x28
 800484c:	e01f      	b.n	800488e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	ea02 0103 	and.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	430a      	orrs	r2, r1
 8004864:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b0a      	cmp	r3, #10
 8004876:	d003      	beq.n	8004880 <HAL_DMA2D_ConfigLayer+0xf4>
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b09      	cmp	r3, #9
 800487e:	d106      	bne.n	800488e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800488c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	ff03000f 	.word	0xff03000f

080048b0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e108      	b.n	8004ad6 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	7c5b      	ldrb	r3, [r3, #17]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fc3a 	bl	8002148 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2203      	movs	r2, #3
 80048d8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80048ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004902:	f7fe f98d 	bl	8002c20 <HAL_GetTick>
 8004906:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004908:	e009      	b.n	800491e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800490a:	f7fe f989 	bl	8002c20 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004918:	d901      	bls.n	800491e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0db      	b.n	8004ad6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ed      	beq.n	800490a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800493e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004942:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	02db      	lsls	r3, r3, #11
 800495a:	431a      	orrs	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004996:	f7fe f943 	bl	8002c20 <HAL_GetTick>
 800499a:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800499c:	e009      	b.n	80049b2 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800499e:	f7fe f93f 	bl	8002c20 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ac:	d901      	bls.n	80049b2 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e091      	b.n	8004ad6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ed      	beq.n	800499e <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0206 	orr.w	r2, r2, #6
 80049d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0203 	bic.w	r2, r2, #3
 80049e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0203 	bic.w	r2, r2, #3
 8004a14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_DSI_Init+0x1ae>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	e000      	b.n	8004a60 <HAL_DSI_Init+0x1b0>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <HAL_DSI_Init+0x230>)
 8004a66:	fb02 f203 	mul.w	r2, r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	409a      	lsls	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004a96:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	003d0900 	.word	0x003d0900

08004ae4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7c1b      	ldrb	r3, [r3, #16]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_DSI_ConfigErrorMonitor+0x16>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0ab      	b.n	8004c52 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004b34:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004b38:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004b56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0202 	orr.w	r2, r2, #2
 8004b92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 020c 	orr.w	r2, r2, #12
 8004bb0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0210 	orr.w	r2, r2, #16
 8004bce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0220 	orr.w	r2, r2, #32
 8004bec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004c46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8ad 	bl	8004df0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00f      	beq.n	8004cc6 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f89f 	bl	8004e04 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 808c 	beq.w	8004de8 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cd8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004cf0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f043 0202 	orr.w	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f043 0208 	orr.w	r2, r3, #8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f043 0210 	orr.w	r2, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f818 	bl	8004e18 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7c1b      	ldrb	r3, [r3, #16]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_DSI_SetGenericVCID+0x16>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e016      	b.n	8004e70 <HAL_DSI_SetGenericVCID+0x44>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0203 	bic.w	r2, r2, #3
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	7c1b      	ldrb	r3, [r3, #16]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0c5      	b.n	800501e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0203 	bic.w	r2, r2, #3
 8004ede:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0207 	bic.w	r2, r2, #7
 8004f00:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6959      	ldr	r1, [r3, #20]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 020f 	bic.w	r2, r2, #15
 8004f2e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6919      	ldr	r1, [r3, #16]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 020e 	bic.w	r2, r2, #14
 8004f52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	005a      	lsls	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004fa0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0202 	orr.w	r2, r2, #2
 8005012:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7c1b      	ldrb	r3, [r3, #16]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_DSI_ConfigCommand+0x16>
 800503e:	2302      	movs	r3, #2
 8005040:	e049      	b.n	80050d6 <HAL_DSI_ConfigCommand+0xaa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_DSI_ConfigCommand+0xb8>)
 8005054:	400b      	ands	r3, r1
 8005056:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005066:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800506c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8005072:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005078:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800507e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8005084:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800508a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005090:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8005096:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800509c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80050a2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0202 	bic.w	r2, r2, #2
 80050ba:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	fef080ff 	.word	0xfef080ff

080050e8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7c1b      	ldrb	r3, [r3, #16]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_DSI_ConfigFlowControl+0x16>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e016      	b.n	800512c <HAL_DSI_ConfigFlowControl+0x44>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 021f 	bic.w	r2, r2, #31
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	7c1b      	ldrb	r3, [r3, #16]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_DSI_ConfigPhyTimer+0x16>
 800514a:	2302      	movs	r3, #2
 800514c:	e058      	b.n	8005200 <HAL_DSI_ConfigPhyTimer+0xc8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4293      	cmp	r3, r2
 800515e:	bf38      	it	cc
 8005160:	4613      	movcc	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005174:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	041a      	lsls	r2, r3, #16
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80051a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80051dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7c1b      	ldrb	r3, [r3, #16]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_DSI_ConfigHostTimeouts+0x16>
 800521e:	2302      	movs	r3, #2
 8005220:	e0b4      	b.n	800538c <HAL_DSI_ConfigHostTimeouts+0x180>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005236:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6899      	ldr	r1, [r3, #8]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	b292      	uxth	r2, r2
 8005258:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	041a      	lsls	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	0c1b      	lsrs	r3, r3, #16
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	0c1b      	lsrs	r3, r3, #16
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7c1b      	ldrb	r3, [r3, #16]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_DSI_SetLowPowerRXFilter+0x16>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e01b      	b.n	80053e6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80053c4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	065a      	lsls	r2, r3, #25
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e177      	b.n	8005700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005410:	2201      	movs	r2, #1
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4013      	ands	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	f040 8166 	bne.w	80056fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d005      	beq.n	8005446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005442:	2b02      	cmp	r3, #2
 8005444:	d130      	bne.n	80054a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800547c:	2201      	movs	r2, #1
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 0201 	and.w	r2, r3, #1
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d017      	beq.n	80054e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	2203      	movs	r2, #3
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d123      	bne.n	8005538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	08da      	lsrs	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3208      	adds	r2, #8
 80054f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	220f      	movs	r2, #15
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	08da      	lsrs	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3208      	adds	r2, #8
 8005532:	69b9      	ldr	r1, [r7, #24]
 8005534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	2203      	movs	r2, #3
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0203 	and.w	r2, r3, #3
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80c0 	beq.w	80056fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	4b66      	ldr	r3, [pc, #408]	; (8005718 <HAL_GPIO_Init+0x324>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	4a65      	ldr	r2, [pc, #404]	; (8005718 <HAL_GPIO_Init+0x324>)
 8005584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005588:	6453      	str	r3, [r2, #68]	; 0x44
 800558a:	4b63      	ldr	r3, [pc, #396]	; (8005718 <HAL_GPIO_Init+0x324>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005596:	4a61      	ldr	r2, [pc, #388]	; (800571c <HAL_GPIO_Init+0x328>)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	220f      	movs	r2, #15
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4013      	ands	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a58      	ldr	r2, [pc, #352]	; (8005720 <HAL_GPIO_Init+0x32c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d037      	beq.n	8005632 <HAL_GPIO_Init+0x23e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a57      	ldr	r2, [pc, #348]	; (8005724 <HAL_GPIO_Init+0x330>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d031      	beq.n	800562e <HAL_GPIO_Init+0x23a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a56      	ldr	r2, [pc, #344]	; (8005728 <HAL_GPIO_Init+0x334>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d02b      	beq.n	800562a <HAL_GPIO_Init+0x236>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a55      	ldr	r2, [pc, #340]	; (800572c <HAL_GPIO_Init+0x338>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d025      	beq.n	8005626 <HAL_GPIO_Init+0x232>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a54      	ldr	r2, [pc, #336]	; (8005730 <HAL_GPIO_Init+0x33c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01f      	beq.n	8005622 <HAL_GPIO_Init+0x22e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a53      	ldr	r2, [pc, #332]	; (8005734 <HAL_GPIO_Init+0x340>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d019      	beq.n	800561e <HAL_GPIO_Init+0x22a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a52      	ldr	r2, [pc, #328]	; (8005738 <HAL_GPIO_Init+0x344>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_GPIO_Init+0x226>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a51      	ldr	r2, [pc, #324]	; (800573c <HAL_GPIO_Init+0x348>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00d      	beq.n	8005616 <HAL_GPIO_Init+0x222>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a50      	ldr	r2, [pc, #320]	; (8005740 <HAL_GPIO_Init+0x34c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <HAL_GPIO_Init+0x21e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a4f      	ldr	r2, [pc, #316]	; (8005744 <HAL_GPIO_Init+0x350>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <HAL_GPIO_Init+0x21a>
 800560a:	2309      	movs	r3, #9
 800560c:	e012      	b.n	8005634 <HAL_GPIO_Init+0x240>
 800560e:	230a      	movs	r3, #10
 8005610:	e010      	b.n	8005634 <HAL_GPIO_Init+0x240>
 8005612:	2308      	movs	r3, #8
 8005614:	e00e      	b.n	8005634 <HAL_GPIO_Init+0x240>
 8005616:	2307      	movs	r3, #7
 8005618:	e00c      	b.n	8005634 <HAL_GPIO_Init+0x240>
 800561a:	2306      	movs	r3, #6
 800561c:	e00a      	b.n	8005634 <HAL_GPIO_Init+0x240>
 800561e:	2305      	movs	r3, #5
 8005620:	e008      	b.n	8005634 <HAL_GPIO_Init+0x240>
 8005622:	2304      	movs	r3, #4
 8005624:	e006      	b.n	8005634 <HAL_GPIO_Init+0x240>
 8005626:	2303      	movs	r3, #3
 8005628:	e004      	b.n	8005634 <HAL_GPIO_Init+0x240>
 800562a:	2302      	movs	r3, #2
 800562c:	e002      	b.n	8005634 <HAL_GPIO_Init+0x240>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_GPIO_Init+0x240>
 8005632:	2300      	movs	r3, #0
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f002 0203 	and.w	r2, r2, #3
 800563a:	0092      	lsls	r2, r2, #2
 800563c:	4093      	lsls	r3, r2
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005644:	4935      	ldr	r1, [pc, #212]	; (800571c <HAL_GPIO_Init+0x328>)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	3302      	adds	r3, #2
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005652:	4b3d      	ldr	r3, [pc, #244]	; (8005748 <HAL_GPIO_Init+0x354>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005676:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_GPIO_Init+0x354>)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800567c:	4b32      	ldr	r3, [pc, #200]	; (8005748 <HAL_GPIO_Init+0x354>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056a0:	4a29      	ldr	r2, [pc, #164]	; (8005748 <HAL_GPIO_Init+0x354>)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056a6:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_GPIO_Init+0x354>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ca:	4a1f      	ldr	r2, [pc, #124]	; (8005748 <HAL_GPIO_Init+0x354>)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056d0:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <HAL_GPIO_Init+0x354>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_GPIO_Init+0x354>)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3301      	adds	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	f67f ae84 	bls.w	8005410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	3724      	adds	r7, #36	; 0x24
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	40013800 	.word	0x40013800
 8005720:	40020000 	.word	0x40020000
 8005724:	40020400 	.word	0x40020400
 8005728:	40020800 	.word	0x40020800
 800572c:	40020c00 	.word	0x40020c00
 8005730:	40021000 	.word	0x40021000
 8005734:	40021400 	.word	0x40021400
 8005738:	40021800 	.word	0x40021800
 800573c:	40021c00 	.word	0x40021c00
 8005740:	40022000 	.word	0x40022000
 8005744:	40022400 	.word	0x40022400
 8005748:	40013c00 	.word	0x40013c00

0800574c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	887b      	ldrh	r3, [r7, #2]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e001      	b.n	800576e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
 8005788:	4613      	mov	r3, r2
 800578a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800578c:	787b      	ldrb	r3, [r7, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005798:	e003      	b.n	80057a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800579a:	887b      	ldrh	r3, [r7, #2]
 800579c:	041a      	lsls	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	619a      	str	r2, [r3, #24]
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057c0:	887a      	ldrh	r2, [r7, #2]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4013      	ands	r3, r2
 80057c6:	041a      	lsls	r2, r3, #16
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	43d9      	mvns	r1, r3
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	400b      	ands	r3, r1
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	619a      	str	r2, [r3, #24]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e12b      	b.n	8005a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc fcec 	bl	80021e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005848:	f000 ffb0 	bl	80067ac <HAL_RCC_GetPCLK1Freq>
 800584c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4a81      	ldr	r2, [pc, #516]	; (8005a58 <HAL_I2C_Init+0x274>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d807      	bhi.n	8005868 <HAL_I2C_Init+0x84>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4a80      	ldr	r2, [pc, #512]	; (8005a5c <HAL_I2C_Init+0x278>)
 800585c:	4293      	cmp	r3, r2
 800585e:	bf94      	ite	ls
 8005860:	2301      	movls	r3, #1
 8005862:	2300      	movhi	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e006      	b.n	8005876 <HAL_I2C_Init+0x92>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a7d      	ldr	r2, [pc, #500]	; (8005a60 <HAL_I2C_Init+0x27c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	bf94      	ite	ls
 8005870:	2301      	movls	r3, #1
 8005872:	2300      	movhi	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0e7      	b.n	8005a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a78      	ldr	r2, [pc, #480]	; (8005a64 <HAL_I2C_Init+0x280>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	0c9b      	lsrs	r3, r3, #18
 8005888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a6a      	ldr	r2, [pc, #424]	; (8005a58 <HAL_I2C_Init+0x274>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d802      	bhi.n	80058b8 <HAL_I2C_Init+0xd4>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3301      	adds	r3, #1
 80058b6:	e009      	b.n	80058cc <HAL_I2C_Init+0xe8>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	4a69      	ldr	r2, [pc, #420]	; (8005a68 <HAL_I2C_Init+0x284>)
 80058c4:	fba2 2303 	umull	r2, r3, r2, r3
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	3301      	adds	r3, #1
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	495c      	ldr	r1, [pc, #368]	; (8005a58 <HAL_I2C_Init+0x274>)
 80058e8:	428b      	cmp	r3, r1
 80058ea:	d819      	bhi.n	8005920 <HAL_I2C_Init+0x13c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1e59      	subs	r1, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005900:	400b      	ands	r3, r1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_I2C_Init+0x138>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1e59      	subs	r1, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fbb1 f3f3 	udiv	r3, r1, r3
 8005914:	3301      	adds	r3, #1
 8005916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800591a:	e051      	b.n	80059c0 <HAL_I2C_Init+0x1dc>
 800591c:	2304      	movs	r3, #4
 800591e:	e04f      	b.n	80059c0 <HAL_I2C_Init+0x1dc>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d111      	bne.n	800594c <HAL_I2C_Init+0x168>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	1e58      	subs	r0, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	440b      	add	r3, r1
 8005936:	fbb0 f3f3 	udiv	r3, r0, r3
 800593a:	3301      	adds	r3, #1
 800593c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e012      	b.n	8005972 <HAL_I2C_Init+0x18e>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1e58      	subs	r0, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	0099      	lsls	r1, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005962:	3301      	adds	r3, #1
 8005964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Init+0x196>
 8005976:	2301      	movs	r3, #1
 8005978:	e022      	b.n	80059c0 <HAL_I2C_Init+0x1dc>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10e      	bne.n	80059a0 <HAL_I2C_Init+0x1bc>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1e58      	subs	r0, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6859      	ldr	r1, [r3, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	440b      	add	r3, r1
 8005990:	fbb0 f3f3 	udiv	r3, r0, r3
 8005994:	3301      	adds	r3, #1
 8005996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	e00f      	b.n	80059c0 <HAL_I2C_Init+0x1dc>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e58      	subs	r0, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	0099      	lsls	r1, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b6:	3301      	adds	r3, #1
 80059b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	6809      	ldr	r1, [r1, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6911      	ldr	r1, [r2, #16]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	4311      	orrs	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	000186a0 	.word	0x000186a0
 8005a5c:	001e847f 	.word	0x001e847f
 8005a60:	003d08ff 	.word	0x003d08ff
 8005a64:	431bde83 	.word	0x431bde83
 8005a68:	10624dd3 	.word	0x10624dd3

08005a6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e034      	b.n	8005ae8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005a86:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f245 5255 	movw	r2, #21845	; 0x5555
 8005a90:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6852      	ldr	r2, [r2, #4]
 8005a9a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005aa6:	f7fd f8bb 	bl	8002c20 <HAL_GetTick>
 8005aaa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005aac:	e00f      	b.n	8005ace <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005aae:	f7fd f8b7 	bl	8002c20 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b31      	cmp	r3, #49	; 0x31
 8005aba:	d908      	bls.n	8005ace <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00c      	b.n	8005ae8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e8      	bne.n	8005aae <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0bf      	b.n	8005ca2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fbd4 	bl	80022e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6899      	ldr	r1, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68d9      	ldr	r1, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6919      	ldr	r1, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b33      	ldr	r3, [pc, #204]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005be0:	400b      	ands	r3, r1
 8005be2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6959      	ldr	r1, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b27      	ldr	r3, [pc, #156]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0206 	orr.w	r2, r2, #6
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	f000f800 	.word	0xf000f800

08005cb0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d023      	beq.n	8005d1a <HAL_LTDC_IRQHandler+0x6a>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f86f 	bl	8005df8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d023      	beq.n	8005d6c <HAL_LTDC_IRQHandler+0xbc>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01e      	beq.n	8005d6c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0202 	bic.w	r2, r2, #2
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2202      	movs	r2, #2
 8005d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d4c:	f043 0202 	orr.w	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f846 	bl	8005df8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <HAL_LTDC_IRQHandler+0xfe>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f82f 	bl	8005e0c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <HAL_LTDC_IRQHandler+0x140>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0208 	bic.w	r2, r2, #8
 8005dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f818 	bl	8005e20 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e34:	b5b0      	push	{r4, r5, r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_LTDC_ConfigLayer+0x1a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e02c      	b.n	8005ea8 <HAL_LTDC_ConfigLayer+0x74>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2134      	movs	r1, #52	; 0x34
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f811 	bl	8005eb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2201      	movs	r2, #1
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bdb0      	pop	{r4, r5, r7, pc}

08005eb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b089      	sub	sp, #36	; 0x24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ecc:	4413      	add	r3, r2
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	01db      	lsls	r3, r3, #7
 8005edc:	4413      	add	r3, r2
 8005ede:	3384      	adds	r3, #132	; 0x84
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	01d2      	lsls	r2, r2, #7
 8005eec:	440a      	add	r2, r1
 8005eee:	3284      	adds	r2, #132	; 0x84
 8005ef0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ef4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f06:	4413      	add	r3, r2
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	01db      	lsls	r3, r3, #7
 8005f14:	440b      	add	r3, r1
 8005f16:	3384      	adds	r3, #132	; 0x84
 8005f18:	4619      	mov	r1, r3
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f2e:	4413      	add	r3, r2
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	01db      	lsls	r3, r3, #7
 8005f3e:	4413      	add	r3, r2
 8005f40:	3384      	adds	r3, #132	; 0x84
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	01d2      	lsls	r2, r2, #7
 8005f4e:	440a      	add	r2, r1
 8005f50:	3284      	adds	r2, #132	; 0x84
 8005f52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f66:	4413      	add	r3, r2
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	01db      	lsls	r3, r3, #7
 8005f74:	440b      	add	r3, r1
 8005f76:	3384      	adds	r3, #132	; 0x84
 8005f78:	4619      	mov	r1, r3
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	01db      	lsls	r3, r3, #7
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3384      	adds	r3, #132	; 0x84
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	4611      	mov	r1, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	01d2      	lsls	r2, r2, #7
 8005f9a:	440a      	add	r2, r1
 8005f9c:	3284      	adds	r2, #132	; 0x84
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	01db      	lsls	r3, r3, #7
 8005fae:	4413      	add	r3, r2
 8005fb0:	3384      	adds	r3, #132	; 0x84
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	061b      	lsls	r3, r3, #24
 8005fd4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	01db      	lsls	r3, r3, #7
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3384      	adds	r3, #132	; 0x84
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006000:	461a      	mov	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	431a      	orrs	r2, r3
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	431a      	orrs	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4619      	mov	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	01db      	lsls	r3, r3, #7
 8006014:	440b      	add	r3, r1
 8006016:	3384      	adds	r3, #132	; 0x84
 8006018:	4619      	mov	r1, r3
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	01db      	lsls	r3, r3, #7
 800602a:	4413      	add	r3, r2
 800602c:	3384      	adds	r3, #132	; 0x84
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	4611      	mov	r1, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	01d2      	lsls	r2, r2, #7
 800603a:	440a      	add	r2, r1
 800603c:	3284      	adds	r2, #132	; 0x84
 800603e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006042:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	01db      	lsls	r3, r3, #7
 800604e:	4413      	add	r3, r2
 8006050:	3384      	adds	r3, #132	; 0x84
 8006052:	461a      	mov	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4413      	add	r3, r2
 8006066:	3384      	adds	r3, #132	; 0x84
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	4611      	mov	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	01d2      	lsls	r2, r2, #7
 8006074:	440a      	add	r2, r1
 8006076:	3284      	adds	r2, #132	; 0x84
 8006078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800607c:	f023 0307 	bic.w	r3, r3, #7
 8006080:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	6809      	ldr	r1, [r1, #0]
 800608e:	4608      	mov	r0, r1
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	01c9      	lsls	r1, r1, #7
 8006094:	4401      	add	r1, r0
 8006096:	3184      	adds	r1, #132	; 0x84
 8006098:	4313      	orrs	r3, r2
 800609a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	01db      	lsls	r3, r3, #7
 80060a6:	4413      	add	r3, r2
 80060a8:	3384      	adds	r3, #132	; 0x84
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	; 0x84
 80060ba:	461a      	mov	r2, r3
 80060bc:	2300      	movs	r3, #0
 80060be:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	01db      	lsls	r3, r3, #7
 80060ca:	4413      	add	r3, r2
 80060cc:	3384      	adds	r3, #132	; 0x84
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80060de:	2304      	movs	r3, #4
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e01b      	b.n	800611c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d102      	bne.n	80060f2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80060ec:	2303      	movs	r3, #3
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e014      	b.n	800611c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d00b      	beq.n	8006112 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d007      	beq.n	8006112 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006106:	2b03      	cmp	r3, #3
 8006108:	d003      	beq.n	8006112 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800610e:	2b07      	cmp	r3, #7
 8006110:	d102      	bne.n	8006118 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006112:	2302      	movs	r3, #2
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e001      	b.n	800611c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006118:	2301      	movs	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	01db      	lsls	r3, r3, #7
 8006126:	4413      	add	r3, r2
 8006128:	3384      	adds	r3, #132	; 0x84
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	4611      	mov	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	01d2      	lsls	r2, r2, #7
 8006136:	440a      	add	r2, r1
 8006138:	3284      	adds	r2, #132	; 0x84
 800613a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800613e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	041a      	lsls	r2, r3, #16
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6859      	ldr	r1, [r3, #4]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1acb      	subs	r3, r1, r3
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	3303      	adds	r3, #3
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	6809      	ldr	r1, [r1, #0]
 8006162:	4608      	mov	r0, r1
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	01c9      	lsls	r1, r1, #7
 8006168:	4401      	add	r1, r0
 800616a:	3184      	adds	r1, #132	; 0x84
 800616c:	4313      	orrs	r3, r2
 800616e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	01db      	lsls	r3, r3, #7
 800617a:	4413      	add	r3, r2
 800617c:	3384      	adds	r3, #132	; 0x84
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	4611      	mov	r1, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	01d2      	lsls	r2, r2, #7
 800618a:	440a      	add	r2, r1
 800618c:	3284      	adds	r2, #132	; 0x84
 800618e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006192:	f023 0307 	bic.w	r3, r3, #7
 8006196:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	01db      	lsls	r3, r3, #7
 80061a2:	4413      	add	r3, r2
 80061a4:	3384      	adds	r3, #132	; 0x84
 80061a6:	461a      	mov	r2, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	3384      	adds	r3, #132	; 0x84
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	4611      	mov	r1, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	01d2      	lsls	r2, r2, #7
 80061c8:	440a      	add	r2, r1
 80061ca:	3284      	adds	r2, #132	; 0x84
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	6013      	str	r3, [r2, #0]
}
 80061d2:	bf00      	nop
 80061d4:	3724      	adds	r7, #36	; 0x24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_PWREx_EnableOverDrive+0x90>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_PWREx_EnableOverDrive+0x90>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
 80061fa:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_PWREx_EnableOverDrive+0x90>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <HAL_PWREx_EnableOverDrive+0x94>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800620c:	f7fc fd08 	bl	8002c20 <HAL_GetTick>
 8006210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006212:	e009      	b.n	8006228 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006214:	f7fc fd04 	bl	8002c20 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006222:	d901      	bls.n	8006228 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e01f      	b.n	8006268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <HAL_PWREx_EnableOverDrive+0x98>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d1ee      	bne.n	8006214 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800623c:	f7fc fcf0 	bl	8002c20 <HAL_GetTick>
 8006240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006242:	e009      	b.n	8006258 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006244:	f7fc fcec 	bl	8002c20 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	d901      	bls.n	8006258 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e007      	b.n	8006268 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <HAL_PWREx_EnableOverDrive+0x98>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006264:	d1ee      	bne.n	8006244 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40023800 	.word	0x40023800
 8006274:	420e0040 	.word	0x420e0040
 8006278:	40007000 	.word	0x40007000
 800627c:	420e0044 	.word	0x420e0044

08006280 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af02      	add	r7, sp, #8
 8006286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006288:	f7fc fcca 	bl	8002c20 <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e069      	b.n	800636c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fc f859 	bl	8002364 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80062b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f85e 	bl	8006378 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	2120      	movs	r1, #32
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f856 	bl	8006394 <QSPI_WaitFlagStateUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80062ec:	7afb      	ldrb	r3, [r7, #11]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d137      	bne.n	8006362 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062fc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6852      	ldr	r2, [r2, #4]
 8006304:	0611      	lsls	r1, r2, #24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	4311      	orrs	r1, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	69d2      	ldr	r2, [r2, #28]
 8006310:	4311      	orrs	r1, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6a12      	ldr	r2, [r2, #32]
 8006316:	4311      	orrs	r1, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	430b      	orrs	r3, r1
 800631e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <HAL_QSPI_Init+0xf4>)
 8006328:	4013      	ands	r3, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6912      	ldr	r2, [r2, #16]
 800632e:	0411      	lsls	r1, r2, #16
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6952      	ldr	r2, [r2, #20]
 8006334:	4311      	orrs	r1, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6992      	ldr	r2, [r2, #24]
 800633a:	4311      	orrs	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	430b      	orrs	r3, r1
 8006342:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800636a:	7afb      	ldrb	r3, [r7, #11]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	ffe0f8fe 	.word	0xffe0f8fe

08006378 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063a4:	e01a      	b.n	80063dc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ac:	d016      	beq.n	80063dc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ae:	f7fc fc37 	bl	8002c20 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2204      	movs	r2, #4
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	f043 0201 	orr.w	r2, r3, #1
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e00e      	b.n	80063fa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1d6      	bne.n	80063a6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0cc      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006418:	4b68      	ldr	r3, [pc, #416]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d90c      	bls.n	8006440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b63      	ldr	r3, [pc, #396]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0b8      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006470:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a52      	ldr	r2, [pc, #328]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800647a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800647c:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	494d      	ldr	r1, [pc, #308]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d044      	beq.n	8006524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d119      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e07f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d003      	beq.n	80064c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d107      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e06f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d2:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e067      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 0203 	bic.w	r2, r3, #3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4934      	ldr	r1, [pc, #208]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064f4:	f7fc fb94 	bl	8002c20 <HAL_GetTick>
 80064f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fa:	e00a      	b.n	8006512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fc:	f7fc fb90 	bl	8002c20 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f241 3288 	movw	r2, #5000	; 0x1388
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e04f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006512:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 020c 	and.w	r2, r3, #12
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	429a      	cmp	r2, r3
 8006522:	d1eb      	bne.n	80064fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d20c      	bcs.n	800654c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b22      	ldr	r3, [pc, #136]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e032      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4916      	ldr	r1, [pc, #88]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	490e      	ldr	r1, [pc, #56]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800658a:	f000 f821 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <HAL_RCC_ClockConfig+0x1c0>)
 800659c:	5ccb      	ldrb	r3, [r1, r3]
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <HAL_RCC_ClockConfig+0x1c4>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_ClockConfig+0x1c8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fc f9f2 	bl	8002994 <HAL_InitTick>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023c00 	.word	0x40023c00
 80065c0:	40023800 	.word	0x40023800
 80065c4:	0800e1e8 	.word	0x0800e1e8
 80065c8:	20000000 	.word	0x20000000
 80065cc:	20000004 	.word	0x20000004

080065d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	2300      	movs	r3, #0
 80065e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065e8:	4b67      	ldr	r3, [pc, #412]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 030c 	and.w	r3, r3, #12
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d00d      	beq.n	8006610 <HAL_RCC_GetSysClockFreq+0x40>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	f200 80bd 	bhi.w	8006774 <HAL_RCC_GetSysClockFreq+0x1a4>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x34>
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_RCC_GetSysClockFreq+0x3a>
 8006602:	e0b7      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006604:	4b61      	ldr	r3, [pc, #388]	; (800678c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006606:	60bb      	str	r3, [r7, #8]
       break;
 8006608:	e0b7      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800660a:	4b61      	ldr	r3, [pc, #388]	; (8006790 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800660c:	60bb      	str	r3, [r7, #8]
      break;
 800660e:	e0b4      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006610:	4b5d      	ldr	r3, [pc, #372]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006618:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800661a:	4b5b      	ldr	r3, [pc, #364]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d04d      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006626:	4b58      	ldr	r3, [pc, #352]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006636:	f04f 0100 	mov.w	r1, #0
 800663a:	ea02 0800 	and.w	r8, r2, r0
 800663e:	ea03 0901 	and.w	r9, r3, r1
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	014b      	lsls	r3, r1, #5
 8006650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006654:	0142      	lsls	r2, r0, #5
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	ebb0 0008 	subs.w	r0, r0, r8
 800665e:	eb61 0109 	sbc.w	r1, r1, r9
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	018b      	lsls	r3, r1, #6
 800666c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006670:	0182      	lsls	r2, r0, #6
 8006672:	1a12      	subs	r2, r2, r0
 8006674:	eb63 0301 	sbc.w	r3, r3, r1
 8006678:	f04f 0000 	mov.w	r0, #0
 800667c:	f04f 0100 	mov.w	r1, #0
 8006680:	00d9      	lsls	r1, r3, #3
 8006682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006686:	00d0      	lsls	r0, r2, #3
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	eb12 0208 	adds.w	r2, r2, r8
 8006690:	eb43 0309 	adc.w	r3, r3, r9
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	0259      	lsls	r1, r3, #9
 800669e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80066a2:	0250      	lsls	r0, r2, #9
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	f7f9 fdac 	bl	8000210 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4613      	mov	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e04a      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c2:	4b31      	ldr	r3, [pc, #196]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	099b      	lsrs	r3, r3, #6
 80066c8:	461a      	mov	r2, r3
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	ea02 0400 	and.w	r4, r2, r0
 80066da:	ea03 0501 	and.w	r5, r3, r1
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	014b      	lsls	r3, r1, #5
 80066ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066f0:	0142      	lsls	r2, r0, #5
 80066f2:	4610      	mov	r0, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	1b00      	subs	r0, r0, r4
 80066f8:	eb61 0105 	sbc.w	r1, r1, r5
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	018b      	lsls	r3, r1, #6
 8006706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800670a:	0182      	lsls	r2, r0, #6
 800670c:	1a12      	subs	r2, r2, r0
 800670e:	eb63 0301 	sbc.w	r3, r3, r1
 8006712:	f04f 0000 	mov.w	r0, #0
 8006716:	f04f 0100 	mov.w	r1, #0
 800671a:	00d9      	lsls	r1, r3, #3
 800671c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006720:	00d0      	lsls	r0, r2, #3
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	1912      	adds	r2, r2, r4
 8006728:	eb45 0303 	adc.w	r3, r5, r3
 800672c:	f04f 0000 	mov.w	r0, #0
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	0299      	lsls	r1, r3, #10
 8006736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800673a:	0290      	lsls	r0, r2, #10
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	f7f9 fd60 	bl	8000210 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4613      	mov	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	3301      	adds	r3, #1
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	60bb      	str	r3, [r7, #8]
      break;
 8006772:	e002      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006776:	60bb      	str	r3, [r7, #8]
      break;
 8006778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800677a:	68bb      	ldr	r3, [r7, #8]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006786:	bf00      	nop
 8006788:	40023800 	.word	0x40023800
 800678c:	00f42400 	.word	0x00f42400
 8006790:	007a1200 	.word	0x007a1200

08006794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800679a:	681b      	ldr	r3, [r3, #0]
}
 800679c:	4618      	mov	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000000 	.word	0x20000000

080067ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067b0:	f7ff fff0 	bl	8006794 <HAL_RCC_GetHCLKFreq>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	0a9b      	lsrs	r3, r3, #10
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c2:	5ccb      	ldrb	r3, [r1, r3]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40023800 	.word	0x40023800
 80067d0:	0800e1f8 	.word	0x0800e1f8

080067d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067d8:	f7ff ffdc 	bl	8006794 <HAL_RCC_GetHCLKFreq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	0b5b      	lsrs	r3, r3, #13
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	4903      	ldr	r1, [pc, #12]	; (80067f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ea:	5ccb      	ldrb	r3, [r1, r3]
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40023800 	.word	0x40023800
 80067f8:	0800e1f8 	.word	0x0800e1f8

080067fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	220f      	movs	r2, #15
 800680a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800680c:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_RCC_GetClockConfig+0x5c>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0203 	and.w	r2, r3, #3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <HAL_RCC_GetClockConfig+0x5c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006824:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <HAL_RCC_GetClockConfig+0x5c>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_GetClockConfig+0x5c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <HAL_RCC_GetClockConfig+0x60>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 020f 	and.w	r2, r3, #15
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	601a      	str	r2, [r3, #0]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	40023c00 	.word	0x40023c00

08006860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	4963      	ldr	r1, [pc, #396]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80068aa:	4b5e      	ldr	r3, [pc, #376]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	495a      	ldr	r1, [pc, #360]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d075      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068e4:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ea:	f7fc f999 	bl	8002c20 <HAL_GetTick>
 80068ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068f2:	f7fc f995 	bl	8002c20 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1dc      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006904:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f0      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	019a      	lsls	r2, r3, #6
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	071b      	lsls	r3, r3, #28
 8006928:	493e      	ldr	r1, [pc, #248]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	019a      	lsls	r2, r3, #6
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	061b      	lsls	r3, r3, #24
 8006956:	431a      	orrs	r2, r3
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	071b      	lsls	r3, r3, #28
 800695c:	4931      	ldr	r1, [pc, #196]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006964:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696a:	f023 021f 	bic.w	r2, r3, #31
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	3b01      	subs	r3, #1
 8006974:	492b      	ldr	r1, [pc, #172]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00d      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	019a      	lsls	r2, r3, #6
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	071b      	lsls	r3, r3, #28
 800699c:	4921      	ldr	r1, [pc, #132]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069a4:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069aa:	f7fc f939 	bl	8002c20 <HAL_GetTick>
 80069ae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069b2:	f7fc f935 	bl	8002c20 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e17c      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d112      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10c      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80ce 	beq.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80069fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fe:	f040 80c8 	bne.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a08:	f7fc f90a 	bl	8002c20 <HAL_GetTick>
 8006a0c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a0e:	e00f      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a10:	f7fc f906 	bl	8002c20 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d908      	bls.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e14d      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800
 8006a28:	42470068 	.word	0x42470068
 8006a2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a30:	4ba5      	ldr	r3, [pc, #660]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d0e8      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02e      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006a4a:	4b9f      	ldr	r3, [pc, #636]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	3301      	adds	r3, #1
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a62:	0f1b      	lsrs	r3, r3, #28
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	019a      	lsls	r2, r3, #6
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	3b01      	subs	r3, #1
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	071b      	lsls	r3, r3, #28
 8006a86:	4990      	ldr	r1, [pc, #576]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a8e:	4b8e      	ldr	r3, [pc, #568]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	4989      	ldr	r1, [pc, #548]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02c      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006ab4:	4b84      	ldr	r3, [pc, #528]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ac6:	4b80      	ldr	r3, [pc, #512]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	0e1b      	lsrs	r3, r3, #24
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	019a      	lsls	r2, r3, #6
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	071b      	lsls	r3, r3, #28
 8006af0:	4975      	ldr	r1, [pc, #468]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006af8:	4b73      	ldr	r3, [pc, #460]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	4970      	ldr	r1, [pc, #448]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d024      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b22:	d11f      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b24:	4b68      	ldr	r3, [pc, #416]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	0e1b      	lsrs	r3, r3, #24
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b32:	4b65      	ldr	r3, [pc, #404]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	019a      	lsls	r2, r3, #6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	431a      	orrs	r2, r3
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	071b      	lsls	r3, r3, #28
 8006b5c:	495a      	ldr	r1, [pc, #360]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b6a:	f7fc f859 	bl	8002c20 <HAL_GetTick>
 8006b6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b72:	f7fc f855 	bl	8002c20 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e09c      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b84:	4b50      	ldr	r3, [pc, #320]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b90:	d1ef      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 8083 	beq.w	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60bb      	str	r3, [r7, #8]
 8006ba4:	4b48      	ldr	r3, [pc, #288]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	4a47      	ldr	r2, [pc, #284]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bae:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb0:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bbc:	4b44      	ldr	r3, [pc, #272]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a43      	ldr	r2, [pc, #268]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc8:	f7fc f82a 	bl	8002c20 <HAL_GetTick>
 8006bcc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bd0:	f7fc f826 	bl	8002c20 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e06d      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006be2:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bee:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d028      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c0c:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c14:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c16:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c22:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d114      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c34:	f7fb fff4 	bl	8002c20 <HAL_GetTick>
 8006c38:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3a:	e00a      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f7fb fff0 	bl	8002c20 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e035      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c52:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0ee      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6a:	d10d      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006c6c:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	4911      	ldr	r1, [pc, #68]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
 8006c86:	e005      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006c88:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a0e      	ldr	r2, [pc, #56]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c92:	6093      	str	r3, [r2, #8]
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca0:	4909      	ldr	r1, [pc, #36]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006cb8:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006cba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	42470070 	.word	0x42470070
 8006cd0:	40007000 	.word	0x40007000
 8006cd4:	42470e40 	.word	0x42470e40
 8006cd8:	424711e0 	.word	0x424711e0

08006cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e270      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d075      	beq.n	8006de6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006cfa:	4ba3      	ldr	r3, [pc, #652]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d00c      	beq.n	8006d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d06:	4ba0      	ldr	r3, [pc, #640]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d112      	bne.n	8006d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d12:	4b9d      	ldr	r3, [pc, #628]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d1e:	d10b      	bne.n	8006d38 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d20:	4b99      	ldr	r3, [pc, #612]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05b      	beq.n	8006de4 <HAL_RCC_OscConfig+0x108>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d157      	bne.n	8006de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e24b      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d40:	d106      	bne.n	8006d50 <HAL_RCC_OscConfig+0x74>
 8006d42:	4b91      	ldr	r3, [pc, #580]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a90      	ldr	r2, [pc, #576]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e01d      	b.n	8006d8c <HAL_RCC_OscConfig+0xb0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCC_OscConfig+0x98>
 8006d5a:	4b8b      	ldr	r3, [pc, #556]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a8a      	ldr	r2, [pc, #552]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a87      	ldr	r2, [pc, #540]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e00b      	b.n	8006d8c <HAL_RCC_OscConfig+0xb0>
 8006d74:	4b84      	ldr	r3, [pc, #528]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a83      	ldr	r2, [pc, #524]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a80      	ldr	r2, [pc, #512]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fb ff44 	bl	8002c20 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fb ff40 	bl	8002c20 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	; 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e210      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dae:	4b76      	ldr	r3, [pc, #472]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0xc0>
 8006dba:	e014      	b.n	8006de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbc:	f7fb ff30 	bl	8002c20 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc4:	f7fb ff2c 	bl	8002c20 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b64      	cmp	r3, #100	; 0x64
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e1fc      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dd6:	4b6c      	ldr	r3, [pc, #432]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f0      	bne.n	8006dc4 <HAL_RCC_OscConfig+0xe8>
 8006de2:	e000      	b.n	8006de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d063      	beq.n	8006eba <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006df2:	4b65      	ldr	r3, [pc, #404]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dfe:	4b62      	ldr	r3, [pc, #392]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11c      	bne.n	8006e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0a:	4b5f      	ldr	r3, [pc, #380]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d116      	bne.n	8006e44 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_RCC_OscConfig+0x152>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e1d0      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2e:	4b56      	ldr	r3, [pc, #344]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4952      	ldr	r1, [pc, #328]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e42:	e03a      	b.n	8006eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e4c:	4b4f      	ldr	r3, [pc, #316]	; (8006f8c <HAL_RCC_OscConfig+0x2b0>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e52:	f7fb fee5 	bl	8002c20 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e5a:	f7fb fee1 	bl	8002c20 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e1b1      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e6c:	4b46      	ldr	r3, [pc, #280]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e78:	4b43      	ldr	r3, [pc, #268]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4940      	ldr	r1, [pc, #256]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]
 8006e8c:	e015      	b.n	8006eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <HAL_RCC_OscConfig+0x2b0>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fb fec4 	bl	8002c20 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e9c:	f7fb fec0 	bl	8002c20 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e190      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eae:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d030      	beq.n	8006f28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d016      	beq.n	8006efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ece:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <HAL_RCC_OscConfig+0x2b4>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fb fea4 	bl	8002c20 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006edc:	f7fb fea0 	bl	8002c20 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e170      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eee:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x200>
 8006efa:	e015      	b.n	8006f28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006efc:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <HAL_RCC_OscConfig+0x2b4>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f02:	f7fb fe8d 	bl	8002c20 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f0a:	f7fb fe89 	bl	8002c20 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e159      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f0      	bne.n	8006f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80a0 	beq.w	8007076 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10f      	bne.n	8006f66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	4a0e      	ldr	r2, [pc, #56]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f54:	6413      	str	r3, [r2, #64]	; 0x40
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	60bb      	str	r3, [r7, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_RCC_OscConfig+0x2b8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d121      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <HAL_RCC_OscConfig+0x2b8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a07      	ldr	r2, [pc, #28]	; (8006f94 <HAL_RCC_OscConfig+0x2b8>)
 8006f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f7e:	f7fb fe4f 	bl	8002c20 <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f84:	e011      	b.n	8006faa <HAL_RCC_OscConfig+0x2ce>
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	42470000 	.word	0x42470000
 8006f90:	42470e80 	.word	0x42470e80
 8006f94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f98:	f7fb fe42 	bl	8002c20 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e112      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006faa:	4b8b      	ldr	r3, [pc, #556]	; (80071d8 <HAL_RCC_OscConfig+0x4fc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCC_OscConfig+0x2f0>
 8006fbe:	4b87      	ldr	r3, [pc, #540]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	4a86      	ldr	r2, [pc, #536]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006fca:	e01c      	b.n	8007006 <HAL_RCC_OscConfig+0x32a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCC_OscConfig+0x312>
 8006fd4:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a80      	ldr	r2, [pc, #512]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fda:	f043 0304 	orr.w	r3, r3, #4
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	4b7e      	ldr	r3, [pc, #504]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe4:	4a7d      	ldr	r2, [pc, #500]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6713      	str	r3, [r2, #112]	; 0x70
 8006fec:	e00b      	b.n	8007006 <HAL_RCC_OscConfig+0x32a>
 8006fee:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a7a      	ldr	r2, [pc, #488]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffa:	4b78      	ldr	r3, [pc, #480]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a77      	ldr	r2, [pc, #476]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700e:	f7fb fe07 	bl	8002c20 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007014:	e00a      	b.n	800702c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007016:	f7fb fe03 	bl	8002c20 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e0d1      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702c:	4b6b      	ldr	r3, [pc, #428]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ee      	beq.n	8007016 <HAL_RCC_OscConfig+0x33a>
 8007038:	e014      	b.n	8007064 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703a:	f7fb fdf1 	bl	8002c20 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007040:	e00a      	b.n	8007058 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fb fded 	bl	8002c20 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0bb      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007058:	4b60      	ldr	r3, [pc, #384]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ee      	bne.n	8007042 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d105      	bne.n	8007076 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706a:	4b5c      	ldr	r3, [pc, #368]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	4a5b      	ldr	r2, [pc, #364]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8007070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80a7 	beq.w	80071ce <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007080:	4b56      	ldr	r3, [pc, #344]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b08      	cmp	r3, #8
 800708a:	d060      	beq.n	800714e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d145      	bne.n	8007120 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007094:	4b52      	ldr	r3, [pc, #328]	; (80071e0 <HAL_RCC_OscConfig+0x504>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fb fdc1 	bl	8002c20 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a2:	f7fb fdbd 	bl	8002c20 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e08d      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f0      	bne.n	80070a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	019b      	lsls	r3, r3, #6
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	3b01      	subs	r3, #1
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	061b      	lsls	r3, r3, #24
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	071b      	lsls	r3, r3, #28
 80070ec:	493b      	ldr	r1, [pc, #236]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f2:	4b3b      	ldr	r3, [pc, #236]	; (80071e0 <HAL_RCC_OscConfig+0x504>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fb fd92 	bl	8002c20 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007100:	f7fb fd8e 	bl	8002c20 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e05e      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007112:	4b32      	ldr	r3, [pc, #200]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x424>
 800711e:	e056      	b.n	80071ce <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007120:	4b2f      	ldr	r3, [pc, #188]	; (80071e0 <HAL_RCC_OscConfig+0x504>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007126:	f7fb fd7b 	bl	8002c20 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712e:	f7fb fd77 	bl	8002c20 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e047      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007140:	4b26      	ldr	r3, [pc, #152]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f0      	bne.n	800712e <HAL_RCC_OscConfig+0x452>
 800714c:	e03f      	b.n	80071ce <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e03a      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <HAL_RCC_OscConfig+0x500>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d030      	beq.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007172:	429a      	cmp	r2, r3
 8007174:	d129      	bne.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007180:	429a      	cmp	r2, r3
 8007182:	d122      	bne.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800718a:	4013      	ands	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007190:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007192:	4293      	cmp	r3, r2
 8007194:	d119      	bne.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	3b01      	subs	r3, #1
 80071a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d10f      	bne.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d107      	bne.n	80071ca <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d001      	beq.n	80071ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40007000 	.word	0x40007000
 80071dc:	40023800 	.word	0x40023800
 80071e0:	42470060 	.word	0x42470060

080071e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e022      	b.n	800723c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fb f925 	bl	8002458 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2203      	movs	r2, #3
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f814 	bl	8007244 <HAL_SD_InitCard>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e00a      	b.n	800723c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007244:	b5b0      	push	{r4, r5, r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af04      	add	r7, sp, #16
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007260:	2376      	movs	r3, #118	; 0x76
 8007262:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681d      	ldr	r5, [r3, #0]
 8007268:	466c      	mov	r4, sp
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007276:	f107 0308 	add.w	r3, r7, #8
 800727a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800727c:	4628      	mov	r0, r5
 800727e:	f002 fb11 	bl	80098a4 <SDIO_Init>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e04c      	b.n	800732e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007294:	4b28      	ldr	r3, [pc, #160]	; (8007338 <HAL_SD_InitCard+0xf4>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 fb49 	bl	8009936 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80072a4:	4b24      	ldr	r3, [pc, #144]	; (8007338 <HAL_SD_InitCard+0xf4>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 ffee 	bl	800828c <SD_PowerON>
 80072b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e02e      	b.n	800732e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 ff0f 	bl	80080f4 <SD_InitCard>
 80072d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e01b      	b.n	800732e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 fbac 	bl	8009a5c <SDMMC_CmdBlockLength>
 8007304:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00f      	beq.n	800732c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <HAL_SD_InitCard+0xf8>)
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	; 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bdb0      	pop	{r4, r5, r7, pc}
 8007336:	bf00      	nop
 8007338:	422580a0 	.word	0x422580a0
 800733c:	004005ff 	.word	0x004005ff

08007340 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08c      	sub	sp, #48	; 0x30
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0be      	b.n	80074e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	f040 80b7 	bne.w	80074e4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800737c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	441a      	add	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	429a      	cmp	r2, r3
 8007388:	d907      	bls.n	800739a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e0a5      	b.n	80074e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2203      	movs	r2, #3
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80073b8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	4a4c      	ldr	r2, [pc, #304]	; (80074f0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80073c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	4a4b      	ldr	r2, [pc, #300]	; (80074f4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80073c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	2200      	movs	r2, #0
 80073d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3380      	adds	r3, #128	; 0x80
 8007400:	4619      	mov	r1, r3
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	025b      	lsls	r3, r3, #9
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	f7fc fd75 	bl	8003ef8 <HAL_DMA_Start_IT>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007422:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a33      	ldr	r2, [pc, #204]	; (80074f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e050      	b.n	80074e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007444:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	2b01      	cmp	r3, #1
 8007450:	d002      	beq.n	8007458 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	025b      	lsls	r3, r3, #9
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007458:	f04f 33ff 	mov.w	r3, #4294967295
 800745c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	025b      	lsls	r3, r3, #9
 8007462:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007464:	2390      	movs	r3, #144	; 0x90
 8007466:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007468:	2302      	movs	r3, #2
 800746a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800746c:	2300      	movs	r3, #0
 800746e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007470:	2301      	movs	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f107 0210 	add.w	r2, r7, #16
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f002 fac0 	bl	8009a04 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d90a      	bls.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2282      	movs	r2, #130	; 0x82
 800748e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007496:	4618      	mov	r0, r3
 8007498:	f002 fb24 	bl	8009ae4 <SDMMC_CmdReadMultiBlock>
 800749c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800749e:	e009      	b.n	80074b4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2281      	movs	r2, #129	; 0x81
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ac:	4618      	mov	r0, r3
 80074ae:	f002 faf7 	bl	8009aa0 <SDMMC_CmdReadSingleBlock>
 80074b2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a0e      	ldr	r2, [pc, #56]	; (80074f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e002      	b.n	80074e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3730      	adds	r7, #48	; 0x30
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	08007f03 	.word	0x08007f03
 80074f4:	08007f75 	.word	0x08007f75
 80074f8:	004005ff 	.word	0x004005ff
 80074fc:	4225858c 	.word	0x4225858c

08007500 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	; 0x30
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0c1      	b.n	80076ac <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 80ba 	bne.w	80076aa <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800753c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	441a      	add	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007546:	429a      	cmp	r2, r3
 8007548:	d907      	bls.n	800755a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e0a8      	b.n	80076ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 021a 	orr.w	r2, r2, #26
 8007578:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	4a4d      	ldr	r2, [pc, #308]	; (80076b4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	4a4c      	ldr	r2, [pc, #304]	; (80076b8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007588:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2200      	movs	r2, #0
 8007590:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	2b01      	cmp	r3, #1
 8007598:	d002      	beq.n	80075a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d90a      	bls.n	80075bc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	22a0      	movs	r2, #160	; 0xa0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b2:	4618      	mov	r0, r3
 80075b4:	f002 fada 	bl	8009b6c <SDMMC_CmdWriteMultiBlock>
 80075b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075ba:	e009      	b.n	80075d0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2290      	movs	r2, #144	; 0x90
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c8:	4618      	mov	r0, r3
 80075ca:	f002 faad 	bl	8009b28 <SDMMC_CmdWriteSingleBlock>
 80075ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a38      	ldr	r2, [pc, #224]	; (80076bc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e057      	b.n	80076ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80075fc:	4b30      	ldr	r3, [pc, #192]	; (80076c0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	2240      	movs	r2, #64	; 0x40
 8007608:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3380      	adds	r3, #128	; 0x80
 8007632:	461a      	mov	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	025b      	lsls	r3, r3, #9
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	f7fc fc5d 	bl	8003ef8 <HAL_DMA_Start_IT>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01a      	beq.n	800767a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 021a 	bic.w	r2, r2, #26
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e018      	b.n	80076ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	025b      	lsls	r3, r3, #9
 8007684:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007686:	2390      	movs	r3, #144	; 0x90
 8007688:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800768e:	2300      	movs	r3, #0
 8007690:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007692:	2301      	movs	r3, #1
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f107 0210 	add.w	r2, r7, #16
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f002 f9af 	bl	8009a04 <SDIO_ConfigData>

      return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3730      	adds	r7, #48	; 0x30
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	08007ed9 	.word	0x08007ed9
 80076b8:	08007f75 	.word	0x08007f75
 80076bc:	004005ff 	.word	0x004005ff
 80076c0:	4225858c 	.word	0x4225858c

080076c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_SD_IRQHandler+0x2e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ffed 	bl	80086ca <SD_Read_IT>
 80076f0:	e155      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 808f 	beq.w	8007820 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800770a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800771a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800771e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d039      	beq.n	80077ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <HAL_SD_IRQHandler+0x8a>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d011      	beq.n	8007772 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4618      	mov	r0, r3
 8007754:	f002 fa2c 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 8007758:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f91f 	bl	80079b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f240 523a 	movw	r2, #1338	; 0x53a
 800777a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_SD_IRQHandler+0xda>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f002 fe9a 	bl	800a4d8 <HAL_SD_RxCpltCallback>
 80077a4:	e0fb      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f002 fe8c 	bl	800a4c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077ac:	e0f7      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80f2 	beq.w	800799e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d011      	beq.n	80077e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f002 f9f1 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 80077ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8e4 	bl	80079b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f040 80d5 	bne.w	800799e <HAL_SD_IRQHandler+0x2da>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f040 80cf 	bne.w	800799e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0208 	bic.w	r2, r2, #8
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f002 fe53 	bl	800a4c4 <HAL_SD_TxCpltCallback>
}
 800781e:	e0be      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <HAL_SD_IRQHandler+0x17c>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 ff97 	bl	800876c <SD_Write_IT>
 800783e:	e0ae      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80a7 	beq.w	800799e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007862:	f043 0202 	orr.w	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	f043 0208 	orr.w	r2, r3, #8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	f043 0210 	orr.w	r2, r3, #16
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80078d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f002 f96a 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 80078dc:	4602      	mov	r2, r0
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f855 	bl	80079b0 <HAL_SD_ErrorCallback>
}
 8007906:	e04a      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790e:	2b00      	cmp	r3, #0
 8007910:	d045      	beq.n	800799e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <HAL_SD_IRQHandler+0x262>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <HAL_SD_IRQHandler+0x2e4>)
 800792c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc fb38 	bl	8003fa8 <HAL_DMA_Abort_IT>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d02f      	beq.n	800799e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fb68 	bl	8008018 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007948:	e029      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <HAL_SD_IRQHandler+0x29a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d011      	beq.n	8007982 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a12      	ldr	r2, [pc, #72]	; (80079ac <HAL_SD_IRQHandler+0x2e8>)
 8007964:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	4618      	mov	r0, r3
 800796c:	f7fc fb1c 	bl	8003fa8 <HAL_DMA_Abort_IT>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d013      	beq.n	800799e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fb83 	bl	8008086 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007980:	e00d      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f002 fd8a 	bl	800a4b0 <HAL_SD_AbortCallback>
}
 800799c:	e7ff      	b.n	800799e <HAL_SD_IRQHandler+0x2da>
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	08008019 	.word	0x08008019
 80079ac:	08008087 	.word	0x08008087

080079b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d2:	0f9b      	lsrs	r3, r3, #30
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079de:	0e9b      	lsrs	r3, r3, #26
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f0:	0e1b      	lsrs	r3, r3, #24
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a24:	0d1b      	lsrs	r3, r3, #20
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a42:	0bdb      	lsrs	r3, r3, #15
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a54:	0b9b      	lsrs	r3, r3, #14
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a66:	0b5b      	lsrs	r3, r3, #13
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a78:	0b1b      	lsrs	r3, r3, #12
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d163      	bne.n	8007b5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	009a      	lsls	r2, r3, #2
 8007a9a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007aa4:	0f92      	lsrs	r2, r2, #30
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab0:	0edb      	lsrs	r3, r3, #27
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac2:	0e1b      	lsrs	r3, r3, #24
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad4:	0d5b      	lsrs	r3, r3, #21
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae6:	0c9b      	lsrs	r3, r3, #18
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af8:	0bdb      	lsrs	r3, r3, #15
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0307 	and.w	r3, r3, #7
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	7e1b      	ldrb	r3, [r3, #24]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b26:	fb02 f203 	mul.w	r2, r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	7a1b      	ldrb	r3, [r3, #8]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b48:	0a52      	lsrs	r2, r2, #9
 8007b4a:	fb02 f203 	mul.w	r2, r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b58:	661a      	str	r2, [r3, #96]	; 0x60
 8007b5a:	e031      	b.n	8007bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d11d      	bne.n	8007ba0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b68:	041b      	lsls	r3, r3, #16
 8007b6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b72:	0c1b      	lsrs	r3, r3, #16
 8007b74:	431a      	orrs	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	029a      	lsls	r2, r3, #10
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	661a      	str	r2, [r3, #96]	; 0x60
 8007b9e:	e00f      	b.n	8007bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a58      	ldr	r2, [pc, #352]	; (8007d08 <HAL_SD_GetCardCSD+0x344>)
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e09d      	b.n	8007cfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc4:	0b9b      	lsrs	r3, r3, #14
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd6:	09db      	lsrs	r3, r3, #7
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	0fdb      	lsrs	r3, r3, #31
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	0f5b      	lsrs	r3, r3, #29
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	0e9b      	lsrs	r3, r3, #26
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c28:	0d9b      	lsrs	r3, r3, #22
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 030f 	and.w	r3, r3, #15
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3a:	0d5b      	lsrs	r3, r3, #21
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	0bdb      	lsrs	r3, r3, #15
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	0b9b      	lsrs	r3, r3, #14
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	0b5b      	lsrs	r3, r3, #13
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	0b1b      	lsrs	r3, r3, #12
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	0a9b      	lsrs	r3, r3, #10
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	0a1b      	lsrs	r3, r3, #8
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	004005ff 	.word	0x004005ff

08007d0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d64:	b5b0      	push	{r4, r5, r7, lr}
 8007d66:	b08e      	sub	sp, #56	; 0x38
 8007d68:	af04      	add	r7, sp, #16
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2203      	movs	r2, #3
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d02e      	beq.n	8007de2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8a:	d106      	bne.n	8007d9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38
 8007d98:	e029      	b.n	8007dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da0:	d10a      	bne.n	8007db8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb28 	bl	80083f8 <SD_WideBus_Enable>
 8007da8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
 8007db6:	e01a      	b.n	8007dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fb65 	bl	800848e <SD_WideBus_Disable>
 8007dc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8007dd2:	e00c      	b.n	8007dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
 8007de0:	e005      	b.n	8007dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a26      	ldr	r2, [pc, #152]	; (8007e94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e0c:	e01f      	b.n	8007e4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681d      	ldr	r5, [r3, #0]
 8007e34:	466c      	mov	r4, sp
 8007e36:	f107 0314 	add.w	r3, r7, #20
 8007e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f001 fd2b 	bl	80098a4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fe00 	bl	8009a5c <SDMMC_CmdBlockLength>
 8007e5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00c      	beq.n	8007e7e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bdb0      	pop	{r4, r5, r7, pc}
 8007e92:	bf00      	nop
 8007e94:	004005ff 	.word	0x004005ff

08007e98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa7c 	bl	80083a8 <SD_SendStatus>
 8007eb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	0a5b      	lsrs	r3, r3, #9
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007ece:	693b      	ldr	r3, [r7, #16]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	2b82      	cmp	r3, #130	; 0x82
 8007f16:	d111      	bne.n	8007f3c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fe47 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 8007f22:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	431a      	orrs	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fd3a 	bl	80079b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0208 	bic.w	r2, r2, #8
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f002 fab7 	bl	800a4d8 <HAL_SD_RxCpltCallback>
#endif
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fc f9bc 	bl	8004300 <HAL_DMA_GetError>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d03e      	beq.n	800800c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f94:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d002      	beq.n	8007faa <SD_DMAError+0x36>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d12d      	bne.n	8008006 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <SD_DMAError+0xa0>)
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007fc0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007fce:	6978      	ldr	r0, [r7, #20]
 8007fd0:	f7ff ff62 	bl	8007e98 <HAL_SD_GetCardState>
 8007fd4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b06      	cmp	r3, #6
 8007fda:	d002      	beq.n	8007fe2 <SD_DMAError+0x6e>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d10a      	bne.n	8007ff8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fde2 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 8007fec:	4602      	mov	r2, r0
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008006:	6978      	ldr	r0, [r7, #20]
 8008008:	f7ff fcd2 	bl	80079b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800800c:	bf00      	nop
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	004005ff 	.word	0x004005ff

08008018 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f240 523a 	movw	r2, #1338	; 0x53a
 800802e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff ff31 	bl	8007e98 <HAL_SD_GetCardState>
 8008036:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b06      	cmp	r3, #6
 800804a:	d002      	beq.n	8008052 <SD_DMATxAbort+0x3a>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b05      	cmp	r3, #5
 8008050:	d10a      	bne.n	8008068 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4618      	mov	r0, r3
 8008058:	f001 fdaa 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 800805c:	4602      	mov	r2, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	431a      	orrs	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f002 fa1d 	bl	800a4b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008076:	e002      	b.n	800807e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff fc99 	bl	80079b0 <HAL_SD_ErrorCallback>
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f240 523a 	movw	r2, #1338	; 0x53a
 800809c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fefa 	bl	8007e98 <HAL_SD_GetCardState>
 80080a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d002      	beq.n	80080c0 <SD_DMARxAbort+0x3a>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d10a      	bne.n	80080d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fd73 	bl	8009bb0 <SDMMC_CmdStopTransfer>
 80080ca:	4602      	mov	r2, r0
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f002 f9e6 	bl	800a4b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80080e4:	e002      	b.n	80080ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fc62 	bl	80079b0 <HAL_SD_ErrorCallback>
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080f4:	b5b0      	push	{r4, r5, r7, lr}
 80080f6:	b094      	sub	sp, #80	; 0x50
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80080fc:	2301      	movs	r3, #1
 80080fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fc25 	bl	8009954 <SDIO_GetPowerState>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008114:	e0b6      	b.n	8008284 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811a:	2b03      	cmp	r3, #3
 800811c:	d02f      	beq.n	800817e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fe4e 	bl	8009dc4 <SDMMC_CmdSendCID>
 8008128:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800812a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <SD_InitCard+0x40>
    {
      return errorstate;
 8008130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008132:	e0a7      	b.n	8008284 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f001 fc4f 	bl	80099de <SDIO_GetResponse>
 8008140:	4602      	mov	r2, r0
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2104      	movs	r1, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f001 fc46 	bl	80099de <SDIO_GetResponse>
 8008152:	4602      	mov	r2, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2108      	movs	r1, #8
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fc3d 	bl	80099de <SDIO_GetResponse>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	210c      	movs	r1, #12
 8008170:	4618      	mov	r0, r3
 8008172:	f001 fc34 	bl	80099de <SDIO_GetResponse>
 8008176:	4602      	mov	r2, r0
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	2b03      	cmp	r3, #3
 8008184:	d00d      	beq.n	80081a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f107 020e 	add.w	r2, r7, #14
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fe54 	bl	8009e3e <SDMMC_CmdSetRelAdd>
 8008196:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	e070      	b.n	8008284 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d036      	beq.n	8008218 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f001 fe1e 	bl	8009e00 <SDMMC_CmdSendCSD>
 80081c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	e059      	b.n	8008284 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fc01 	bl	80099de <SDIO_GetResponse>
 80081dc:	4602      	mov	r2, r0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2104      	movs	r1, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fbf8 	bl	80099de <SDIO_GetResponse>
 80081ee:	4602      	mov	r2, r0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2108      	movs	r1, #8
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 fbef 	bl	80099de <SDIO_GetResponse>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	210c      	movs	r1, #12
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fbe6 	bl	80099de <SDIO_GetResponse>
 8008212:	4602      	mov	r2, r0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2104      	movs	r1, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fbdd 	bl	80099de <SDIO_GetResponse>
 8008224:	4603      	mov	r3, r0
 8008226:	0d1a      	lsrs	r2, r3, #20
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800822c:	f107 0310 	add.w	r3, r7, #16
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff fbc6 	bl	80079c4 <HAL_SD_GetCardCSD>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800823e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008242:	e01f      	b.n	8008284 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6819      	ldr	r1, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	041b      	lsls	r3, r3, #16
 800824e:	461a      	mov	r2, r3
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	4608      	mov	r0, r1
 8008256:	f001 fccd 	bl	8009bf4 <SDMMC_CmdSelDesel>
 800825a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <SD_InitCard+0x172>
  {
    return errorstate;
 8008262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008264:	e00e      	b.n	8008284 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681d      	ldr	r5, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	466c      	mov	r4, sp
 800826e:	f103 0210 	add.w	r2, r3, #16
 8008272:	ca07      	ldmia	r2, {r0, r1, r2}
 8008274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008278:	3304      	adds	r3, #4
 800827a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800827c:	4628      	mov	r0, r5
 800827e:	f001 fb11 	bl	80098a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3740      	adds	r7, #64	; 0x40
 8008288:	46bd      	mov	sp, r7
 800828a:	bdb0      	pop	{r4, r5, r7, pc}

0800828c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fcc8 	bl	8009c3a <SDMMC_CmdGoIdleState>
 80082aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	e072      	b.n	800839c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fcdb 	bl	8009c76 <SDMMC_CmdOperCond>
 80082c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00d      	beq.n	80082e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fcb1 	bl	8009c3a <SDMMC_CmdGoIdleState>
 80082d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	e05b      	b.n	800839c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d137      	bne.n	8008362 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fcdb 	bl	8009cb4 <SDMMC_CmdAppCommand>
 80082fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02d      	beq.n	8008362 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008306:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800830a:	e047      	b.n	800839c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fcce 	bl	8009cb4 <SDMMC_CmdAppCommand>
 8008318:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <SD_PowerON+0x98>
    {
      return errorstate;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	e03b      	b.n	800839c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	491e      	ldr	r1, [pc, #120]	; (80083a4 <SD_PowerON+0x118>)
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fce4 	bl	8009cf8 <SDMMC_CmdAppOperCommand>
 8008330:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800833c:	e02e      	b.n	800839c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fb4a 	bl	80099de <SDIO_GetResponse>
 800834a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	0fdb      	lsrs	r3, r3, #31
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <SD_PowerON+0xcc>
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <SD_PowerON+0xce>
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]

    count++;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	3301      	adds	r3, #1
 8008360:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008368:	4293      	cmp	r3, r2
 800836a:	d802      	bhi.n	8008372 <SD_PowerON+0xe6>
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0cc      	beq.n	800830c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008378:	4293      	cmp	r3, r2
 800837a:	d902      	bls.n	8008382 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800837c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008380:	e00c      	b.n	800839c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
 8008392:	e002      	b.n	800839a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	c1100000 	.word	0xc1100000

080083a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80083b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083bc:	e018      	b.n	80083f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f001 fd58 	bl	8009e80 <SDMMC_CmdSendStatus>
 80083d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e009      	b.n	80083f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fafb 	bl	80099de <SDIO_GetResponse>
 80083e8:	4602      	mov	r2, r0
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fae5 	bl	80099de <SDIO_GetResponse>
 8008414:	4603      	mov	r3, r0
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841e:	d102      	bne.n	8008426 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008424:	e02f      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f879 	bl	8008524 <SD_FindSCR>
 8008432:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	e023      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01c      	beq.n	8008482 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f001 fc2d 	bl	8009cb4 <SDMMC_CmdAppCommand>
 800845a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	e00f      	b.n	8008486 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2102      	movs	r1, #2
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fc66 	bl	8009d3e <SDMMC_CmdBusWidth>
 8008472:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	e003      	b.n	8008486 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800847e:	2300      	movs	r3, #0
 8008480:	e001      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008482:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b086      	sub	sp, #24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2100      	movs	r1, #0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fa9a 	bl	80099de <SDIO_GetResponse>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b4:	d102      	bne.n	80084bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084ba:	e02f      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f82e 	bl	8008524 <SD_FindSCR>
 80084c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	e023      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01c      	beq.n	8008518 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f001 fbe2 	bl	8009cb4 <SDMMC_CmdAppCommand>
 80084f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	e00f      	b.n	800851c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fc1b 	bl	8009d3e <SDMMC_CmdBusWidth>
 8008508:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	e003      	b.n	800851c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008514:	2300      	movs	r3, #0
 8008516:	e001      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008518:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b08f      	sub	sp, #60	; 0x3c
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800852e:	f7fa fb77 	bl	8002c20 <HAL_GetTick>
 8008532:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2108      	movs	r1, #8
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fa86 	bl	8009a5c <SDMMC_CmdBlockLength>
 8008550:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	e0b2      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f001 fba3 	bl	8009cb4 <SDMMC_CmdAppCommand>
 800856e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	e0a3      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800857a:	f04f 33ff 	mov.w	r3, #4294967295
 800857e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008580:	2308      	movs	r3, #8
 8008582:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008584:	2330      	movs	r3, #48	; 0x30
 8008586:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008588:	2302      	movs	r3, #2
 800858a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800858c:	2300      	movs	r3, #0
 800858e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008590:	2301      	movs	r3, #1
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f107 0210 	add.w	r2, r7, #16
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fa30 	bl	8009a04 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fbea 	bl	8009d82 <SDMMC_CmdSendSCR>
 80085ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d02a      	beq.n	800860c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	e083      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00f      	beq.n	80085e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6819      	ldr	r1, [r3, #0]
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f107 0208 	add.w	r2, r7, #8
 80085d4:	18d4      	adds	r4, r2, r3
 80085d6:	4608      	mov	r0, r1
 80085d8:	f001 f98f 	bl	80098fa <SDIO_ReadFIFO>
 80085dc:	4603      	mov	r3, r0
 80085de:	6023      	str	r3, [r4, #0]
      index++;
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	3301      	adds	r3, #1
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
 80085e6:	e006      	b.n	80085f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d012      	beq.n	800861c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085f6:	f7fa fb13 	bl	8002c20 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d102      	bne.n	800860c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008606:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800860a:	e05a      	b.n	80086c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0cf      	beq.n	80085ba <SD_FindSCR+0x96>
 800861a:	e000      	b.n	800861e <SD_FindSCR+0xfa>
      break;
 800861c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2208      	movs	r2, #8
 8008632:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008634:	2308      	movs	r3, #8
 8008636:	e044      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2202      	movs	r2, #2
 800864c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	e037      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2220      	movs	r2, #32
 8008666:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008668:	2320      	movs	r3, #32
 800866a:	e02a      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f240 523a 	movw	r2, #1338	; 0x53a
 8008674:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	061a      	lsls	r2, r3, #24
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008682:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800868c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	0e1b      	lsrs	r3, r3, #24
 8008692:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	601a      	str	r2, [r3, #0]
    scr++;
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	3304      	adds	r3, #4
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	061a      	lsls	r2, r3, #24
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	0e1b      	lsrs	r3, r3, #24
 80086ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	373c      	adds	r7, #60	; 0x3c
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}

080086ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d03f      	beq.n	8008764 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	e033      	b.n	8008752 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f903 	bl	80098fa <SDIO_ReadFIFO>
 80086f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	b2da      	uxtb	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	3b01      	subs	r3, #1
 800871e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	b2da      	uxtb	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	701a      	strb	r2, [r3, #0]
      tmp++;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	b2da      	uxtb	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	3b01      	subs	r3, #1
 800874a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b07      	cmp	r3, #7
 8008756:	d9c8      	bls.n	80086ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d043      	beq.n	800880e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	e037      	b.n	80087fc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3b01      	subs	r3, #1
 800879c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	041a      	lsls	r2, r3, #16
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	061a      	lsls	r2, r3, #24
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f107 0208 	add.w	r2, r7, #8
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 f88f 	bl	8009914 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	3301      	adds	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b07      	cmp	r3, #7
 8008800:	d9c4      	bls.n	800878c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e025      	b.n	8008876 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fa f89e 	bl	8002980 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f000 ff32 	bl	80096c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	461a      	mov	r2, r3
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	f000 ff9d 	bl	80097a6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e07b      	b.n	8008988 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d108      	bne.n	80088aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a0:	d009      	beq.n	80088b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	61da      	str	r2, [r3, #28]
 80088a8:	e005      	b.n	80088b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7f9 fed9 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893a:	ea42 0103 	orr.w	r1, r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	f003 0104 	and.w	r1, r3, #4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	f003 0210 	and.w	r2, r3, #16
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	69da      	ldr	r2, [r3, #28]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008976:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e041      	b.n	8008a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7f9 fece 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f000 fa96 	bl	8008f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d001      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e04e      	b.n	8008ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0201 	orr.w	r2, r2, #1
 8008a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d022      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a72:	d01d      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1f      	ldr	r2, [pc, #124]	; (8008af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d018      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <HAL_TIM_Base_Start_IT+0xcc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d013      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00e      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d009      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a19      	ldr	r2, [pc, #100]	; (8008b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d004      	beq.n	8008ab0 <HAL_TIM_Base_Start_IT+0x80>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d111      	bne.n	8008ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b06      	cmp	r3, #6
 8008ac0:	d010      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0201 	orr.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad2:	e007      	b.n	8008ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0201 	orr.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	40010000 	.word	0x40010000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000800 	.word	0x40000800
 8008b00:	40000c00 	.word	0x40000c00
 8008b04:	40010400 	.word	0x40010400
 8008b08:	40014000 	.word	0x40014000
 8008b0c:	40001800 	.word	0x40001800

08008b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d11b      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0202 	mvn.w	r2, #2
 8008b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f9b5 	bl	8008ec2 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9a7 	bl	8008eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f9b8 	bl	8008ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0304 	and.w	r3, r3, #4
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d122      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d11b      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0204 	mvn.w	r2, #4
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f98b 	bl	8008ec2 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f97d 	bl	8008eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f98e 	bl	8008ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d122      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d11b      	bne.n	8008c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0208 	mvn.w	r2, #8
 8008be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2204      	movs	r2, #4
 8008bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f961 	bl	8008ec2 <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f953 	bl	8008eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f964 	bl	8008ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d122      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d11b      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0210 	mvn.w	r2, #16
 8008c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f937 	bl	8008ec2 <HAL_TIM_IC_CaptureCallback>
 8008c54:	e005      	b.n	8008c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f929 	bl	8008eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f93a 	bl	8008ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d10e      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d107      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0201 	mvn.w	r2, #1
 8008c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7f9 f8f8 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b80      	cmp	r3, #128	; 0x80
 8008ca0:	d10e      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cac:	2b80      	cmp	r3, #128	; 0x80
 8008cae:	d107      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fae0 	bl	8009280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cca:	2b40      	cmp	r3, #64	; 0x40
 8008ccc:	d10e      	bne.n	8008cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd8:	2b40      	cmp	r3, #64	; 0x40
 8008cda:	d107      	bne.n	8008cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f8ff 	bl	8008eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	d10e      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d107      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f06f 0220 	mvn.w	r2, #32
 8008d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 faaa 	bl	800926c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e0b4      	b.n	8008ea6 <HAL_TIM_ConfigClockSource+0x186>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d74:	d03e      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0xd4>
 8008d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d7a:	f200 8087 	bhi.w	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d82:	f000 8086 	beq.w	8008e92 <HAL_TIM_ConfigClockSource+0x172>
 8008d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8a:	d87f      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008d8c:	2b70      	cmp	r3, #112	; 0x70
 8008d8e:	d01a      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8008d90:	2b70      	cmp	r3, #112	; 0x70
 8008d92:	d87b      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008d94:	2b60      	cmp	r3, #96	; 0x60
 8008d96:	d050      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x11a>
 8008d98:	2b60      	cmp	r3, #96	; 0x60
 8008d9a:	d877      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008d9c:	2b50      	cmp	r3, #80	; 0x50
 8008d9e:	d03c      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0xfa>
 8008da0:	2b50      	cmp	r3, #80	; 0x50
 8008da2:	d873      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008da4:	2b40      	cmp	r3, #64	; 0x40
 8008da6:	d058      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x13a>
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	d86f      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d064      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x15a>
 8008db0:	2b30      	cmp	r3, #48	; 0x30
 8008db2:	d86b      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d060      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x15a>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d867      	bhi.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d05c      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x15a>
 8008dc0:	2b10      	cmp	r3, #16
 8008dc2:	d05a      	beq.n	8008e7a <HAL_TIM_ConfigClockSource+0x15a>
 8008dc4:	e062      	b.n	8008e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6899      	ldr	r1, [r3, #8]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f000 f9ad 	bl	8009134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	609a      	str	r2, [r3, #8]
      break;
 8008df2:	e04f      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	6899      	ldr	r1, [r3, #8]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f000 f996 	bl	8009134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e16:	609a      	str	r2, [r3, #8]
      break;
 8008e18:	e03c      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6859      	ldr	r1, [r3, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f000 f90a 	bl	8009040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2150      	movs	r1, #80	; 0x50
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f963 	bl	80090fe <TIM_ITRx_SetConfig>
      break;
 8008e38:	e02c      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	6859      	ldr	r1, [r3, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f000 f929 	bl	800909e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2160      	movs	r1, #96	; 0x60
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f953 	bl	80090fe <TIM_ITRx_SetConfig>
      break;
 8008e58:	e01c      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6859      	ldr	r1, [r3, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f000 f8ea 	bl	8009040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2140      	movs	r1, #64	; 0x40
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f943 	bl	80090fe <TIM_ITRx_SetConfig>
      break;
 8008e78:	e00c      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f000 f93a 	bl	80090fe <TIM_ITRx_SetConfig>
      break;
 8008e8a:	e003      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e000      	b.n	8008e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eb6:	bf00      	nop
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
	...

08008f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a40      	ldr	r2, [pc, #256]	; (8009014 <TIM_Base_SetConfig+0x114>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <TIM_Base_SetConfig+0x40>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1e:	d00f      	beq.n	8008f40 <TIM_Base_SetConfig+0x40>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a3d      	ldr	r2, [pc, #244]	; (8009018 <TIM_Base_SetConfig+0x118>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00b      	beq.n	8008f40 <TIM_Base_SetConfig+0x40>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a3c      	ldr	r2, [pc, #240]	; (800901c <TIM_Base_SetConfig+0x11c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <TIM_Base_SetConfig+0x40>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a3b      	ldr	r2, [pc, #236]	; (8009020 <TIM_Base_SetConfig+0x120>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a3a      	ldr	r2, [pc, #232]	; (8009024 <TIM_Base_SetConfig+0x124>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d108      	bne.n	8008f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2f      	ldr	r2, [pc, #188]	; (8009014 <TIM_Base_SetConfig+0x114>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d02b      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f60:	d027      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <TIM_Base_SetConfig+0x118>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d023      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2b      	ldr	r2, [pc, #172]	; (800901c <TIM_Base_SetConfig+0x11c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d01f      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2a      	ldr	r2, [pc, #168]	; (8009020 <TIM_Base_SetConfig+0x120>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d01b      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a29      	ldr	r2, [pc, #164]	; (8009024 <TIM_Base_SetConfig+0x124>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d017      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a28      	ldr	r2, [pc, #160]	; (8009028 <TIM_Base_SetConfig+0x128>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d013      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a27      	ldr	r2, [pc, #156]	; (800902c <TIM_Base_SetConfig+0x12c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00f      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a26      	ldr	r2, [pc, #152]	; (8009030 <TIM_Base_SetConfig+0x130>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00b      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a25      	ldr	r2, [pc, #148]	; (8009034 <TIM_Base_SetConfig+0x134>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d007      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a24      	ldr	r2, [pc, #144]	; (8009038 <TIM_Base_SetConfig+0x138>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d003      	beq.n	8008fb2 <TIM_Base_SetConfig+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a23      	ldr	r2, [pc, #140]	; (800903c <TIM_Base_SetConfig+0x13c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d108      	bne.n	8008fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a0a      	ldr	r2, [pc, #40]	; (8009014 <TIM_Base_SetConfig+0x114>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_Base_SetConfig+0xf8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a0c      	ldr	r2, [pc, #48]	; (8009024 <TIM_Base_SetConfig+0x124>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d103      	bne.n	8009000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	615a      	str	r2, [r3, #20]
}
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40010000 	.word	0x40010000
 8009018:	40000400 	.word	0x40000400
 800901c:	40000800 	.word	0x40000800
 8009020:	40000c00 	.word	0x40000c00
 8009024:	40010400 	.word	0x40010400
 8009028:	40014000 	.word	0x40014000
 800902c:	40014400 	.word	0x40014400
 8009030:	40014800 	.word	0x40014800
 8009034:	40001800 	.word	0x40001800
 8009038:	40001c00 	.word	0x40001c00
 800903c:	40002000 	.word	0x40002000

08009040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	f023 0201 	bic.w	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800906a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f023 030a 	bic.w	r3, r3, #10
 800907c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800909e:	b480      	push	{r7}
 80090a0:	b087      	sub	sp, #28
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0210 	bic.w	r2, r3, #16
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	031b      	lsls	r3, r3, #12
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	621a      	str	r2, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	f043 0307 	orr.w	r3, r3, #7
 8009120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	609a      	str	r2, [r3, #8]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800914e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	021a      	lsls	r2, r3, #8
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	431a      	orrs	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4313      	orrs	r3, r2
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	4313      	orrs	r3, r2
 8009160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	609a      	str	r2, [r3, #8]
}
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009188:	2302      	movs	r3, #2
 800918a:	e05a      	b.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a21      	ldr	r2, [pc, #132]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d022      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d8:	d01d      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d018      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a17      	ldr	r2, [pc, #92]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a15      	ldr	r2, [pc, #84]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d10c      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800921c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4313      	orrs	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40000400 	.word	0x40000400
 8009258:	40000800 	.word	0x40000800
 800925c:	40000c00 	.word	0x40000c00
 8009260:	40010400 	.word	0x40010400
 8009264:	40014000 	.word	0x40014000
 8009268:	40001800 	.word	0x40001800

0800926c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e03f      	b.n	8009326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f9 fa72 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2224      	movs	r2, #36	; 0x24
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f829 	bl	8009330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	695a      	ldr	r2, [r3, #20]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800930c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2220      	movs	r2, #32
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	b09f      	sub	sp, #124	; 0x7c
 8009336:	af00      	add	r7, sp, #0
 8009338:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800933a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009346:	68d9      	ldr	r1, [r3, #12]
 8009348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	ea40 0301 	orr.w	r3, r0, r1
 8009350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	431a      	orrs	r2, r3
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	431a      	orrs	r2, r3
 8009362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	4313      	orrs	r3, r2
 8009368:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800936a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009374:	f021 010c 	bic.w	r1, r1, #12
 8009378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800937e:	430b      	orrs	r3, r1
 8009380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800938c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938e:	6999      	ldr	r1, [r3, #24]
 8009390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	ea40 0301 	orr.w	r3, r0, r1
 8009398:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800939a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4bc5      	ldr	r3, [pc, #788]	; (80096b4 <UART_SetConfig+0x384>)
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d004      	beq.n	80093ae <UART_SetConfig+0x7e>
 80093a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	4bc3      	ldr	r3, [pc, #780]	; (80096b8 <UART_SetConfig+0x388>)
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d103      	bne.n	80093b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093ae:	f7fd fa11 	bl	80067d4 <HAL_RCC_GetPCLK2Freq>
 80093b2:	6778      	str	r0, [r7, #116]	; 0x74
 80093b4:	e002      	b.n	80093bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093b6:	f7fd f9f9 	bl	80067ac <HAL_RCC_GetPCLK1Freq>
 80093ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c4:	f040 80b6 	bne.w	8009534 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ca:	461c      	mov	r4, r3
 80093cc:	f04f 0500 	mov.w	r5, #0
 80093d0:	4622      	mov	r2, r4
 80093d2:	462b      	mov	r3, r5
 80093d4:	1891      	adds	r1, r2, r2
 80093d6:	6439      	str	r1, [r7, #64]	; 0x40
 80093d8:	415b      	adcs	r3, r3
 80093da:	647b      	str	r3, [r7, #68]	; 0x44
 80093dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093e0:	1912      	adds	r2, r2, r4
 80093e2:	eb45 0303 	adc.w	r3, r5, r3
 80093e6:	f04f 0000 	mov.w	r0, #0
 80093ea:	f04f 0100 	mov.w	r1, #0
 80093ee:	00d9      	lsls	r1, r3, #3
 80093f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f4:	00d0      	lsls	r0, r2, #3
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	1911      	adds	r1, r2, r4
 80093fc:	6639      	str	r1, [r7, #96]	; 0x60
 80093fe:	416b      	adcs	r3, r5
 8009400:	667b      	str	r3, [r7, #100]	; 0x64
 8009402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	461a      	mov	r2, r3
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	1891      	adds	r1, r2, r2
 800940e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009410:	415b      	adcs	r3, r3
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009418:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800941c:	f7f6 fef8 	bl	8000210 <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4ba5      	ldr	r3, [pc, #660]	; (80096bc <UART_SetConfig+0x38c>)
 8009426:	fba3 2302 	umull	r2, r3, r3, r2
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	011e      	lsls	r6, r3, #4
 800942e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009430:	461c      	mov	r4, r3
 8009432:	f04f 0500 	mov.w	r5, #0
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	1891      	adds	r1, r2, r2
 800943c:	6339      	str	r1, [r7, #48]	; 0x30
 800943e:	415b      	adcs	r3, r3
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
 8009442:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009446:	1912      	adds	r2, r2, r4
 8009448:	eb45 0303 	adc.w	r3, r5, r3
 800944c:	f04f 0000 	mov.w	r0, #0
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	00d9      	lsls	r1, r3, #3
 8009456:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800945a:	00d0      	lsls	r0, r2, #3
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	1911      	adds	r1, r2, r4
 8009462:	65b9      	str	r1, [r7, #88]	; 0x58
 8009464:	416b      	adcs	r3, r5
 8009466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	461a      	mov	r2, r3
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	1891      	adds	r1, r2, r2
 8009474:	62b9      	str	r1, [r7, #40]	; 0x28
 8009476:	415b      	adcs	r3, r3
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800947a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800947e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009482:	f7f6 fec5 	bl	8000210 <__aeabi_uldivmod>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	4b8c      	ldr	r3, [pc, #560]	; (80096bc <UART_SetConfig+0x38c>)
 800948c:	fba3 1302 	umull	r1, r3, r3, r2
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	2164      	movs	r1, #100	; 0x64
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	3332      	adds	r3, #50	; 0x32
 800949e:	4a87      	ldr	r2, [pc, #540]	; (80096bc <UART_SetConfig+0x38c>)
 80094a0:	fba2 2303 	umull	r2, r3, r2, r3
 80094a4:	095b      	lsrs	r3, r3, #5
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094ac:	441e      	add	r6, r3
 80094ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b0:	4618      	mov	r0, r3
 80094b2:	f04f 0100 	mov.w	r1, #0
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	1894      	adds	r4, r2, r2
 80094bc:	623c      	str	r4, [r7, #32]
 80094be:	415b      	adcs	r3, r3
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
 80094c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094c6:	1812      	adds	r2, r2, r0
 80094c8:	eb41 0303 	adc.w	r3, r1, r3
 80094cc:	f04f 0400 	mov.w	r4, #0
 80094d0:	f04f 0500 	mov.w	r5, #0
 80094d4:	00dd      	lsls	r5, r3, #3
 80094d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094da:	00d4      	lsls	r4, r2, #3
 80094dc:	4622      	mov	r2, r4
 80094de:	462b      	mov	r3, r5
 80094e0:	1814      	adds	r4, r2, r0
 80094e2:	653c      	str	r4, [r7, #80]	; 0x50
 80094e4:	414b      	adcs	r3, r1
 80094e6:	657b      	str	r3, [r7, #84]	; 0x54
 80094e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	461a      	mov	r2, r3
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	1891      	adds	r1, r2, r2
 80094f4:	61b9      	str	r1, [r7, #24]
 80094f6:	415b      	adcs	r3, r3
 80094f8:	61fb      	str	r3, [r7, #28]
 80094fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009502:	f7f6 fe85 	bl	8000210 <__aeabi_uldivmod>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4b6c      	ldr	r3, [pc, #432]	; (80096bc <UART_SetConfig+0x38c>)
 800950c:	fba3 1302 	umull	r1, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	2164      	movs	r1, #100	; 0x64
 8009514:	fb01 f303 	mul.w	r3, r1, r3
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	3332      	adds	r3, #50	; 0x32
 800951e:	4a67      	ldr	r2, [pc, #412]	; (80096bc <UART_SetConfig+0x38c>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	f003 0207 	and.w	r2, r3, #7
 800952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4432      	add	r2, r6
 8009530:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009532:	e0b9      	b.n	80096a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009536:	461c      	mov	r4, r3
 8009538:	f04f 0500 	mov.w	r5, #0
 800953c:	4622      	mov	r2, r4
 800953e:	462b      	mov	r3, r5
 8009540:	1891      	adds	r1, r2, r2
 8009542:	6139      	str	r1, [r7, #16]
 8009544:	415b      	adcs	r3, r3
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800954c:	1912      	adds	r2, r2, r4
 800954e:	eb45 0303 	adc.w	r3, r5, r3
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f04f 0100 	mov.w	r1, #0
 800955a:	00d9      	lsls	r1, r3, #3
 800955c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009560:	00d0      	lsls	r0, r2, #3
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	eb12 0804 	adds.w	r8, r2, r4
 800956a:	eb43 0905 	adc.w	r9, r3, r5
 800956e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	4618      	mov	r0, r3
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	008b      	lsls	r3, r1, #2
 8009582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009586:	0082      	lsls	r2, r0, #2
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f6 fe40 	bl	8000210 <__aeabi_uldivmod>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4b49      	ldr	r3, [pc, #292]	; (80096bc <UART_SetConfig+0x38c>)
 8009596:	fba3 2302 	umull	r2, r3, r3, r2
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	011e      	lsls	r6, r3, #4
 800959e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a0:	4618      	mov	r0, r3
 80095a2:	f04f 0100 	mov.w	r1, #0
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	1894      	adds	r4, r2, r2
 80095ac:	60bc      	str	r4, [r7, #8]
 80095ae:	415b      	adcs	r3, r3
 80095b0:	60fb      	str	r3, [r7, #12]
 80095b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095b6:	1812      	adds	r2, r2, r0
 80095b8:	eb41 0303 	adc.w	r3, r1, r3
 80095bc:	f04f 0400 	mov.w	r4, #0
 80095c0:	f04f 0500 	mov.w	r5, #0
 80095c4:	00dd      	lsls	r5, r3, #3
 80095c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095ca:	00d4      	lsls	r4, r2, #3
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	1814      	adds	r4, r2, r0
 80095d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80095d4:	414b      	adcs	r3, r1
 80095d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	f04f 0100 	mov.w	r1, #0
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	008b      	lsls	r3, r1, #2
 80095ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80095f0:	0082      	lsls	r2, r0, #2
 80095f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80095f6:	f7f6 fe0b 	bl	8000210 <__aeabi_uldivmod>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4b2f      	ldr	r3, [pc, #188]	; (80096bc <UART_SetConfig+0x38c>)
 8009600:	fba3 1302 	umull	r1, r3, r3, r2
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	2164      	movs	r1, #100	; 0x64
 8009608:	fb01 f303 	mul.w	r3, r1, r3
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	3332      	adds	r3, #50	; 0x32
 8009612:	4a2a      	ldr	r2, [pc, #168]	; (80096bc <UART_SetConfig+0x38c>)
 8009614:	fba2 2303 	umull	r2, r3, r2, r3
 8009618:	095b      	lsrs	r3, r3, #5
 800961a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800961e:	441e      	add	r6, r3
 8009620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009622:	4618      	mov	r0, r3
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	1894      	adds	r4, r2, r2
 800962e:	603c      	str	r4, [r7, #0]
 8009630:	415b      	adcs	r3, r3
 8009632:	607b      	str	r3, [r7, #4]
 8009634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009638:	1812      	adds	r2, r2, r0
 800963a:	eb41 0303 	adc.w	r3, r1, r3
 800963e:	f04f 0400 	mov.w	r4, #0
 8009642:	f04f 0500 	mov.w	r5, #0
 8009646:	00dd      	lsls	r5, r3, #3
 8009648:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800964c:	00d4      	lsls	r4, r2, #3
 800964e:	4622      	mov	r2, r4
 8009650:	462b      	mov	r3, r5
 8009652:	eb12 0a00 	adds.w	sl, r2, r0
 8009656:	eb43 0b01 	adc.w	fp, r3, r1
 800965a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	4618      	mov	r0, r3
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	008b      	lsls	r3, r1, #2
 800966e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009672:	0082      	lsls	r2, r0, #2
 8009674:	4650      	mov	r0, sl
 8009676:	4659      	mov	r1, fp
 8009678:	f7f6 fdca 	bl	8000210 <__aeabi_uldivmod>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <UART_SetConfig+0x38c>)
 8009682:	fba3 1302 	umull	r1, r3, r3, r2
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	2164      	movs	r1, #100	; 0x64
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	3332      	adds	r3, #50	; 0x32
 8009694:	4a09      	ldr	r2, [pc, #36]	; (80096bc <UART_SetConfig+0x38c>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f003 020f 	and.w	r2, r3, #15
 80096a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4432      	add	r2, r6
 80096a6:	609a      	str	r2, [r3, #8]
}
 80096a8:	bf00      	nop
 80096aa:	377c      	adds	r7, #124	; 0x7c
 80096ac:	46bd      	mov	sp, r7
 80096ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b2:	bf00      	nop
 80096b4:	40011000 	.word	0x40011000
 80096b8:	40011400 	.word	0x40011400
 80096bc:	51eb851f 	.word	0x51eb851f

080096c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d029      	beq.n	800972e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096ea:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096f4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80096fa:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009700:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009706:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800970c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009712:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009718:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800971e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	e034      	b.n	8009798 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800973a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009744:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800974a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800975e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009762:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800976c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009772:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009778:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800977e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009784:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	4313      	orrs	r3, r2
 800978a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b087      	sub	sp, #28
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d02e      	beq.n	800981e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097cc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	3b01      	subs	r3, #1
 80097da:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097dc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097e6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097f0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097fa:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	3b01      	subs	r3, #1
 8009802:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009804:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	3b01      	subs	r3, #1
 800980c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800980e:	4313      	orrs	r3, r2
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	609a      	str	r2, [r3, #8]
 800981c:	e03b      	b.n	8009896 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800982a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800982e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	3b01      	subs	r3, #1
 8009836:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	3b01      	subs	r3, #1
 800983e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009840:	4313      	orrs	r3, r2
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009854:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	3b01      	subs	r3, #1
 8009862:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009864:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	3b01      	subs	r3, #1
 800986c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800986e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	3b01      	subs	r3, #1
 8009876:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009878:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	3b01      	subs	r3, #1
 8009880:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009882:	4313      	orrs	r3, r2
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	4313      	orrs	r3, r2
 8009888:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	371c      	adds	r7, #28
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80098a4:	b084      	sub	sp, #16
 80098a6:	b480      	push	{r7}
 80098a8:	b085      	sub	sp, #20
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	f107 001c 	add.w	r0, r7, #28
 80098b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80098ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80098bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80098be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80098c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80098c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80098ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80098ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80098de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	b004      	add	sp, #16
 80098f8:	4770      	bx	lr

080098fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2203      	movs	r2, #3
 8009942:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009944:	2002      	movs	r0, #2
 8009946:	f7f9 f977 	bl	8002c38 <HAL_Delay>
  
  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0303 	and.w	r3, r3, #3
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800998e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009994:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800999a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80099aa:	f023 030f 	bic.w	r3, r3, #15
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	b2db      	uxtb	r3, r3
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3314      	adds	r3, #20
 80099ec:	461a      	mov	r2, r3
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	4413      	add	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
}  
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a2a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009a30:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009a36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0

}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009a6a:	2310      	movs	r3, #16
 8009a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a6e:	2340      	movs	r3, #64	; 0x40
 8009a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff ff74 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8c:	2110      	movs	r1, #16
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa44 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a96:	69fb      	ldr	r3, [r7, #28]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009aae:	2311      	movs	r3, #17
 8009ab0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ab2:	2340      	movs	r3, #64	; 0x40
 8009ab4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009abe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ac0:	f107 0308 	add.w	r3, r7, #8
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ff52 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad0:	2111      	movs	r1, #17
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa22 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009ad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ada:	69fb      	ldr	r3, [r7, #28]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3720      	adds	r7, #32
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009af2:	2312      	movs	r3, #18
 8009af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af6:	2340      	movs	r3, #64	; 0x40
 8009af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff ff30 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b14:	2112      	movs	r1, #18
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa00 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b36:	2318      	movs	r3, #24
 8009b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff0e 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b58:	2118      	movs	r1, #24
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f9de 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b62:	69fb      	ldr	r3, [r7, #28]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b7a:	2319      	movs	r3, #25
 8009b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff feec 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9c:	2119      	movs	r1, #25
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9bc 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bce:	f107 0308 	add.w	r3, r7, #8
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fecb 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009bda:	4a05      	ldr	r2, [pc, #20]	; (8009bf0 <SDMMC_CmdStopTransfer+0x40>)
 8009bdc:	210c      	movs	r1, #12
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f99c 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009be4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	05f5e100 	.word	0x05f5e100

08009bf4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009c04:	2307      	movs	r3, #7
 8009c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c14:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c16:	f107 0310 	add.w	r3, r7, #16
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff fea7 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c26:	2107      	movs	r1, #7
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 f977 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009c2e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3728      	adds	r7, #40	; 0x28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b088      	sub	sp, #32
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c58:	f107 0308 	add.w	r3, r7, #8
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fe86 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f92d 	bl	8009ec4 <SDMMC_GetCmdError>
 8009c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3720      	adds	r7, #32
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b088      	sub	sp, #32
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c7e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c84:	2308      	movs	r3, #8
 8009c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fe67 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fb24 	bl	800a2f0 <SDMMC_GetCmdResp7>
 8009ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009caa:	69fb      	ldr	r3, [r7, #28]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3720      	adds	r7, #32
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009cc2:	2337      	movs	r3, #55	; 0x37
 8009cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fe48 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce4:	2137      	movs	r1, #55	; 0x37
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f918 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cee:	69fb      	ldr	r3, [r7, #28]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d0e:	2329      	movs	r3, #41	; 0x29
 8009d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d12:	2340      	movs	r3, #64	; 0x40
 8009d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fe22 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fa2b 	bl	800a188 <SDMMC_GetCmdResp3>
 8009d32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d34:	69fb      	ldr	r3, [r7, #28]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b088      	sub	sp, #32
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d4c:	2306      	movs	r3, #6
 8009d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fe03 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6e:	2106      	movs	r1, #6
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f8d3 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d78:	69fb      	ldr	r3, [r7, #28]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b088      	sub	sp, #32
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d8e:	2333      	movs	r3, #51	; 0x33
 8009d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fde2 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db0:	2133      	movs	r1, #51	; 0x33
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f8b2 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dba:	69fb      	ldr	r3, [r7, #28]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009dd4:	23c0      	movs	r3, #192	; 0xc0
 8009dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fdc1 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f982 	bl	800a0f8 <SDMMC_GetCmdResp2>
 8009df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009df6:	69fb      	ldr	r3, [r7, #28]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e0e:	2309      	movs	r3, #9
 8009e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009e12:	23c0      	movs	r3, #192	; 0xc0
 8009e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fda2 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f963 	bl	800a0f8 <SDMMC_GetCmdResp2>
 8009e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e34:	69fb      	ldr	r3, [r7, #28]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b088      	sub	sp, #32
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e5e:	f107 0308 	add.w	r3, r7, #8
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fd83 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	2103      	movs	r1, #3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9c8 	bl	800a204 <SDMMC_GetCmdResp6>
 8009e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e76:	69fb      	ldr	r3, [r7, #28]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e8e:	230d      	movs	r3, #13
 8009e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e92:	2340      	movs	r3, #64	; 0x40
 8009e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ea0:	f107 0308 	add.w	r3, r7, #8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff fd62 	bl	8009970 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb0:	210d      	movs	r1, #13
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f832 	bl	8009f1c <SDMMC_GetCmdResp1>
 8009eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eba:	69fb      	ldr	r3, [r7, #28]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3720      	adds	r7, #32
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ecc:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <SDMMC_GetCmdError+0x50>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a11      	ldr	r2, [pc, #68]	; (8009f18 <SDMMC_GetCmdError+0x54>)
 8009ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed6:	0a5b      	lsrs	r3, r3, #9
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	fb02 f303 	mul.w	r3, r2, r3
 8009ee0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	60fa      	str	r2, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ef0:	e009      	b.n	8009f06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0f1      	beq.n	8009ee2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	22c5      	movs	r2, #197	; 0xc5
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000000 	.word	0x20000000
 8009f18:	10624dd3 	.word	0x10624dd3

08009f1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	460b      	mov	r3, r1
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009f2a:	4b70      	ldr	r3, [pc, #448]	; (800a0ec <SDMMC_GetCmdResp1+0x1d0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a70      	ldr	r2, [pc, #448]	; (800a0f0 <SDMMC_GetCmdResp1+0x1d4>)
 8009f30:	fba2 2303 	umull	r2, r3, r2, r3
 8009f34:	0a5a      	lsrs	r2, r3, #9
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	fb02 f303 	mul.w	r3, r2, r3
 8009f3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	1e5a      	subs	r2, r3, #1
 8009f42:	61fa      	str	r2, [r7, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f4c:	e0c9      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0ef      	beq.n	8009f3e <SDMMC_GetCmdResp1+0x22>
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1ea      	bne.n	8009f3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2204      	movs	r2, #4
 8009f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f7a:	2304      	movs	r3, #4
 8009f7c:	e0b1      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d004      	beq.n	8009f94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e0a6      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	22c5      	movs	r2, #197	; 0xc5
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fd12 	bl	80099c4 <SDIO_GetCommandResponse>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d001      	beq.n	8009fae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e099      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009fae:	2100      	movs	r1, #0
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fd14 	bl	80099de <SDIO_GetResponse>
 8009fb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4b4e      	ldr	r3, [pc, #312]	; (800a0f4 <SDMMC_GetCmdResp1+0x1d8>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e08d      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da02      	bge.n	8009fd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fd0:	e087      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fdc:	2340      	movs	r3, #64	; 0x40
 8009fde:	e080      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fea:	2380      	movs	r3, #128	; 0x80
 8009fec:	e079      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ffc:	e071      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a00c:	e069      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01c:	e061      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a02c:	e059      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a03c:	e051      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a04c:	e049      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a05c:	e041      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a06c:	e039      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a07c:	e031      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a088:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a08c:	e029      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a098:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a09c:	e021      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a0a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a0ac:	e019      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a0bc:	e011      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a0c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0cc:	e009      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f003 0308 	and.w	r3, r3, #8
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0dc:	e001      	b.n	800a0e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000000 	.word	0x20000000
 800a0f0:	10624dd3 	.word	0x10624dd3
 800a0f4:	fdffe008 	.word	0xfdffe008

0800a0f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a100:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <SDMMC_GetCmdResp2+0x88>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a1f      	ldr	r2, [pc, #124]	; (800a184 <SDMMC_GetCmdResp2+0x8c>)
 800a106:	fba2 2303 	umull	r2, r3, r2, r3
 800a10a:	0a5b      	lsrs	r3, r3, #9
 800a10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a110:	fb02 f303 	mul.w	r3, r2, r3
 800a114:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1e5a      	subs	r2, r3, #1
 800a11a:	60fa      	str	r2, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a124:	e026      	b.n	800a174 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0ef      	beq.n	800a116 <SDMMC_GetCmdResp2+0x1e>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1ea      	bne.n	800a116 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d004      	beq.n	800a156 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2204      	movs	r2, #4
 800a150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a152:	2304      	movs	r3, #4
 800a154:	e00e      	b.n	800a174 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a15a:	f003 0301 	and.w	r3, r3, #1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a168:	2301      	movs	r3, #1
 800a16a:	e003      	b.n	800a174 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	22c5      	movs	r2, #197	; 0xc5
 800a170:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000000 	.word	0x20000000
 800a184:	10624dd3 	.word	0x10624dd3

0800a188 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a190:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <SDMMC_GetCmdResp3+0x74>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1a      	ldr	r2, [pc, #104]	; (800a200 <SDMMC_GetCmdResp3+0x78>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	0a5b      	lsrs	r3, r3, #9
 800a19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a0:	fb02 f303 	mul.w	r3, r2, r3
 800a1a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	1e5a      	subs	r2, r3, #1
 800a1aa:	60fa      	str	r2, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b4:	e01b      	b.n	800a1ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0ef      	beq.n	800a1a6 <SDMMC_GetCmdResp3+0x1e>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1ea      	bne.n	800a1a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2204      	movs	r2, #4
 800a1e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	e003      	b.n	800a1ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	22c5      	movs	r2, #197	; 0xc5
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20000000 	.word	0x20000000
 800a200:	10624dd3 	.word	0x10624dd3

0800a204 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	460b      	mov	r3, r1
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <SDMMC_GetCmdResp6+0xe4>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <SDMMC_GetCmdResp6+0xe8>)
 800a218:	fba2 2303 	umull	r2, r3, r2, r3
 800a21c:	0a5b      	lsrs	r3, r3, #9
 800a21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	1e5a      	subs	r2, r3, #1
 800a22c:	61fa      	str	r2, [r7, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d102      	bne.n	800a238 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a232:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a236:	e052      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ef      	beq.n	800a228 <SDMMC_GetCmdResp6+0x24>
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1ea      	bne.n	800a228 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2204      	movs	r2, #4
 800a262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a264:	2304      	movs	r3, #4
 800a266:	e03a      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	f003 0301 	and.w	r3, r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e02f      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f7ff fba0 	bl	80099c4 <SDIO_GetCommandResponse>
 800a284:	4603      	mov	r3, r0
 800a286:	461a      	mov	r2, r3
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d001      	beq.n	800a292 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a28e:	2301      	movs	r3, #1
 800a290:	e025      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	22c5      	movs	r2, #197	; 0xc5
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a298:	2100      	movs	r1, #0
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fb9f 	bl	80099de <SDIO_GetResponse>
 800a2a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e011      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2c8:	e009      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d8:	e001      	b.n	800a2de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3720      	adds	r7, #32
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000000 	.word	0x20000000
 800a2ec:	10624dd3 	.word	0x10624dd3

0800a2f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2f8:	4b22      	ldr	r3, [pc, #136]	; (800a384 <SDMMC_GetCmdResp7+0x94>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a22      	ldr	r2, [pc, #136]	; (800a388 <SDMMC_GetCmdResp7+0x98>)
 800a2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a302:	0a5b      	lsrs	r3, r3, #9
 800a304:	f241 3288 	movw	r2, #5000	; 0x1388
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	60fa      	str	r2, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a31c:	e02c      	b.n	800a378 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0ef      	beq.n	800a30e <SDMMC_GetCmdResp7+0x1e>
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1ea      	bne.n	800a30e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2204      	movs	r2, #4
 800a348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a34a:	2304      	movs	r3, #4
 800a34c:	e014      	b.n	800a378 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d004      	beq.n	800a364 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a360:	2301      	movs	r3, #1
 800a362:	e009      	b.n	800a378 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2240      	movs	r2, #64	; 0x40
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a376:	2300      	movs	r3, #0
  
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	20000000 	.word	0x20000000
 800a388:	10624dd3 	.word	0x10624dd3

0800a38c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a390:	4904      	ldr	r1, [pc, #16]	; (800a3a4 <MX_FATFS_Init+0x18>)
 800a392:	4805      	ldr	r0, [pc, #20]	; (800a3a8 <MX_FATFS_Init+0x1c>)
 800a394:	f003 fafc 	bl	800d990 <FATFS_LinkDriver>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <MX_FATFS_Init+0x20>)
 800a39e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a3a0:	bf00      	nop
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20003738 	.word	0x20003738
 800a3a8:	0800e208 	.word	0x0800e208
 800a3ac:	20003734 	.word	0x20003734

0800a3b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a3b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a3ca:	f000 f896 	bl	800a4fa <BSP_SD_IsDetected>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d001      	beq.n	800a3d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e012      	b.n	800a3fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a3d8:	480b      	ldr	r0, [pc, #44]	; (800a408 <BSP_SD_Init+0x48>)
 800a3da:	f7fc ff03 	bl	80071e4 <HAL_SD_Init>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a3e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3ec:	4806      	ldr	r0, [pc, #24]	; (800a408 <BSP_SD_Init+0x48>)
 800a3ee:	f7fd fcb9 	bl	8007d64 <HAL_SD_ConfigWideBusOperation>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d001      	beq.n	800a3fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	200033f0 	.word	0x200033f0

0800a40c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	68f9      	ldr	r1, [r7, #12]
 800a422:	4806      	ldr	r0, [pc, #24]	; (800a43c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a424:	f7fc ff8c 	bl	8007340 <HAL_SD_ReadBlocks_DMA>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200033f0 	.word	0x200033f0

0800a440 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	68f9      	ldr	r1, [r7, #12]
 800a456:	4806      	ldr	r0, [pc, #24]	; (800a470 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a458:	f7fd f852 	bl	8007500 <HAL_SD_WriteBlocks_DMA>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a466:	7dfb      	ldrb	r3, [r7, #23]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200033f0 	.word	0x200033f0

0800a474 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <BSP_SD_GetCardState+0x1c>)
 800a47a:	f7fd fd0d 	bl	8007e98 <HAL_SD_GetCardState>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b04      	cmp	r3, #4
 800a482:	bf14      	ite	ne
 800a484:	2301      	movne	r3, #1
 800a486:	2300      	moveq	r3, #0
 800a488:	b2db      	uxtb	r3, r3
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	200033f0 	.word	0x200033f0

0800a494 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4803      	ldr	r0, [pc, #12]	; (800a4ac <BSP_SD_GetCardInfo+0x18>)
 800a4a0:	f7fd fc34 	bl	8007d0c <HAL_SD_GetCardInfo>
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	200033f0 	.word	0x200033f0

0800a4b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a4b8:	f000 f818 	bl	800a4ec <BSP_SD_AbortCallback>
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a4cc:	f000 f9a8 	bl	800a820 <BSP_SD_WriteCpltCallback>
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a4e0:	f000 f9aa 	bl	800a838 <BSP_SD_ReadCpltCallback>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0

}
 800a4f0:	bf00      	nop
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a500:	2301      	movs	r3, #1
 800a502:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a504:	f000 f80c 	bl	800a520 <BSP_PlatformIsDetected>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a50e:	2300      	movs	r3, #0
 800a510:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	b2db      	uxtb	r3, r3
}
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a526:	2301      	movs	r3, #1
 800a528:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a52a:	2104      	movs	r1, #4
 800a52c:	4806      	ldr	r0, [pc, #24]	; (800a548 <BSP_PlatformIsDetected+0x28>)
 800a52e:	f7fb f90d 	bl	800574c <HAL_GPIO_ReadPin>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a538:	2300      	movs	r3, #0
 800a53a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a53c:	79fb      	ldrb	r3, [r7, #7]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40021800 	.word	0x40021800

0800a54c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a554:	f7f8 fb64 	bl	8002c20 <HAL_GetTick>
 800a558:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a55a:	e006      	b.n	800a56a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a55c:	f7ff ff8a 	bl	800a474 <BSP_SD_GetCardState>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a566:	2300      	movs	r3, #0
 800a568:	e009      	b.n	800a57e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a56a:	f7f8 fb59 	bl	8002c20 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d8f0      	bhi.n	800a55c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a57a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <SD_CheckStatus+0x38>)
 800a594:	2201      	movs	r2, #1
 800a596:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a598:	f7ff ff6c 	bl	800a474 <BSP_SD_GetCardState>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d107      	bne.n	800a5b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a5a2:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <SD_CheckStatus+0x38>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <SD_CheckStatus+0x38>)
 800a5b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <SD_CheckStatus+0x38>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	b2db      	uxtb	r3, r3
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000009 	.word	0x20000009

0800a5c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a5ce:	f7ff fef7 	bl	800a3c0 <BSP_SD_Init>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d107      	bne.n	800a5e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff ffd4 	bl	800a588 <SD_CheckStatus>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4b04      	ldr	r3, [pc, #16]	; (800a5f8 <SD_initialize+0x34>)
 800a5e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a5e8:	4b03      	ldr	r3, [pc, #12]	; (800a5f8 <SD_initialize+0x34>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000009 	.word	0x20000009

0800a5fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff ffbd 	bl	800a588 <SD_CheckStatus>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a62c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a630:	f7ff ff8c 	bl	800a54c <SD_CheckStatusWithTimeout>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	da01      	bge.n	800a63e <SD_read+0x26>
  {
    return res;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	e03b      	b.n	800a6b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	68b8      	ldr	r0, [r7, #8]
 800a644:	f7ff fee2 	bl	800a40c <BSP_SD_ReadBlocks_DMA>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d132      	bne.n	800a6b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a64e:	4b1c      	ldr	r3, [pc, #112]	; (800a6c0 <SD_read+0xa8>)
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a654:	f7f8 fae4 	bl	8002c20 <HAL_GetTick>
 800a658:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a65a:	bf00      	nop
 800a65c:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <SD_read+0xa8>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d108      	bne.n	800a676 <SD_read+0x5e>
 800a664:	f7f8 fadc 	bl	8002c20 <HAL_GetTick>
 800a668:	4602      	mov	r2, r0
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a672:	4293      	cmp	r3, r2
 800a674:	d9f2      	bls.n	800a65c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a676:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <SD_read+0xa8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d102      	bne.n	800a684 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	75fb      	strb	r3, [r7, #23]
 800a682:	e017      	b.n	800a6b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a684:	4b0e      	ldr	r3, [pc, #56]	; (800a6c0 <SD_read+0xa8>)
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a68a:	f7f8 fac9 	bl	8002c20 <HAL_GetTick>
 800a68e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a690:	e007      	b.n	800a6a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a692:	f7ff feef 	bl	800a474 <BSP_SD_GetCardState>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a6a0:	e008      	b.n	800a6b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a6a2:	f7f8 fabd 	bl	8002c20 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d9ee      	bls.n	800a692 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000098 	.word	0x20000098

0800a6c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a6d8:	4b24      	ldr	r3, [pc, #144]	; (800a76c <SD_write+0xa8>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a6de:	f247 5030 	movw	r0, #30000	; 0x7530
 800a6e2:	f7ff ff33 	bl	800a54c <SD_CheckStatusWithTimeout>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da01      	bge.n	800a6f0 <SD_write+0x2c>
  {
    return res;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	e038      	b.n	800a762 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	68b8      	ldr	r0, [r7, #8]
 800a6f6:	f7ff fea3 	bl	800a440 <BSP_SD_WriteBlocks_DMA>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d12f      	bne.n	800a760 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a700:	f7f8 fa8e 	bl	8002c20 <HAL_GetTick>
 800a704:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a706:	bf00      	nop
 800a708:	4b18      	ldr	r3, [pc, #96]	; (800a76c <SD_write+0xa8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d108      	bne.n	800a722 <SD_write+0x5e>
 800a710:	f7f8 fa86 	bl	8002c20 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a71e:	4293      	cmp	r3, r2
 800a720:	d9f2      	bls.n	800a708 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a722:	4b12      	ldr	r3, [pc, #72]	; (800a76c <SD_write+0xa8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	75fb      	strb	r3, [r7, #23]
 800a72e:	e017      	b.n	800a760 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a730:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <SD_write+0xa8>)
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a736:	f7f8 fa73 	bl	8002c20 <HAL_GetTick>
 800a73a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a73c:	e007      	b.n	800a74e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a73e:	f7ff fe99 	bl	800a474 <BSP_SD_GetCardState>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <SD_write+0x8a>
          {
            res = RES_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
            break;
 800a74c:	e008      	b.n	800a760 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a74e:	f7f8 fa67 	bl	8002c20 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	f247 522f 	movw	r2, #29999	; 0x752f
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d9ee      	bls.n	800a73e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a760:	7dfb      	ldrb	r3, [r7, #23]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000094 	.word	0x20000094

0800a770 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b08c      	sub	sp, #48	; 0x30
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	603a      	str	r2, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
 800a77c:	460b      	mov	r3, r1
 800a77e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a786:	4b25      	ldr	r3, [pc, #148]	; (800a81c <SD_ioctl+0xac>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <SD_ioctl+0x28>
 800a794:	2303      	movs	r3, #3
 800a796:	e03c      	b.n	800a812 <SD_ioctl+0xa2>

  switch (cmd)
 800a798:	79bb      	ldrb	r3, [r7, #6]
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d834      	bhi.n	800a808 <SD_ioctl+0x98>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <SD_ioctl+0x34>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7bd 	.word	0x0800a7bd
 800a7ac:	0800a7d5 	.word	0x0800a7d5
 800a7b0:	0800a7ef 	.word	0x0800a7ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7ba:	e028      	b.n	800a80e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff fe67 	bl	800a494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a7c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7d2:	e01c      	b.n	800a80e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7d4:	f107 030c 	add.w	r3, r7, #12
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fe5b 	bl	800a494 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7ec:	e00f      	b.n	800a80e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a7ee:	f107 030c 	add.w	r3, r7, #12
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fe4e 	bl	800a494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	0a5a      	lsrs	r2, r3, #9
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a806:	e002      	b.n	800a80e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a808:	2304      	movs	r3, #4
 800a80a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a80e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a812:	4618      	mov	r0, r3
 800a814:	3730      	adds	r7, #48	; 0x30
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000009 	.word	0x20000009

0800a820 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a824:	4b03      	ldr	r3, [pc, #12]	; (800a834 <BSP_SD_WriteCpltCallback+0x14>)
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]
}
 800a82a:	bf00      	nop
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20000094 	.word	0x20000094

0800a838 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a83c:	4b03      	ldr	r3, [pc, #12]	; (800a84c <BSP_SD_ReadCpltCallback+0x14>)
 800a83e:	2201      	movs	r2, #1
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	20000098 	.word	0x20000098

0800a850 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	4a08      	ldr	r2, [pc, #32]	; (800a880 <disk_status+0x30>)
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	79fa      	ldrb	r2, [r7, #7]
 800a868:	4905      	ldr	r1, [pc, #20]	; (800a880 <disk_status+0x30>)
 800a86a:	440a      	add	r2, r1
 800a86c:	7a12      	ldrb	r2, [r2, #8]
 800a86e:	4610      	mov	r0, r2
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200000b4 	.word	0x200000b4

0800a884 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	4a0d      	ldr	r2, [pc, #52]	; (800a8cc <disk_initialize+0x48>)
 800a896:	5cd3      	ldrb	r3, [r2, r3]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d111      	bne.n	800a8c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	4a0b      	ldr	r2, [pc, #44]	; (800a8cc <disk_initialize+0x48>)
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	4a09      	ldr	r2, [pc, #36]	; (800a8cc <disk_initialize+0x48>)
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	79fa      	ldrb	r2, [r7, #7]
 800a8b2:	4906      	ldr	r1, [pc, #24]	; (800a8cc <disk_initialize+0x48>)
 800a8b4:	440a      	add	r2, r1
 800a8b6:	7a12      	ldrb	r2, [r2, #8]
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200000b4 	.word	0x200000b4

0800a8d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8d0:	b590      	push	{r4, r7, lr}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	607a      	str	r2, [r7, #4]
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4a0a      	ldr	r2, [pc, #40]	; (800a90c <disk_read+0x3c>)
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	689c      	ldr	r4, [r3, #8]
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4a07      	ldr	r2, [pc, #28]	; (800a90c <disk_read+0x3c>)
 800a8f0:	4413      	add	r3, r2
 800a8f2:	7a18      	ldrb	r0, [r3, #8]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	47a0      	blx	r4
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800a900:	7dfb      	ldrb	r3, [r7, #23]
}
 800a902:	4618      	mov	r0, r3
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	bd90      	pop	{r4, r7, pc}
 800a90a:	bf00      	nop
 800a90c:	200000b4 	.word	0x200000b4

0800a910 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a910:	b590      	push	{r4, r7, lr}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <disk_write+0x3c>)
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68dc      	ldr	r4, [r3, #12]
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	4a07      	ldr	r2, [pc, #28]	; (800a94c <disk_write+0x3c>)
 800a930:	4413      	add	r3, r2
 800a932:	7a18      	ldrb	r0, [r3, #8]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	47a0      	blx	r4
 800a93c:	4603      	mov	r3, r0
 800a93e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a940:	7dfb      	ldrb	r3, [r7, #23]
}
 800a942:	4618      	mov	r0, r3
 800a944:	371c      	adds	r7, #28
 800a946:	46bd      	mov	sp, r7
 800a948:	bd90      	pop	{r4, r7, pc}
 800a94a:	bf00      	nop
 800a94c:	200000b4 	.word	0x200000b4

0800a950 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	603a      	str	r2, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
 800a95c:	460b      	mov	r3, r1
 800a95e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <disk_ioctl+0x38>)
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	79fa      	ldrb	r2, [r7, #7]
 800a96e:	4906      	ldr	r1, [pc, #24]	; (800a988 <disk_ioctl+0x38>)
 800a970:	440a      	add	r2, r1
 800a972:	7a10      	ldrb	r0, [r2, #8]
 800a974:	79b9      	ldrb	r1, [r7, #6]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	4798      	blx	r3
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	200000b4 	.word	0x200000b4

0800a98c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3301      	adds	r3, #1
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a99c:	89fb      	ldrh	r3, [r7, #14]
 800a99e:	021b      	lsls	r3, r3, #8
 800a9a0:	b21a      	sxth	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	b21b      	sxth	r3, r3
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	b21b      	sxth	r3, r3
 800a9ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3303      	adds	r3, #3
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	021b      	lsls	r3, r3, #8
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	3202      	adds	r2, #2
 800a9d4:	7812      	ldrb	r2, [r2, #0]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	7812      	ldrb	r2, [r2, #0]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	021b      	lsls	r3, r3, #8
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	887a      	ldrh	r2, [r7, #2]
 800aa16:	b2d2      	uxtb	r2, r2
 800aa18:	701a      	strb	r2, [r3, #0]
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	607a      	str	r2, [r7, #4]
 800aa26:	887a      	ldrh	r2, [r7, #2]
 800aa28:	b2d2      	uxtb	r2, r2
 800aa2a:	701a      	strb	r2, [r3, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	0a1b      	lsrs	r3, r3, #8
 800aa76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	607a      	str	r2, [r7, #4]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	701a      	strb	r2, [r3, #0]
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00d      	beq.n	800aac6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	1c53      	adds	r3, r2, #1
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	1c59      	adds	r1, r3, #1
 800aab4:	6179      	str	r1, [r7, #20]
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	607b      	str	r3, [r7, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1f1      	bne.n	800aaaa <mem_cpy+0x1a>
	}
}
 800aac6:	bf00      	nop
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aad2:	b480      	push	{r7}
 800aad4:	b087      	sub	sp, #28
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	617a      	str	r2, [r7, #20]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	607b      	str	r3, [r7, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1f3      	bne.n	800aae2 <mem_set+0x10>
}
 800aafa:	bf00      	nop
 800aafc:	bf00      	nop
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ab08:	b480      	push	{r7}
 800ab0a:	b089      	sub	sp, #36	; 0x24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	61fb      	str	r3, [r7, #28]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	61fa      	str	r2, [r7, #28]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	61ba      	str	r2, [r7, #24]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	1acb      	subs	r3, r1, r3
 800ab34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	607b      	str	r3, [r7, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <mem_cmp+0x40>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0eb      	beq.n	800ab20 <mem_cmp+0x18>

	return r;
 800ab48:	697b      	ldr	r3, [r7, #20]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3724      	adds	r7, #36	; 0x24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ab60:	e002      	b.n	800ab68 <chk_chr+0x12>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3301      	adds	r3, #1
 800ab66:	607b      	str	r3, [r7, #4]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <chk_chr+0x26>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d1f2      	bne.n	800ab62 <chk_chr+0xc>
	return *str;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab96:	2300      	movs	r3, #0
 800ab98:	60bb      	str	r3, [r7, #8]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	60fb      	str	r3, [r7, #12]
 800ab9e:	e029      	b.n	800abf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aba0:	4a27      	ldr	r2, [pc, #156]	; (800ac40 <chk_lock+0xb4>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	011b      	lsls	r3, r3, #4
 800aba6:	4413      	add	r3, r2
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d01d      	beq.n	800abea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abae:	4a24      	ldr	r2, [pc, #144]	; (800ac40 <chk_lock+0xb4>)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	4413      	add	r3, r2
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d116      	bne.n	800abee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800abc0:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <chk_lock+0xb4>)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	4413      	add	r3, r2
 800abc8:	3304      	adds	r3, #4
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d10c      	bne.n	800abee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abd4:	4a1a      	ldr	r2, [pc, #104]	; (800ac40 <chk_lock+0xb4>)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	4413      	add	r3, r2
 800abdc:	3308      	adds	r3, #8
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d102      	bne.n	800abee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800abe8:	e007      	b.n	800abfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3301      	adds	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0d2      	beq.n	800aba0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d109      	bne.n	800ac14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d102      	bne.n	800ac0c <chk_lock+0x80>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d101      	bne.n	800ac10 <chk_lock+0x84>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e010      	b.n	800ac32 <chk_lock+0xa6>
 800ac10:	2312      	movs	r3, #18
 800ac12:	e00e      	b.n	800ac32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d108      	bne.n	800ac2c <chk_lock+0xa0>
 800ac1a:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <chk_lock+0xb4>)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	4413      	add	r3, r2
 800ac22:	330c      	adds	r3, #12
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2a:	d101      	bne.n	800ac30 <chk_lock+0xa4>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	e000      	b.n	800ac32 <chk_lock+0xa6>
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	200000a4 	.word	0x200000a4

0800ac44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	e002      	b.n	800ac56 <enq_lock+0x12>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3301      	adds	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d106      	bne.n	800ac6a <enq_lock+0x26>
 800ac5c:	4a09      	ldr	r2, [pc, #36]	; (800ac84 <enq_lock+0x40>)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	4413      	add	r3, r2
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1f2      	bne.n	800ac50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	200000a4 	.word	0x200000a4

0800ac88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	e01f      	b.n	800acd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac98:	4a41      	ldr	r2, [pc, #260]	; (800ada0 <inc_lock+0x118>)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	4413      	add	r3, r2
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d113      	bne.n	800acd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800acaa:	4a3d      	ldr	r2, [pc, #244]	; (800ada0 <inc_lock+0x118>)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	4413      	add	r3, r2
 800acb2:	3304      	adds	r3, #4
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800acba:	429a      	cmp	r2, r3
 800acbc:	d109      	bne.n	800acd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800acbe:	4a38      	ldr	r2, [pc, #224]	; (800ada0 <inc_lock+0x118>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	4413      	add	r3, r2
 800acc6:	3308      	adds	r3, #8
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800acce:	429a      	cmp	r2, r3
 800acd0:	d006      	beq.n	800ace0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3301      	adds	r3, #1
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0dc      	beq.n	800ac98 <inc_lock+0x10>
 800acde:	e000      	b.n	800ace2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ace0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d132      	bne.n	800ad4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	e002      	b.n	800acf4 <inc_lock+0x6c>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3301      	adds	r3, #1
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <inc_lock+0x80>
 800acfa:	4a29      	ldr	r2, [pc, #164]	; (800ada0 <inc_lock+0x118>)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	4413      	add	r3, r2
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f2      	bne.n	800acee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d101      	bne.n	800ad12 <inc_lock+0x8a>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e040      	b.n	800ad94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	4922      	ldr	r1, [pc, #136]	; (800ada0 <inc_lock+0x118>)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	440b      	add	r3, r1
 800ad1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	491e      	ldr	r1, [pc, #120]	; (800ada0 <inc_lock+0x118>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	440b      	add	r3, r1
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	695a      	ldr	r2, [r3, #20]
 800ad34:	491a      	ldr	r1, [pc, #104]	; (800ada0 <inc_lock+0x118>)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	011b      	lsls	r3, r3, #4
 800ad3a:	440b      	add	r3, r1
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ad40:	4a17      	ldr	r2, [pc, #92]	; (800ada0 <inc_lock+0x118>)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	011b      	lsls	r3, r3, #4
 800ad46:	4413      	add	r3, r2
 800ad48:	330c      	adds	r3, #12
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <inc_lock+0xe0>
 800ad54:	4a12      	ldr	r2, [pc, #72]	; (800ada0 <inc_lock+0x118>)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	4413      	add	r3, r2
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <inc_lock+0xe0>
 800ad64:	2300      	movs	r3, #0
 800ad66:	e015      	b.n	800ad94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d108      	bne.n	800ad80 <inc_lock+0xf8>
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	; (800ada0 <inc_lock+0x118>)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	011b      	lsls	r3, r3, #4
 800ad74:	4413      	add	r3, r2
 800ad76:	330c      	adds	r3, #12
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	e001      	b.n	800ad84 <inc_lock+0xfc>
 800ad80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad84:	4906      	ldr	r1, [pc, #24]	; (800ada0 <inc_lock+0x118>)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	440b      	add	r3, r1
 800ad8c:	330c      	adds	r3, #12
 800ad8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	200000a4 	.word	0x200000a4

0800ada4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3b01      	subs	r3, #1
 800adb0:	607b      	str	r3, [r7, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d125      	bne.n	800ae04 <dec_lock+0x60>
		n = Files[i].ctr;
 800adb8:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <dec_lock+0x74>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	4413      	add	r3, r2
 800adc0:	330c      	adds	r3, #12
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800adc6:	89fb      	ldrh	r3, [r7, #14]
 800adc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adcc:	d101      	bne.n	800add2 <dec_lock+0x2e>
 800adce:	2300      	movs	r3, #0
 800add0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800add2:	89fb      	ldrh	r3, [r7, #14]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <dec_lock+0x3a>
 800add8:	89fb      	ldrh	r3, [r7, #14]
 800adda:	3b01      	subs	r3, #1
 800addc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800adde:	4a0e      	ldr	r2, [pc, #56]	; (800ae18 <dec_lock+0x74>)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	011b      	lsls	r3, r3, #4
 800ade4:	4413      	add	r3, r2
 800ade6:	330c      	adds	r3, #12
 800ade8:	89fa      	ldrh	r2, [r7, #14]
 800adea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800adec:	89fb      	ldrh	r3, [r7, #14]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d105      	bne.n	800adfe <dec_lock+0x5a>
 800adf2:	4a09      	ldr	r2, [pc, #36]	; (800ae18 <dec_lock+0x74>)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	4413      	add	r3, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	737b      	strb	r3, [r7, #13]
 800ae02:	e001      	b.n	800ae08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ae04:	2302      	movs	r3, #2
 800ae06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ae08:	7b7b      	ldrb	r3, [r7, #13]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	200000a4 	.word	0x200000a4

0800ae1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	e010      	b.n	800ae4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ae2a:	4a0d      	ldr	r2, [pc, #52]	; (800ae60 <clear_lock+0x44>)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	4413      	add	r3, r2
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d105      	bne.n	800ae46 <clear_lock+0x2a>
 800ae3a:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <clear_lock+0x44>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	4413      	add	r3, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0eb      	beq.n	800ae2a <clear_lock+0xe>
	}
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	200000a4 	.word	0x200000a4

0800ae64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	78db      	ldrb	r3, [r3, #3]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d034      	beq.n	800aee2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7858      	ldrb	r0, [r3, #1]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae88:	2301      	movs	r3, #1
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	f7ff fd40 	bl	800a910 <disk_write>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	73fb      	strb	r3, [r7, #15]
 800ae9a:	e022      	b.n	800aee2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d217      	bcs.n	800aee2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	789b      	ldrb	r3, [r3, #2]
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	e010      	b.n	800aedc <sync_window+0x78>
					wsect += fs->fsize;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4413      	add	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7858      	ldrb	r0, [r3, #1]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aece:	2301      	movs	r3, #1
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	f7ff fd1d 	bl	800a910 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	613b      	str	r3, [r7, #16]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d8eb      	bhi.n	800aeba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	429a      	cmp	r2, r3
 800af02:	d01b      	beq.n	800af3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff ffad 	bl	800ae64 <sync_window>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d113      	bne.n	800af3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7858      	ldrb	r0, [r3, #1]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af1e:	2301      	movs	r3, #1
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	f7ff fcd5 	bl	800a8d0 <disk_read>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800af32:	2301      	movs	r3, #1
 800af34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff ff87 	bl	800ae64 <sync_window>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d158      	bne.n	800b012 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b03      	cmp	r3, #3
 800af66:	d148      	bne.n	800affa <sync_fs+0xb2>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	791b      	ldrb	r3, [r3, #4]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d144      	bne.n	800affa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3334      	adds	r3, #52	; 0x34
 800af74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff fda9 	bl	800aad2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3334      	adds	r3, #52	; 0x34
 800af84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af88:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff fd38 	bl	800aa02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3334      	adds	r3, #52	; 0x34
 800af96:	4921      	ldr	r1, [pc, #132]	; (800b01c <sync_fs+0xd4>)
 800af98:	4618      	mov	r0, r3
 800af9a:	f7ff fd4d 	bl	800aa38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3334      	adds	r3, #52	; 0x34
 800afa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800afa6:	491e      	ldr	r1, [pc, #120]	; (800b020 <sync_fs+0xd8>)
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff fd45 	bl	800aa38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3334      	adds	r3, #52	; 0x34
 800afb2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7ff fd3b 	bl	800aa38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3334      	adds	r3, #52	; 0x34
 800afc6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7ff fd31 	bl	800aa38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	7858      	ldrb	r0, [r3, #1]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afee:	2301      	movs	r3, #1
 800aff0:	f7ff fc8e 	bl	800a910 <disk_write>
			fs->fsi_flag = 0;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff fca4 	bl	800a950 <disk_ioctl>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <sync_fs+0xca>
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b012:	7bfb      	ldrb	r3, [r7, #15]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	41615252 	.word	0x41615252
 800b020:	61417272 	.word	0x61417272

0800b024 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3b02      	subs	r3, #2
 800b032:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	3b02      	subs	r3, #2
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d301      	bcc.n	800b044 <clust2sect+0x20>
 800b040:	2300      	movs	r3, #0
 800b042:	e008      	b.n	800b056 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	895b      	ldrh	r3, [r3, #10]
 800b048:	461a      	mov	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	fb03 f202 	mul.w	r2, r3, r2
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	4413      	add	r3, r2
}
 800b056:	4618      	mov	r0, r3
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d904      	bls.n	800b082 <get_fat+0x20>
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d302      	bcc.n	800b088 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b082:	2301      	movs	r3, #1
 800b084:	617b      	str	r3, [r7, #20]
 800b086:	e08f      	b.n	800b1a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
 800b08c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b03      	cmp	r3, #3
 800b094:	d062      	beq.n	800b15c <get_fat+0xfa>
 800b096:	2b03      	cmp	r3, #3
 800b098:	dc7c      	bgt.n	800b194 <get_fat+0x132>
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d002      	beq.n	800b0a4 <get_fat+0x42>
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d042      	beq.n	800b128 <get_fat+0xc6>
 800b0a2:	e077      	b.n	800b194 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	085b      	lsrs	r3, r3, #1
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	0a5b      	lsrs	r3, r3, #9
 800b0ba:	4413      	add	r3, r2
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6938      	ldr	r0, [r7, #16]
 800b0c0:	f7ff ff14 	bl	800aeec <move_window>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d167      	bne.n	800b19a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	60fa      	str	r2, [r7, #12]
 800b0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	0a5b      	lsrs	r3, r3, #9
 800b0e6:	4413      	add	r3, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f7ff fefe 	bl	800aeec <move_window>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d153      	bne.n	800b19e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4413      	add	r3, r2
 800b100:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b104:	021b      	lsls	r3, r3, #8
 800b106:	461a      	mov	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <get_fat+0xbc>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	091b      	lsrs	r3, r3, #4
 800b11c:	e002      	b.n	800b124 <get_fat+0xc2>
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b124:	617b      	str	r3, [r7, #20]
			break;
 800b126:	e03f      	b.n	800b1a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	0a1b      	lsrs	r3, r3, #8
 800b130:	4413      	add	r3, r2
 800b132:	4619      	mov	r1, r3
 800b134:	6938      	ldr	r0, [r7, #16]
 800b136:	f7ff fed9 	bl	800aeec <move_window>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d130      	bne.n	800b1a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b14e:	4413      	add	r3, r2
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff fc1b 	bl	800a98c <ld_word>
 800b156:	4603      	mov	r3, r0
 800b158:	617b      	str	r3, [r7, #20]
			break;
 800b15a:	e025      	b.n	800b1a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	09db      	lsrs	r3, r3, #7
 800b164:	4413      	add	r3, r2
 800b166:	4619      	mov	r1, r3
 800b168:	6938      	ldr	r0, [r7, #16]
 800b16a:	f7ff febf 	bl	800aeec <move_window>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d118      	bne.n	800b1a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b182:	4413      	add	r3, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fc19 	bl	800a9bc <ld_dword>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b190:	617b      	str	r3, [r7, #20]
			break;
 800b192:	e009      	b.n	800b1a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	e006      	b.n	800b1a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b19a:	bf00      	nop
 800b19c:	e004      	b.n	800b1a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b1a6:	bf00      	nop
		}
	}

	return val;
 800b1a8:	697b      	ldr	r3, [r7, #20]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b1b2:	b590      	push	{r4, r7, lr}
 800b1b4:	b089      	sub	sp, #36	; 0x24
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	f240 80d2 	bls.w	800b36e <put_fat+0x1bc>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	f080 80cc 	bcs.w	800b36e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	f000 8096 	beq.w	800b30c <put_fat+0x15a>
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	f300 80cd 	bgt.w	800b380 <put_fat+0x1ce>
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d002      	beq.n	800b1f0 <put_fat+0x3e>
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d06e      	beq.n	800b2cc <put_fat+0x11a>
 800b1ee:	e0c7      	b.n	800b380 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	0a5b      	lsrs	r3, r3, #9
 800b206:	4413      	add	r3, r2
 800b208:	4619      	mov	r1, r3
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fe6e 	bl	800aeec <move_window>
 800b210:	4603      	mov	r3, r0
 800b212:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b214:	7ffb      	ldrb	r3, [r7, #31]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f040 80ab 	bne.w	800b372 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	1c59      	adds	r1, r3, #1
 800b226:	61b9      	str	r1, [r7, #24]
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	4413      	add	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00d      	beq.n	800b256 <put_fat+0xa4>
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b25b      	sxtb	r3, r3
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	b25a      	sxtb	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	b25b      	sxtb	r3, r3
 800b24e:	4313      	orrs	r3, r2
 800b250:	b25b      	sxtb	r3, r3
 800b252:	b2db      	uxtb	r3, r3
 800b254:	e001      	b.n	800b25a <put_fat+0xa8>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2201      	movs	r2, #1
 800b262:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	0a5b      	lsrs	r3, r3, #9
 800b26c:	4413      	add	r3, r2
 800b26e:	4619      	mov	r1, r3
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff fe3b 	bl	800aeec <move_window>
 800b276:	4603      	mov	r3, r0
 800b278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d17a      	bne.n	800b376 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28c:	4413      	add	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <put_fat+0xf0>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	091b      	lsrs	r3, r3, #4
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	e00e      	b.n	800b2c0 <put_fat+0x10e>
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b25b      	sxtb	r3, r3
 800b2a8:	f023 030f 	bic.w	r3, r3, #15
 800b2ac:	b25a      	sxtb	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	b25b      	sxtb	r3, r3
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	b25b      	sxtb	r3, r3
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	70da      	strb	r2, [r3, #3]
			break;
 800b2ca:	e059      	b.n	800b380 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	0a1b      	lsrs	r3, r3, #8
 800b2d4:	4413      	add	r3, r2
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fe07 	bl	800aeec <move_window>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2e2:	7ffb      	ldrb	r3, [r7, #31]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d148      	bne.n	800b37a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b2f6:	4413      	add	r3, r2
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	b292      	uxth	r2, r2
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fb7f 	bl	800aa02 <st_word>
			fs->wflag = 1;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2201      	movs	r2, #1
 800b308:	70da      	strb	r2, [r3, #3]
			break;
 800b30a:	e039      	b.n	800b380 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	09db      	lsrs	r3, r3, #7
 800b314:	4413      	add	r3, r2
 800b316:	4619      	mov	r1, r3
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff fde7 	bl	800aeec <move_window>
 800b31e:	4603      	mov	r3, r0
 800b320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b322:	7ffb      	ldrb	r3, [r7, #31]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d12a      	bne.n	800b37e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b33c:	4413      	add	r3, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fb3c 	bl	800a9bc <ld_dword>
 800b344:	4603      	mov	r3, r0
 800b346:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b34a:	4323      	orrs	r3, r4
 800b34c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b35c:	4413      	add	r3, r2
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fb69 	bl	800aa38 <st_dword>
			fs->wflag = 1;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	70da      	strb	r2, [r3, #3]
			break;
 800b36c:	e008      	b.n	800b380 <put_fat+0x1ce>
		}
	}
 800b36e:	bf00      	nop
 800b370:	e006      	b.n	800b380 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b372:	bf00      	nop
 800b374:	e004      	b.n	800b380 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b376:	bf00      	nop
 800b378:	e002      	b.n	800b380 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b37a:	bf00      	nop
 800b37c:	e000      	b.n	800b380 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b37e:	bf00      	nop
	return res;
 800b380:	7ffb      	ldrb	r3, [r7, #31]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3724      	adds	r7, #36	; 0x24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd90      	pop	{r4, r7, pc}

0800b38a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b088      	sub	sp, #32
 800b38e:	af00      	add	r7, sp, #0
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d904      	bls.n	800b3b0 <remove_chain+0x26>
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d301      	bcc.n	800b3b4 <remove_chain+0x2a>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e04b      	b.n	800b44c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00c      	beq.n	800b3d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	69b8      	ldr	r0, [r7, #24]
 800b3c2:	f7ff fef6 	bl	800b1b2 <put_fat>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b3ca:	7ffb      	ldrb	r3, [r7, #31]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <remove_chain+0x4a>
 800b3d0:	7ffb      	ldrb	r3, [r7, #31]
 800b3d2:	e03b      	b.n	800b44c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fe43 	bl	800b062 <get_fat>
 800b3dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d031      	beq.n	800b448 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d101      	bne.n	800b3ee <remove_chain+0x64>
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e02e      	b.n	800b44c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d101      	bne.n	800b3fa <remove_chain+0x70>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e028      	b.n	800b44c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	69b8      	ldr	r0, [r7, #24]
 800b400:	f7ff fed7 	bl	800b1b2 <put_fat>
 800b404:	4603      	mov	r3, r0
 800b406:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b408:	7ffb      	ldrb	r3, [r7, #31]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <remove_chain+0x88>
 800b40e:	7ffb      	ldrb	r3, [r7, #31]
 800b410:	e01c      	b.n	800b44c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	695a      	ldr	r2, [r3, #20]
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	3b02      	subs	r3, #2
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d20b      	bcs.n	800b438 <remove_chain+0xae>
			fs->free_clst++;
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	791b      	ldrb	r3, [r3, #4]
 800b42e:	f043 0301 	orr.w	r3, r3, #1
 800b432:	b2da      	uxtb	r2, r3
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	429a      	cmp	r2, r3
 800b444:	d3c6      	bcc.n	800b3d4 <remove_chain+0x4a>
 800b446:	e000      	b.n	800b44a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b448:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3720      	adds	r7, #32
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10d      	bne.n	800b486 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <create_chain+0x2c>
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	69ba      	ldr	r2, [r7, #24]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d31b      	bcc.n	800b4b8 <create_chain+0x64>
 800b480:	2301      	movs	r3, #1
 800b482:	61bb      	str	r3, [r7, #24]
 800b484:	e018      	b.n	800b4b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7ff fdea 	bl	800b062 <get_fat>
 800b48e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d801      	bhi.n	800b49a <create_chain+0x46>
 800b496:	2301      	movs	r3, #1
 800b498:	e070      	b.n	800b57c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a0:	d101      	bne.n	800b4a6 <create_chain+0x52>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	e06a      	b.n	800b57c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d201      	bcs.n	800b4b4 <create_chain+0x60>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	e063      	b.n	800b57c <create_chain+0x128>
		scl = clst;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d307      	bcc.n	800b4dc <create_chain+0x88>
				ncl = 2;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4d0:	69fa      	ldr	r2, [r7, #28]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d901      	bls.n	800b4dc <create_chain+0x88>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e04f      	b.n	800b57c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4dc:	69f9      	ldr	r1, [r7, #28]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff fdbf 	bl	800b062 <get_fat>
 800b4e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00e      	beq.n	800b50a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d003      	beq.n	800b4fa <create_chain+0xa6>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d101      	bne.n	800b4fe <create_chain+0xaa>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	e03e      	b.n	800b57c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b4fe:	69fa      	ldr	r2, [r7, #28]
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	429a      	cmp	r2, r3
 800b504:	d1da      	bne.n	800b4bc <create_chain+0x68>
 800b506:	2300      	movs	r3, #0
 800b508:	e038      	b.n	800b57c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b50a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	69f9      	ldr	r1, [r7, #28]
 800b512:	6938      	ldr	r0, [r7, #16]
 800b514:	f7ff fe4d 	bl	800b1b2 <put_fat>
 800b518:	4603      	mov	r3, r0
 800b51a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <create_chain+0xe2>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6938      	ldr	r0, [r7, #16]
 800b52e:	f7ff fe40 	bl	800b1b2 <put_fat>
 800b532:	4603      	mov	r3, r0
 800b534:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d116      	bne.n	800b56a <create_chain+0x116>
		fs->last_clst = ncl;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	69fa      	ldr	r2, [r7, #28]
 800b540:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	695a      	ldr	r2, [r3, #20]
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	3b02      	subs	r3, #2
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d804      	bhi.n	800b55a <create_chain+0x106>
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	1e5a      	subs	r2, r3, #1
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	791b      	ldrb	r3, [r3, #4]
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	b2da      	uxtb	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	711a      	strb	r2, [r3, #4]
 800b568:	e007      	b.n	800b57a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d102      	bne.n	800b576 <create_chain+0x122>
 800b570:	f04f 33ff 	mov.w	r3, #4294967295
 800b574:	e000      	b.n	800b578 <create_chain+0x124>
 800b576:	2301      	movs	r3, #1
 800b578:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b57a:	69fb      	ldr	r3, [r7, #28]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	3304      	adds	r3, #4
 800b59a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	0a5b      	lsrs	r3, r3, #9
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	8952      	ldrh	r2, [r2, #10]
 800b5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	613a      	str	r2, [r7, #16]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <clmt_clust+0x3a>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e010      	b.n	800b5e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d307      	bcc.n	800b5d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b5d4:	e7e9      	b.n	800b5aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b5d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	4413      	add	r3, r2
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b602:	d204      	bcs.n	800b60e <dir_sdi+0x22>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f003 031f 	and.w	r3, r3, #31
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b60e:	2302      	movs	r3, #2
 800b610:	e063      	b.n	800b6da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <dir_sdi+0x46>
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d902      	bls.n	800b632 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b630:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10c      	bne.n	800b652 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	095b      	lsrs	r3, r3, #5
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	8912      	ldrh	r2, [r2, #8]
 800b640:	4293      	cmp	r3, r2
 800b642:	d301      	bcc.n	800b648 <dir_sdi+0x5c>
 800b644:	2302      	movs	r3, #2
 800b646:	e048      	b.n	800b6da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	61da      	str	r2, [r3, #28]
 800b650:	e029      	b.n	800b6a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	895b      	ldrh	r3, [r3, #10]
 800b656:	025b      	lsls	r3, r3, #9
 800b658:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b65a:	e019      	b.n	800b690 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6979      	ldr	r1, [r7, #20]
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fcfe 	bl	800b062 <get_fat>
 800b666:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66e:	d101      	bne.n	800b674 <dir_sdi+0x88>
 800b670:	2301      	movs	r3, #1
 800b672:	e032      	b.n	800b6da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d904      	bls.n	800b684 <dir_sdi+0x98>
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	429a      	cmp	r2, r3
 800b682:	d301      	bcc.n	800b688 <dir_sdi+0x9c>
 800b684:	2302      	movs	r3, #2
 800b686:	e028      	b.n	800b6da <dir_sdi+0xee>
			ofs -= csz;
 800b688:	683a      	ldr	r2, [r7, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	429a      	cmp	r2, r3
 800b696:	d2e1      	bcs.n	800b65c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b698:	6979      	ldr	r1, [r7, #20]
 800b69a:	6938      	ldr	r0, [r7, #16]
 800b69c:	f7ff fcc2 	bl	800b024 <clust2sect>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <dir_sdi+0xcc>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e010      	b.n	800b6da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	69da      	ldr	r2, [r3, #28]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	0a5b      	lsrs	r3, r3, #9
 800b6c0:	441a      	add	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d2:	441a      	add	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	3320      	adds	r3, #32
 800b6f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <dir_next+0x28>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b708:	d301      	bcc.n	800b70e <dir_next+0x2c>
 800b70a:	2304      	movs	r3, #4
 800b70c:	e0aa      	b.n	800b864 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b714:	2b00      	cmp	r3, #0
 800b716:	f040 8098 	bne.w	800b84a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	8912      	ldrh	r2, [r2, #8]
 800b734:	4293      	cmp	r3, r2
 800b736:	f0c0 8088 	bcc.w	800b84a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	61da      	str	r2, [r3, #28]
 800b740:	2304      	movs	r3, #4
 800b742:	e08f      	b.n	800b864 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	0a5b      	lsrs	r3, r3, #9
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	8952      	ldrh	r2, [r2, #10]
 800b74c:	3a01      	subs	r2, #1
 800b74e:	4013      	ands	r3, r2
 800b750:	2b00      	cmp	r3, #0
 800b752:	d17a      	bne.n	800b84a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	4619      	mov	r1, r3
 800b75c:	4610      	mov	r0, r2
 800b75e:	f7ff fc80 	bl	800b062 <get_fat>
 800b762:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d801      	bhi.n	800b76e <dir_next+0x8c>
 800b76a:	2302      	movs	r3, #2
 800b76c:	e07a      	b.n	800b864 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b774:	d101      	bne.n	800b77a <dir_next+0x98>
 800b776:	2301      	movs	r3, #1
 800b778:	e074      	b.n	800b864 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	429a      	cmp	r2, r3
 800b782:	d358      	bcc.n	800b836 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d104      	bne.n	800b794 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	61da      	str	r2, [r3, #28]
 800b790:	2304      	movs	r3, #4
 800b792:	e067      	b.n	800b864 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7ff fe59 	bl	800b454 <create_chain>
 800b7a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <dir_next+0xcc>
 800b7aa:	2307      	movs	r3, #7
 800b7ac:	e05a      	b.n	800b864 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d101      	bne.n	800b7b8 <dir_next+0xd6>
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	e055      	b.n	800b864 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7be:	d101      	bne.n	800b7c4 <dir_next+0xe2>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e04f      	b.n	800b864 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fb4d 	bl	800ae64 <sync_window>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <dir_next+0xf2>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e047      	b.n	800b864 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	3334      	adds	r3, #52	; 0x34
 800b7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff f977 	bl	800aad2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	613b      	str	r3, [r7, #16]
 800b7e8:	6979      	ldr	r1, [r7, #20]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f7ff fc1a 	bl	800b024 <clust2sect>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	631a      	str	r2, [r3, #48]	; 0x30
 800b7f6:	e012      	b.n	800b81e <dir_next+0x13c>
						fs->wflag = 1;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fb30 	bl	800ae64 <sync_window>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <dir_next+0x12c>
 800b80a:	2301      	movs	r3, #1
 800b80c:	e02a      	b.n	800b864 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	3301      	adds	r3, #1
 800b812:	613b      	str	r3, [r7, #16]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	895b      	ldrh	r3, [r3, #10]
 800b822:	461a      	mov	r2, r3
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	4293      	cmp	r3, r2
 800b828:	d3e6      	bcc.n	800b7f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	1ad2      	subs	r2, r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b83c:	6979      	ldr	r1, [r7, #20]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff fbf0 	bl	800b024 <clust2sect>
 800b844:	4602      	mov	r2, r0
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85c:	441a      	add	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b87c:	2100      	movs	r1, #0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff feb4 	bl	800b5ec <dir_sdi>
 800b884:	4603      	mov	r3, r0
 800b886:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d12b      	bne.n	800b8e6 <dir_alloc+0x7a>
		n = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	4619      	mov	r1, r3
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f7ff fb27 	bl	800aeec <move_window>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11d      	bne.n	800b8e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2be5      	cmp	r3, #229	; 0xe5
 800b8b0:	d004      	beq.n	800b8bc <dir_alloc+0x50>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d107      	bne.n	800b8cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d102      	bne.n	800b8d0 <dir_alloc+0x64>
 800b8ca:	e00c      	b.n	800b8e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff ff05 	bl	800b6e2 <dir_next>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0d7      	beq.n	800b892 <dir_alloc+0x26>
 800b8e2:	e000      	b.n	800b8e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b8e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	d101      	bne.n	800b8f0 <dir_alloc+0x84>
 800b8ec:	2307      	movs	r3, #7
 800b8ee:	75fb      	strb	r3, [r7, #23]
	return res;
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	331a      	adds	r3, #26
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff f83f 	bl	800a98c <ld_word>
 800b90e:	4603      	mov	r3, r0
 800b910:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b03      	cmp	r3, #3
 800b918:	d109      	bne.n	800b92e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3314      	adds	r3, #20
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff f834 	bl	800a98c <ld_word>
 800b924:	4603      	mov	r3, r0
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b92e:	68fb      	ldr	r3, [r7, #12]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	331a      	adds	r3, #26
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	b292      	uxth	r2, r2
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff f857 	bl	800aa02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d109      	bne.n	800b970 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	f103 0214 	add.w	r2, r3, #20
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	0c1b      	lsrs	r3, r3, #16
 800b966:	b29b      	uxth	r3, r3
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7ff f849 	bl	800aa02 <st_word>
	}
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	331a      	adds	r3, #26
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff f800 	bl	800a98c <ld_word>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <cmp_lfn+0x1e>
 800b992:	2300      	movs	r3, #0
 800b994:	e059      	b.n	800ba4a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4413      	add	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	81fb      	strh	r3, [r7, #14]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	e033      	b.n	800ba1e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b9b6:	4a27      	ldr	r2, [pc, #156]	; (800ba54 <cmp_lfn+0xdc>)
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe ffe1 	bl	800a98c <ld_word>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b9ce:	89fb      	ldrh	r3, [r7, #14]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01a      	beq.n	800ba0a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2bfe      	cmp	r3, #254	; 0xfe
 800b9d8:	d812      	bhi.n	800ba00 <cmp_lfn+0x88>
 800b9da:	89bb      	ldrh	r3, [r7, #12]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f002 f823 	bl	800da28 <ff_wtoupper>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461c      	mov	r4, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	617a      	str	r2, [r7, #20]
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f002 f817 	bl	800da28 <ff_wtoupper>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	d001      	beq.n	800ba04 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ba00:	2300      	movs	r3, #0
 800ba02:	e022      	b.n	800ba4a <cmp_lfn+0xd2>
			}
			wc = uc;
 800ba04:	89bb      	ldrh	r3, [r7, #12]
 800ba06:	81fb      	strh	r3, [r7, #14]
 800ba08:	e006      	b.n	800ba18 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ba0a:	89bb      	ldrh	r3, [r7, #12]
 800ba0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d001      	beq.n	800ba18 <cmp_lfn+0xa0>
 800ba14:	2300      	movs	r3, #0
 800ba16:	e018      	b.n	800ba4a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b0c      	cmp	r3, #12
 800ba22:	d9c8      	bls.n	800b9b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <cmp_lfn+0xd0>
 800ba30:	89fb      	ldrh	r3, [r7, #14]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d008      	beq.n	800ba48 <cmp_lfn+0xd0>
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <cmp_lfn+0xd0>
 800ba44:	2300      	movs	r3, #0
 800ba46:	e000      	b.n	800ba4a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ba48:	2301      	movs	r3, #1
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	371c      	adds	r7, #28
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd90      	pop	{r4, r7, pc}
 800ba52:	bf00      	nop
 800ba54:	0800e29c 	.word	0x0800e29c

0800ba58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	4611      	mov	r1, r2
 800ba64:	461a      	mov	r2, r3
 800ba66:	460b      	mov	r3, r1
 800ba68:	71fb      	strb	r3, [r7, #7]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	330d      	adds	r3, #13
 800ba72:	79ba      	ldrb	r2, [r7, #6]
 800ba74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	330b      	adds	r3, #11
 800ba7a:	220f      	movs	r2, #15
 800ba7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	330c      	adds	r3, #12
 800ba82:	2200      	movs	r2, #0
 800ba84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	331a      	adds	r3, #26
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fe ffb8 	bl	800aa02 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	1e5a      	subs	r2, r3, #1
 800ba96:	4613      	mov	r3, r2
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	82fb      	strh	r3, [r7, #22]
 800baa6:	2300      	movs	r3, #0
 800baa8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800baaa:	8afb      	ldrh	r3, [r7, #22]
 800baac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <put_lfn+0x6c>
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	61fa      	str	r2, [r7, #28]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bac4:	4a17      	ldr	r2, [pc, #92]	; (800bb24 <put_lfn+0xcc>)
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	4413      	add	r3, r2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4413      	add	r3, r2
 800bad2:	8afa      	ldrh	r2, [r7, #22]
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe ff93 	bl	800aa02 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800badc:	8afb      	ldrh	r3, [r7, #22]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d102      	bne.n	800bae8 <put_lfn+0x90>
 800bae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bae6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	3301      	adds	r3, #1
 800baec:	61bb      	str	r3, [r7, #24]
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b0c      	cmp	r3, #12
 800baf2:	d9da      	bls.n	800baaa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800baf4:	8afb      	ldrh	r3, [r7, #22]
 800baf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d006      	beq.n	800bb0c <put_lfn+0xb4>
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	4413      	add	r3, r2
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d103      	bne.n	800bb14 <put_lfn+0xbc>
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	79fa      	ldrb	r2, [r7, #7]
 800bb18:	701a      	strb	r2, [r3, #0]
}
 800bb1a:	bf00      	nop
 800bb1c:	3720      	adds	r7, #32
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	0800e29c 	.word	0x0800e29c

0800bb28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08c      	sub	sp, #48	; 0x30
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bb36:	220b      	movs	r2, #11
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7fe ffa8 	bl	800aa90 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b05      	cmp	r3, #5
 800bb44:	d92b      	bls.n	800bb9e <gen_numname+0x76>
		sr = seq;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bb4a:	e022      	b.n	800bb92 <gen_numname+0x6a>
			wc = *lfn++;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	1c9a      	adds	r2, r3, #2
 800bb50:	607a      	str	r2, [r7, #4]
 800bb52:	881b      	ldrh	r3, [r3, #0]
 800bb54:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb5a:	e017      	b.n	800bb8c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	005a      	lsls	r2, r3, #1
 800bb60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	4413      	add	r3, r2
 800bb68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bb6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb6c:	085b      	lsrs	r3, r3, #1
 800bb6e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d005      	beq.n	800bb86 <gen_numname+0x5e>
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bb80:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bb84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	3301      	adds	r3, #1
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	2b0f      	cmp	r3, #15
 800bb90:	d9e4      	bls.n	800bb5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1d8      	bne.n	800bb4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bb9e:	2307      	movs	r3, #7
 800bba0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 030f 	and.w	r3, r3, #15
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	3330      	adds	r3, #48	; 0x30
 800bbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bbb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb6:	2b39      	cmp	r3, #57	; 0x39
 800bbb8:	d904      	bls.n	800bbc4 <gen_numname+0x9c>
 800bbba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbbe:	3307      	adds	r3, #7
 800bbc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	1e5a      	subs	r2, r3, #1
 800bbc8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bbca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bbce:	4413      	add	r3, r2
 800bbd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbd4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	091b      	lsrs	r3, r3, #4
 800bbdc:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1de      	bne.n	800bba2 <gen_numname+0x7a>
	ns[i] = '~';
 800bbe4:	f107 0214 	add.w	r2, r7, #20
 800bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbea:	4413      	add	r3, r2
 800bbec:	227e      	movs	r2, #126	; 0x7e
 800bbee:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf4:	e002      	b.n	800bbfc <gen_numname+0xd4>
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d205      	bcs.n	800bc10 <gen_numname+0xe8>
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	4413      	add	r3, r2
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b20      	cmp	r3, #32
 800bc0e:	d1f2      	bne.n	800bbf6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	2b07      	cmp	r3, #7
 800bc14:	d808      	bhi.n	800bc28 <gen_numname+0x100>
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	62ba      	str	r2, [r7, #40]	; 0x28
 800bc1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bc20:	4413      	add	r3, r2
 800bc22:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bc26:	e000      	b.n	800bc2a <gen_numname+0x102>
 800bc28:	2120      	movs	r1, #32
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	627a      	str	r2, [r7, #36]	; 0x24
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	460a      	mov	r2, r1
 800bc36:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	2b07      	cmp	r3, #7
 800bc3c:	d9e8      	bls.n	800bc10 <gen_numname+0xe8>
}
 800bc3e:	bf00      	nop
 800bc40:	bf00      	nop
 800bc42:	3730      	adds	r7, #48	; 0x30
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bc54:	230b      	movs	r3, #11
 800bc56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	0852      	lsrs	r2, r2, #1
 800bc5e:	01db      	lsls	r3, r3, #7
 800bc60:	4313      	orrs	r3, r2
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	1c59      	adds	r1, r3, #1
 800bc68:	6079      	str	r1, [r7, #4]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	60bb      	str	r3, [r7, #8]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1ed      	bne.n	800bc58 <sum_sfn+0x10>
	return sum;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b086      	sub	sp, #24
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fca6 	bl	800b5ec <dir_sdi>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <dir_find+0x24>
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	e0a9      	b.n	800be02 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcae:	23ff      	movs	r3, #255	; 0xff
 800bcb0:	753b      	strb	r3, [r7, #20]
 800bcb2:	7d3b      	ldrb	r3, [r7, #20]
 800bcb4:	757b      	strb	r3, [r7, #21]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6938      	ldr	r0, [r7, #16]
 800bcc6:	f7ff f911 	bl	800aeec <move_window>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f040 8090 	bne.w	800bdf6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <dir_find+0x60>
 800bce4:	2304      	movs	r3, #4
 800bce6:	75fb      	strb	r3, [r7, #23]
 800bce8:	e08a      	b.n	800be00 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	330b      	adds	r3, #11
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcf6:	73fb      	strb	r3, [r7, #15]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bcfe:	7dbb      	ldrb	r3, [r7, #22]
 800bd00:	2be5      	cmp	r3, #229	; 0xe5
 800bd02:	d007      	beq.n	800bd14 <dir_find+0x8a>
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d009      	beq.n	800bd22 <dir_find+0x98>
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	2b0f      	cmp	r3, #15
 800bd12:	d006      	beq.n	800bd22 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd14:	23ff      	movs	r3, #255	; 0xff
 800bd16:	757b      	strb	r3, [r7, #21]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1e:	631a      	str	r2, [r3, #48]	; 0x30
 800bd20:	e05e      	b.n	800bde0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	2b0f      	cmp	r3, #15
 800bd26:	d136      	bne.n	800bd96 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bd2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d154      	bne.n	800bde0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bd36:	7dbb      	ldrb	r3, [r7, #22]
 800bd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00d      	beq.n	800bd5c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	7b5b      	ldrb	r3, [r3, #13]
 800bd46:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bd48:	7dbb      	ldrb	r3, [r7, #22]
 800bd4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd4e:	75bb      	strb	r3, [r7, #22]
 800bd50:	7dbb      	ldrb	r3, [r7, #22]
 800bd52:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	695a      	ldr	r2, [r3, #20]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd5c:	7dba      	ldrb	r2, [r7, #22]
 800bd5e:	7d7b      	ldrb	r3, [r7, #21]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d115      	bne.n	800bd90 <dir_find+0x106>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	330d      	adds	r3, #13
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	7d3a      	ldrb	r2, [r7, #20]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d10e      	bne.n	800bd90 <dir_find+0x106>
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7ff fdfb 	bl	800b978 <cmp_lfn>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <dir_find+0x106>
 800bd88:	7d7b      	ldrb	r3, [r7, #21]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	e000      	b.n	800bd92 <dir_find+0x108>
 800bd90:	23ff      	movs	r3, #255	; 0xff
 800bd92:	757b      	strb	r3, [r7, #21]
 800bd94:	e024      	b.n	800bde0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd96:	7d7b      	ldrb	r3, [r7, #21]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <dir_find+0x126>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff ff51 	bl	800bc48 <sum_sfn>
 800bda6:	4603      	mov	r3, r0
 800bda8:	461a      	mov	r2, r3
 800bdaa:	7d3b      	ldrb	r3, [r7, #20]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d024      	beq.n	800bdfa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <dir_find+0x14a>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a18      	ldr	r0, [r3, #32]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3324      	adds	r3, #36	; 0x24
 800bdc6:	220b      	movs	r2, #11
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f7fe fe9d 	bl	800ab08 <mem_cmp>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d014      	beq.n	800bdfe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bdd4:	23ff      	movs	r3, #255	; 0xff
 800bdd6:	757b      	strb	r3, [r7, #21]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bde0:	2100      	movs	r1, #0
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fc7d 	bl	800b6e2 <dir_next>
 800bde8:	4603      	mov	r3, r0
 800bdea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f43f af65 	beq.w	800bcbe <dir_find+0x34>
 800bdf4:	e004      	b.n	800be00 <dir_find+0x176>
		if (res != FR_OK) break;
 800bdf6:	bf00      	nop
 800bdf8:	e002      	b.n	800be00 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bdfa:	bf00      	nop
 800bdfc:	e000      	b.n	800be00 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bdfe:	bf00      	nop

	return res;
 800be00:	7dfb      	ldrb	r3, [r7, #23]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08c      	sub	sp, #48	; 0x30
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <dir_register+0x20>
 800be28:	2306      	movs	r3, #6
 800be2a:	e0e0      	b.n	800bfee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800be2c:	2300      	movs	r3, #0
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
 800be30:	e002      	b.n	800be38 <dir_register+0x2c>
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	3301      	adds	r3, #1
 800be36:	627b      	str	r3, [r7, #36]	; 0x24
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	68da      	ldr	r2, [r3, #12]
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	4413      	add	r3, r2
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f4      	bne.n	800be32 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800be4e:	f107 030c 	add.w	r3, r7, #12
 800be52:	220c      	movs	r2, #12
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe fe1b 	bl	800aa90 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d032      	beq.n	800beca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2240      	movs	r2, #64	; 0x40
 800be68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800be6c:	2301      	movs	r3, #1
 800be6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be70:	e016      	b.n	800bea0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	68da      	ldr	r2, [r3, #12]
 800be7c:	f107 010c 	add.w	r1, r7, #12
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	f7ff fe51 	bl	800bb28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff feff 	bl	800bc8a <dir_find>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800be92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	3301      	adds	r3, #1
 800be9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	2b63      	cmp	r3, #99	; 0x63
 800bea4:	d9e5      	bls.n	800be72 <dir_register+0x66>
 800bea6:	e000      	b.n	800beaa <dir_register+0x9e>
			if (res != FR_OK) break;
 800bea8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beac:	2b64      	cmp	r3, #100	; 0x64
 800beae:	d101      	bne.n	800beb4 <dir_register+0xa8>
 800beb0:	2307      	movs	r3, #7
 800beb2:	e09c      	b.n	800bfee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800beb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d002      	beq.n	800bec2 <dir_register+0xb6>
 800bebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bec0:	e095      	b.n	800bfee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bec2:	7dfa      	ldrb	r2, [r7, #23]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d007      	beq.n	800bee4 <dir_register+0xd8>
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	330c      	adds	r3, #12
 800bed8:	4a47      	ldr	r2, [pc, #284]	; (800bff8 <dir_register+0x1ec>)
 800beda:	fba2 2303 	umull	r2, r3, r2, r3
 800bede:	089b      	lsrs	r3, r3, #2
 800bee0:	3301      	adds	r3, #1
 800bee2:	e000      	b.n	800bee6 <dir_register+0xda>
 800bee4:	2301      	movs	r3, #1
 800bee6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bee8:	6a39      	ldr	r1, [r7, #32]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fcbe 	bl	800b86c <dir_alloc>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800befa:	2b00      	cmp	r3, #0
 800befc:	d148      	bne.n	800bf90 <dir_register+0x184>
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	623b      	str	r3, [r7, #32]
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d042      	beq.n	800bf90 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	695a      	ldr	r2, [r3, #20]
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	015b      	lsls	r3, r3, #5
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fb68 	bl	800b5ec <dir_sdi>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bf22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d132      	bne.n	800bf90 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3324      	adds	r3, #36	; 0x24
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff fe8a 	bl	800bc48 <sum_sfn>
 800bf34:	4603      	mov	r3, r0
 800bf36:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	69f8      	ldr	r0, [r7, #28]
 800bf40:	f7fe ffd4 	bl	800aeec <move_window>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bf4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d11d      	bne.n	800bf8e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	68d8      	ldr	r0, [r3, #12]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a19      	ldr	r1, [r3, #32]
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	7efb      	ldrb	r3, [r7, #27]
 800bf60:	f7ff fd7a 	bl	800ba58 <put_lfn>
				fs->wflag = 1;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	2201      	movs	r2, #1
 800bf68:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff fbb8 	bl	800b6e2 <dir_next>
 800bf72:	4603      	mov	r3, r0
 800bf74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bf78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d107      	bne.n	800bf90 <dir_register+0x184>
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	623b      	str	r3, [r7, #32]
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1d5      	bne.n	800bf38 <dir_register+0x12c>
 800bf8c:	e000      	b.n	800bf90 <dir_register+0x184>
				if (res != FR_OK) break;
 800bf8e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d128      	bne.n	800bfea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	69f8      	ldr	r0, [r7, #28]
 800bfa0:	f7fe ffa4 	bl	800aeec <move_window>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bfaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d11b      	bne.n	800bfea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe fd89 	bl	800aad2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a18      	ldr	r0, [r3, #32]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3324      	adds	r3, #36	; 0x24
 800bfc8:	220b      	movs	r2, #11
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f7fe fd60 	bl	800aa90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	f002 0218 	and.w	r2, r2, #24
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bfea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3730      	adds	r7, #48	; 0x30
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	4ec4ec4f 	.word	0x4ec4ec4f

0800bffc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08a      	sub	sp, #40	; 0x28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	1c5a      	adds	r2, r3, #1
 800c020:	61ba      	str	r2, [r7, #24]
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	4413      	add	r3, r2
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c02c:	2b1f      	cmp	r3, #31
 800c02e:	d940      	bls.n	800c0b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c032:	2b2f      	cmp	r3, #47	; 0x2f
 800c034:	d006      	beq.n	800c044 <create_name+0x48>
 800c036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c038:	2b5c      	cmp	r3, #92	; 0x5c
 800c03a:	d110      	bne.n	800c05e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c03c:	e002      	b.n	800c044 <create_name+0x48>
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	3301      	adds	r3, #1
 800c042:	61bb      	str	r3, [r7, #24]
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	4413      	add	r3, r2
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2b2f      	cmp	r3, #47	; 0x2f
 800c04e:	d0f6      	beq.n	800c03e <create_name+0x42>
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b5c      	cmp	r3, #92	; 0x5c
 800c05a:	d0f0      	beq.n	800c03e <create_name+0x42>
			break;
 800c05c:	e02a      	b.n	800c0b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2bfe      	cmp	r3, #254	; 0xfe
 800c062:	d901      	bls.n	800c068 <create_name+0x6c>
 800c064:	2306      	movs	r3, #6
 800c066:	e177      	b.n	800c358 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c070:	2101      	movs	r1, #1
 800c072:	4618      	mov	r0, r3
 800c074:	f001 fc9c 	bl	800d9b0 <ff_convert>
 800c078:	4603      	mov	r3, r0
 800c07a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c07c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <create_name+0x8a>
 800c082:	2306      	movs	r3, #6
 800c084:	e168      	b.n	800c358 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c088:	2b7f      	cmp	r3, #127	; 0x7f
 800c08a:	d809      	bhi.n	800c0a0 <create_name+0xa4>
 800c08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c08e:	4619      	mov	r1, r3
 800c090:	48b3      	ldr	r0, [pc, #716]	; (800c360 <create_name+0x364>)
 800c092:	f7fe fd60 	bl	800ab56 <chk_chr>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <create_name+0xa4>
 800c09c:	2306      	movs	r3, #6
 800c09e:	e15b      	b.n	800c358 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	617a      	str	r2, [r7, #20]
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c0b0:	e7b4      	b.n	800c01c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c0b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	441a      	add	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c0be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c0:	2b1f      	cmp	r3, #31
 800c0c2:	d801      	bhi.n	800c0c8 <create_name+0xcc>
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	e000      	b.n	800c0ca <create_name+0xce>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c0ce:	e011      	b.n	800c0f4 <create_name+0xf8>
		w = lfn[di - 1];
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	4413      	add	r3, r2
 800c0de:	881b      	ldrh	r3, [r3, #0]
 800c0e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c0e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d002      	beq.n	800c0ee <create_name+0xf2>
 800c0e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ec:	d106      	bne.n	800c0fc <create_name+0x100>
		di--;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1ea      	bne.n	800c0d0 <create_name+0xd4>
 800c0fa:	e000      	b.n	800c0fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c0fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4413      	add	r3, r2
 800c106:	2200      	movs	r2, #0
 800c108:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <create_name+0x118>
 800c110:	2306      	movs	r3, #6
 800c112:	e121      	b.n	800c358 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3324      	adds	r3, #36	; 0x24
 800c118:	220b      	movs	r2, #11
 800c11a:	2120      	movs	r1, #32
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fcd8 	bl	800aad2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c122:	2300      	movs	r3, #0
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	e002      	b.n	800c12e <create_name+0x132>
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	3301      	adds	r3, #1
 800c12c:	61bb      	str	r3, [r7, #24]
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	2b20      	cmp	r3, #32
 800c13a:	d0f5      	beq.n	800c128 <create_name+0x12c>
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4413      	add	r3, r2
 800c144:	881b      	ldrh	r3, [r3, #0]
 800c146:	2b2e      	cmp	r3, #46	; 0x2e
 800c148:	d0ee      	beq.n	800c128 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d009      	beq.n	800c164 <create_name+0x168>
 800c150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c154:	f043 0303 	orr.w	r3, r3, #3
 800c158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c15c:	e002      	b.n	800c164 <create_name+0x168>
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	3b01      	subs	r3, #1
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d009      	beq.n	800c17e <create_name+0x182>
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c170:	3b01      	subs	r3, #1
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	2b2e      	cmp	r3, #46	; 0x2e
 800c17c:	d1ef      	bne.n	800c15e <create_name+0x162>

	i = b = 0; ni = 8;
 800c17e:	2300      	movs	r3, #0
 800c180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c184:	2300      	movs	r3, #0
 800c186:	623b      	str	r3, [r7, #32]
 800c188:	2308      	movs	r3, #8
 800c18a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	61ba      	str	r2, [r7, #24]
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c19c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8090 	beq.w	800c2c4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c1a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a6:	2b20      	cmp	r3, #32
 800c1a8:	d006      	beq.n	800c1b8 <create_name+0x1bc>
 800c1aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ae:	d10a      	bne.n	800c1c6 <create_name+0x1ca>
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d006      	beq.n	800c1c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1bc:	f043 0303 	orr.w	r3, r3, #3
 800c1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1c4:	e07d      	b.n	800c2c2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c1c6:	6a3a      	ldr	r2, [r7, #32]
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d203      	bcs.n	800c1d6 <create_name+0x1da>
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d123      	bne.n	800c21e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	2b0b      	cmp	r3, #11
 800c1da:	d106      	bne.n	800c1ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1e0:	f043 0303 	orr.w	r3, r3, #3
 800c1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1e8:	e06f      	b.n	800c2ca <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d005      	beq.n	800c1fe <create_name+0x202>
 800c1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1f6:	f043 0303 	orr.w	r3, r3, #3
 800c1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	429a      	cmp	r2, r3
 800c204:	d860      	bhi.n	800c2c8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	61bb      	str	r3, [r7, #24]
 800c20a:	2308      	movs	r3, #8
 800c20c:	623b      	str	r3, [r7, #32]
 800c20e:	230b      	movs	r3, #11
 800c210:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c21c:	e051      	b.n	800c2c2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c220:	2b7f      	cmp	r3, #127	; 0x7f
 800c222:	d914      	bls.n	800c24e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c226:	2100      	movs	r1, #0
 800c228:	4618      	mov	r0, r3
 800c22a:	f001 fbc1 	bl	800d9b0 <ff_convert>
 800c22e:	4603      	mov	r3, r0
 800c230:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c234:	2b00      	cmp	r3, #0
 800c236:	d004      	beq.n	800c242 <create_name+0x246>
 800c238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c23a:	3b80      	subs	r3, #128	; 0x80
 800c23c:	4a49      	ldr	r2, [pc, #292]	; (800c364 <create_name+0x368>)
 800c23e:	5cd3      	ldrb	r3, [r2, r3]
 800c240:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c246:	f043 0302 	orr.w	r3, r3, #2
 800c24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c24e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c250:	2b00      	cmp	r3, #0
 800c252:	d007      	beq.n	800c264 <create_name+0x268>
 800c254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c256:	4619      	mov	r1, r3
 800c258:	4843      	ldr	r0, [pc, #268]	; (800c368 <create_name+0x36c>)
 800c25a:	f7fe fc7c 	bl	800ab56 <chk_chr>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d008      	beq.n	800c276 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c264:	235f      	movs	r3, #95	; 0x5f
 800c266:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c26c:	f043 0303 	orr.w	r3, r3, #3
 800c270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c274:	e01b      	b.n	800c2ae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c278:	2b40      	cmp	r3, #64	; 0x40
 800c27a:	d909      	bls.n	800c290 <create_name+0x294>
 800c27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c27e:	2b5a      	cmp	r3, #90	; 0x5a
 800c280:	d806      	bhi.n	800c290 <create_name+0x294>
					b |= 2;
 800c282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c286:	f043 0302 	orr.w	r3, r3, #2
 800c28a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c28e:	e00e      	b.n	800c2ae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c292:	2b60      	cmp	r3, #96	; 0x60
 800c294:	d90b      	bls.n	800c2ae <create_name+0x2b2>
 800c296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c298:	2b7a      	cmp	r3, #122	; 0x7a
 800c29a:	d808      	bhi.n	800c2ae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c29c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2a0:	f043 0301 	orr.w	r3, r3, #1
 800c2a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2aa:	3b20      	subs	r3, #32
 800c2ac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	623a      	str	r2, [r7, #32]
 800c2b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2b6:	b2d1      	uxtb	r1, r2
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	460a      	mov	r2, r1
 800c2be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c2c2:	e763      	b.n	800c18c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c2c4:	bf00      	nop
 800c2c6:	e000      	b.n	800c2ca <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c2c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2d0:	2be5      	cmp	r3, #229	; 0xe5
 800c2d2:	d103      	bne.n	800c2dc <create_name+0x2e0>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2205      	movs	r2, #5
 800c2d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b08      	cmp	r3, #8
 800c2e0:	d104      	bne.n	800c2ec <create_name+0x2f0>
 800c2e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c2ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2f0:	f003 030c 	and.w	r3, r3, #12
 800c2f4:	2b0c      	cmp	r3, #12
 800c2f6:	d005      	beq.n	800c304 <create_name+0x308>
 800c2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2fc:	f003 0303 	and.w	r3, r3, #3
 800c300:	2b03      	cmp	r3, #3
 800c302:	d105      	bne.n	800c310 <create_name+0x314>
 800c304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c308:	f043 0302 	orr.w	r3, r3, #2
 800c30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d117      	bne.n	800c34c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c320:	f003 0303 	and.w	r3, r3, #3
 800c324:	2b01      	cmp	r3, #1
 800c326:	d105      	bne.n	800c334 <create_name+0x338>
 800c328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c32c:	f043 0310 	orr.w	r3, r3, #16
 800c330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c338:	f003 030c 	and.w	r3, r3, #12
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d105      	bne.n	800c34c <create_name+0x350>
 800c340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c344:	f043 0308 	orr.w	r3, r3, #8
 800c348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c352:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c356:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3728      	adds	r7, #40	; 0x28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	0800e1a0 	.word	0x0800e1a0
 800c364:	0800e21c 	.word	0x0800e21c
 800c368:	0800e1ac 	.word	0x0800e1ac

0800c36c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c380:	e002      	b.n	800c388 <follow_path+0x1c>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	3301      	adds	r3, #1
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b2f      	cmp	r3, #47	; 0x2f
 800c38e:	d0f8      	beq.n	800c382 <follow_path+0x16>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b5c      	cmp	r3, #92	; 0x5c
 800c396:	d0f4      	beq.n	800c382 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2200      	movs	r2, #0
 800c39c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b1f      	cmp	r3, #31
 800c3a4:	d80a      	bhi.n	800c3bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2280      	movs	r2, #128	; 0x80
 800c3aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff f91b 	bl	800b5ec <dir_sdi>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	75fb      	strb	r3, [r7, #23]
 800c3ba:	e043      	b.n	800c444 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3bc:	463b      	mov	r3, r7
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff fe1b 	bl	800bffc <create_name>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d134      	bne.n	800c43a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff fc5a 	bl	800bc8a <dir_find>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00a      	beq.n	800c3fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d127      	bne.n	800c43e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3ee:	7afb      	ldrb	r3, [r7, #11]
 800c3f0:	f003 0304 	and.w	r3, r3, #4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d122      	bne.n	800c43e <follow_path+0xd2>
 800c3f8:	2305      	movs	r3, #5
 800c3fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c3fc:	e01f      	b.n	800c43e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3fe:	7afb      	ldrb	r3, [r7, #11]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11c      	bne.n	800c442 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	799b      	ldrb	r3, [r3, #6]
 800c40c:	f003 0310 	and.w	r3, r3, #16
 800c410:	2b00      	cmp	r3, #0
 800c412:	d102      	bne.n	800c41a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c414:	2305      	movs	r3, #5
 800c416:	75fb      	strb	r3, [r7, #23]
 800c418:	e014      	b.n	800c444 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c428:	4413      	add	r3, r2
 800c42a:	4619      	mov	r1, r3
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff fa64 	bl	800b8fa <ld_clust>
 800c432:	4602      	mov	r2, r0
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c438:	e7c0      	b.n	800c3bc <follow_path+0x50>
			if (res != FR_OK) break;
 800c43a:	bf00      	nop
 800c43c:	e002      	b.n	800c444 <follow_path+0xd8>
				break;
 800c43e:	bf00      	nop
 800c440:	e000      	b.n	800c444 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c442:	bf00      	nop
			}
		}
	}

	return res;
 800c444:	7dfb      	ldrb	r3, [r7, #23]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c44e:	b480      	push	{r7}
 800c450:	b087      	sub	sp, #28
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c456:	f04f 33ff 	mov.w	r3, #4294967295
 800c45a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d031      	beq.n	800c4c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e002      	b.n	800c472 <get_ldnumber+0x24>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	3301      	adds	r3, #1
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b1f      	cmp	r3, #31
 800c478:	d903      	bls.n	800c482 <get_ldnumber+0x34>
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b3a      	cmp	r3, #58	; 0x3a
 800c480:	d1f4      	bne.n	800c46c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b3a      	cmp	r3, #58	; 0x3a
 800c488:	d11c      	bne.n	800c4c4 <get_ldnumber+0x76>
			tp = *path;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	60fa      	str	r2, [r7, #12]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	3b30      	subs	r3, #48	; 0x30
 800c49a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b09      	cmp	r3, #9
 800c4a0:	d80e      	bhi.n	800c4c0 <get_ldnumber+0x72>
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d10a      	bne.n	800c4c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d107      	bne.n	800c4c0 <get_ldnumber+0x72>
					vol = (int)i;
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	617b      	str	r3, [r7, #20]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	697a      	ldr	r2, [r7, #20]
 800c4be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	e002      	b.n	800c4ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4c8:	693b      	ldr	r3, [r7, #16]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	70da      	strb	r2, [r3, #3]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7fe fcfa 	bl	800aeec <move_window>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <check_fs+0x2a>
 800c4fe:	2304      	movs	r3, #4
 800c500:	e038      	b.n	800c574 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3334      	adds	r3, #52	; 0x34
 800c506:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe fa3e 	bl	800a98c <ld_word>
 800c510:	4603      	mov	r3, r0
 800c512:	461a      	mov	r2, r3
 800c514:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c518:	429a      	cmp	r2, r3
 800c51a:	d001      	beq.n	800c520 <check_fs+0x48>
 800c51c:	2303      	movs	r3, #3
 800c51e:	e029      	b.n	800c574 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c526:	2be9      	cmp	r3, #233	; 0xe9
 800c528:	d009      	beq.n	800c53e <check_fs+0x66>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c530:	2beb      	cmp	r3, #235	; 0xeb
 800c532:	d11e      	bne.n	800c572 <check_fs+0x9a>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c53a:	2b90      	cmp	r3, #144	; 0x90
 800c53c:	d119      	bne.n	800c572 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3334      	adds	r3, #52	; 0x34
 800c542:	3336      	adds	r3, #54	; 0x36
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fa39 	bl	800a9bc <ld_dword>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c550:	4a0a      	ldr	r2, [pc, #40]	; (800c57c <check_fs+0xa4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d101      	bne.n	800c55a <check_fs+0x82>
 800c556:	2300      	movs	r3, #0
 800c558:	e00c      	b.n	800c574 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3334      	adds	r3, #52	; 0x34
 800c55e:	3352      	adds	r3, #82	; 0x52
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe fa2b 	bl	800a9bc <ld_dword>
 800c566:	4603      	mov	r3, r0
 800c568:	4a05      	ldr	r2, [pc, #20]	; (800c580 <check_fs+0xa8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d101      	bne.n	800c572 <check_fs+0x9a>
 800c56e:	2300      	movs	r3, #0
 800c570:	e000      	b.n	800c574 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c572:	2302      	movs	r3, #2
}
 800c574:	4618      	mov	r0, r3
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	00544146 	.word	0x00544146
 800c580:	33544146 	.word	0x33544146

0800c584 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b096      	sub	sp, #88	; 0x58
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4613      	mov	r3, r2
 800c590:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f7ff ff58 	bl	800c44e <get_ldnumber>
 800c59e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da01      	bge.n	800c5aa <find_volume+0x26>
 800c5a6:	230b      	movs	r3, #11
 800c5a8:	e22e      	b.n	800ca08 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5aa:	4aa8      	ldr	r2, [pc, #672]	; (800c84c <find_volume+0x2c8>)
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <find_volume+0x3a>
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	e224      	b.n	800ca08 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01a      	beq.n	800c60a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	785b      	ldrb	r3, [r3, #1]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe f939 	bl	800a850 <disk_status>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10c      	bne.n	800c60a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <find_volume+0x82>
 800c5f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c602:	230a      	movs	r3, #10
 800c604:	e200      	b.n	800ca08 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c606:	2300      	movs	r3, #0
 800c608:	e1fe      	b.n	800ca08 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c612:	b2da      	uxtb	r2, r3
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe f931 	bl	800a884 <disk_initialize>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c634:	2303      	movs	r3, #3
 800c636:	e1e7      	b.n	800ca08 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d007      	beq.n	800c64e <find_volume+0xca>
 800c63e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c642:	f003 0304 	and.w	r3, r3, #4
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c64a:	230a      	movs	r3, #10
 800c64c:	e1dc      	b.n	800ca08 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c656:	f7ff ff3f 	bl	800c4d8 <check_fs>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c664:	2b02      	cmp	r3, #2
 800c666:	d14b      	bne.n	800c700 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c668:	2300      	movs	r3, #0
 800c66a:	643b      	str	r3, [r7, #64]	; 0x40
 800c66c:	e01f      	b.n	800c6ae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c67c:	4413      	add	r3, r2
 800c67e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	3304      	adds	r3, #4
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <find_volume+0x114>
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	3308      	adds	r3, #8
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe f994 	bl	800a9bc <ld_dword>
 800c694:	4602      	mov	r2, r0
 800c696:	e000      	b.n	800c69a <find_volume+0x116>
 800c698:	2200      	movs	r2, #0
 800c69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c6a2:	440b      	add	r3, r1
 800c6a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d9dc      	bls.n	800c66e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <find_volume+0x140>
 800c6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c6d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d005      	beq.n	800c6e6 <find_volume+0x162>
 800c6da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c6dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6de:	f7ff fefb 	bl	800c4d8 <check_fs>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	e000      	b.n	800c6e8 <find_volume+0x164>
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c6ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d905      	bls.n	800c700 <find_volume+0x17c>
 800c6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	643b      	str	r3, [r7, #64]	; 0x40
 800c6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d9e1      	bls.n	800c6c4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c704:	2b04      	cmp	r3, #4
 800c706:	d101      	bne.n	800c70c <find_volume+0x188>
 800c708:	2301      	movs	r3, #1
 800c70a:	e17d      	b.n	800ca08 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c70c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c710:	2b01      	cmp	r3, #1
 800c712:	d901      	bls.n	800c718 <find_volume+0x194>
 800c714:	230d      	movs	r3, #13
 800c716:	e177      	b.n	800ca08 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71a:	3334      	adds	r3, #52	; 0x34
 800c71c:	330b      	adds	r3, #11
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe f934 	bl	800a98c <ld_word>
 800c724:	4603      	mov	r3, r0
 800c726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c72a:	d001      	beq.n	800c730 <find_volume+0x1ac>
 800c72c:	230d      	movs	r3, #13
 800c72e:	e16b      	b.n	800ca08 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	3334      	adds	r3, #52	; 0x34
 800c734:	3316      	adds	r3, #22
 800c736:	4618      	mov	r0, r3
 800c738:	f7fe f928 	bl	800a98c <ld_word>
 800c73c:	4603      	mov	r3, r0
 800c73e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d106      	bne.n	800c754 <find_volume+0x1d0>
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	3334      	adds	r3, #52	; 0x34
 800c74a:	3324      	adds	r3, #36	; 0x24
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe f935 	bl	800a9bc <ld_dword>
 800c752:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c758:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	789b      	ldrb	r3, [r3, #2]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d005      	beq.n	800c778 <find_volume+0x1f4>
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	789b      	ldrb	r3, [r3, #2]
 800c770:	2b02      	cmp	r3, #2
 800c772:	d001      	beq.n	800c778 <find_volume+0x1f4>
 800c774:	230d      	movs	r3, #13
 800c776:	e147      	b.n	800ca08 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	789b      	ldrb	r3, [r3, #2]
 800c77c:	461a      	mov	r2, r3
 800c77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c780:	fb02 f303 	mul.w	r3, r2, r3
 800c784:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	895b      	ldrh	r3, [r3, #10]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d008      	beq.n	800c7ac <find_volume+0x228>
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	895b      	ldrh	r3, [r3, #10]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	895b      	ldrh	r3, [r3, #10]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d001      	beq.n	800c7b0 <find_volume+0x22c>
 800c7ac:	230d      	movs	r3, #13
 800c7ae:	e12b      	b.n	800ca08 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	3334      	adds	r3, #52	; 0x34
 800c7b4:	3311      	adds	r3, #17
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe f8e8 	bl	800a98c <ld_word>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	891b      	ldrh	r3, [r3, #8]
 800c7c8:	f003 030f 	and.w	r3, r3, #15
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <find_volume+0x252>
 800c7d2:	230d      	movs	r3, #13
 800c7d4:	e118      	b.n	800ca08 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	3334      	adds	r3, #52	; 0x34
 800c7da:	3313      	adds	r3, #19
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe f8d5 	bl	800a98c <ld_word>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <find_volume+0x276>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	3334      	adds	r3, #52	; 0x34
 800c7f0:	3320      	adds	r3, #32
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe f8e2 	bl	800a9bc <ld_dword>
 800c7f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	3334      	adds	r3, #52	; 0x34
 800c7fe:	330e      	adds	r3, #14
 800c800:	4618      	mov	r0, r3
 800c802:	f7fe f8c3 	bl	800a98c <ld_word>
 800c806:	4603      	mov	r3, r0
 800c808:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c80a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <find_volume+0x290>
 800c810:	230d      	movs	r3, #13
 800c812:	e0f9      	b.n	800ca08 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c818:	4413      	add	r3, r2
 800c81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c81c:	8912      	ldrh	r2, [r2, #8]
 800c81e:	0912      	lsrs	r2, r2, #4
 800c820:	b292      	uxth	r2, r2
 800c822:	4413      	add	r3, r2
 800c824:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d201      	bcs.n	800c832 <find_volume+0x2ae>
 800c82e:	230d      	movs	r3, #13
 800c830:	e0ea      	b.n	800ca08 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c83a:	8952      	ldrh	r2, [r2, #10]
 800c83c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c840:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <find_volume+0x2cc>
 800c848:	230d      	movs	r3, #13
 800c84a:	e0dd      	b.n	800ca08 <find_volume+0x484>
 800c84c:	2000009c 	.word	0x2000009c
		fmt = FS_FAT32;
 800c850:	2303      	movs	r3, #3
 800c852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d802      	bhi.n	800c866 <find_volume+0x2e2>
 800c860:	2302      	movs	r3, #2
 800c862:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d802      	bhi.n	800c876 <find_volume+0x2f2>
 800c870:	2301      	movs	r3, #1
 800c872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	1c9a      	adds	r2, r3, #2
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c882:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c884:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c888:	441a      	add	r2, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c88e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	441a      	add	r2, r3
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c89c:	2b03      	cmp	r3, #3
 800c89e:	d11e      	bne.n	800c8de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	3334      	adds	r3, #52	; 0x34
 800c8a4:	332a      	adds	r3, #42	; 0x2a
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe f870 	bl	800a98c <ld_word>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d001      	beq.n	800c8b6 <find_volume+0x332>
 800c8b2:	230d      	movs	r3, #13
 800c8b4:	e0a8      	b.n	800ca08 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	891b      	ldrh	r3, [r3, #8]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <find_volume+0x33e>
 800c8be:	230d      	movs	r3, #13
 800c8c0:	e0a2      	b.n	800ca08 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	3334      	adds	r3, #52	; 0x34
 800c8c6:	332c      	adds	r3, #44	; 0x2c
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe f877 	bl	800a9bc <ld_dword>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	647b      	str	r3, [r7, #68]	; 0x44
 800c8dc:	e01f      	b.n	800c91e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	891b      	ldrh	r3, [r3, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <find_volume+0x366>
 800c8e6:	230d      	movs	r3, #13
 800c8e8:	e08e      	b.n	800ca08 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	441a      	add	r2, r3
 800c8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c8f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d103      	bne.n	800c906 <find_volume+0x382>
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	e00a      	b.n	800c91c <find_volume+0x398>
 800c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c908:	699a      	ldr	r2, [r3, #24]
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	085a      	lsrs	r2, r3, #1
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c91c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c920:	69da      	ldr	r2, [r3, #28]
 800c922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c924:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c928:	0a5b      	lsrs	r3, r3, #9
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d201      	bcs.n	800c932 <find_volume+0x3ae>
 800c92e:	230d      	movs	r3, #13
 800c930:	e06a      	b.n	800ca08 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	615a      	str	r2, [r3, #20]
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	695a      	ldr	r2, [r3, #20]
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	2280      	movs	r2, #128	; 0x80
 800c946:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d149      	bne.n	800c9e4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c952:	3334      	adds	r3, #52	; 0x34
 800c954:	3330      	adds	r3, #48	; 0x30
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe f818 	bl	800a98c <ld_word>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d140      	bne.n	800c9e4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c964:	3301      	adds	r3, #1
 800c966:	4619      	mov	r1, r3
 800c968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c96a:	f7fe fabf 	bl	800aeec <move_window>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d137      	bne.n	800c9e4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	2200      	movs	r2, #0
 800c978:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f802 	bl	800a98c <ld_word>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c990:	429a      	cmp	r2, r3
 800c992:	d127      	bne.n	800c9e4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	3334      	adds	r3, #52	; 0x34
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe f80f 	bl	800a9bc <ld_dword>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4a1b      	ldr	r2, [pc, #108]	; (800ca10 <find_volume+0x48c>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d11e      	bne.n	800c9e4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	3334      	adds	r3, #52	; 0x34
 800c9aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe f804 	bl	800a9bc <ld_dword>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4a17      	ldr	r2, [pc, #92]	; (800ca14 <find_volume+0x490>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d113      	bne.n	800c9e4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	3334      	adds	r3, #52	; 0x34
 800c9c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fff9 	bl	800a9bc <ld_dword>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	3334      	adds	r3, #52	; 0x34
 800c9d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fd ffef 	bl	800a9bc <ld_dword>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c9ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <find_volume+0x494>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	4b08      	ldr	r3, [pc, #32]	; (800ca18 <find_volume+0x494>)
 800c9f6:	801a      	strh	r2, [r3, #0]
 800c9f8:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <find_volume+0x494>)
 800c9fa:	881a      	ldrh	r2, [r3, #0]
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca02:	f7fe fa0b 	bl	800ae1c <clear_lock>
#endif
	return FR_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3758      	adds	r7, #88	; 0x58
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	41615252 	.word	0x41615252
 800ca14:	61417272 	.word	0x61417272
 800ca18:	200000a0 	.word	0x200000a0

0800ca1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca26:	2309      	movs	r3, #9
 800ca28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01c      	beq.n	800ca6a <validate+0x4e>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d018      	beq.n	800ca6a <validate+0x4e>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d013      	beq.n	800ca6a <validate+0x4e>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	889a      	ldrh	r2, [r3, #4]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	88db      	ldrh	r3, [r3, #6]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d10c      	bne.n	800ca6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fd fefa 	bl	800a850 <disk_status>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <validate+0x4e>
			res = FR_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <validate+0x5a>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	e000      	b.n	800ca78 <validate+0x5c>
 800ca76:	2300      	movs	r3, #0
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	6013      	str	r3, [r2, #0]
	return res;
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4613      	mov	r3, r2
 800ca94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ca9a:	f107 0310 	add.w	r3, r7, #16
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff fcd5 	bl	800c44e <get_ldnumber>
 800caa4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da01      	bge.n	800cab0 <f_mount+0x28>
 800caac:	230b      	movs	r3, #11
 800caae:	e02b      	b.n	800cb08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cab0:	4a17      	ldr	r2, [pc, #92]	; (800cb10 <f_mount+0x88>)
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d005      	beq.n	800cacc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cac0:	69b8      	ldr	r0, [r7, #24]
 800cac2:	f7fe f9ab 	bl	800ae1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	2200      	movs	r2, #0
 800caca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	490d      	ldr	r1, [pc, #52]	; (800cb10 <f_mount+0x88>)
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <f_mount+0x66>
 800cae8:	79fb      	ldrb	r3, [r7, #7]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d001      	beq.n	800caf2 <f_mount+0x6a>
 800caee:	2300      	movs	r3, #0
 800caf0:	e00a      	b.n	800cb08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800caf2:	f107 010c 	add.w	r1, r7, #12
 800caf6:	f107 0308 	add.w	r3, r7, #8
 800cafa:	2200      	movs	r2, #0
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fd41 	bl	800c584 <find_volume>
 800cb02:	4603      	mov	r3, r0
 800cb04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3720      	adds	r7, #32
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	2000009c 	.word	0x2000009c

0800cb14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	f107 030c 	add.w	r3, r7, #12
 800cb20:	6018      	str	r0, [r3, #0]
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	6019      	str	r1, [r3, #0]
 800cb28:	1dfb      	adds	r3, r7, #7
 800cb2a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb2c:	f107 030c 	add.w	r3, r7, #12
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <f_open+0x26>
 800cb36:	2309      	movs	r3, #9
 800cb38:	e231      	b.n	800cf9e <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb3a:	1dfb      	adds	r3, r7, #7
 800cb3c:	1dfa      	adds	r2, r7, #7
 800cb3e:	7812      	ldrb	r2, [r2, #0]
 800cb40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cb44:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800cb46:	1dfb      	adds	r3, r7, #7
 800cb48:	781a      	ldrb	r2, [r3, #0]
 800cb4a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff fd16 	bl	800c584 <find_volume>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800cb5e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f040 8210 	bne.w	800cf88 <f_open+0x474>
		dj.obj.fs = fs;
 800cb68:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb6c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800cb70:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb74:	f107 0214 	add.w	r2, r7, #20
 800cb78:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cb84:	4611      	mov	r1, r2
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fbf0 	bl	800c36c <follow_path>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d11b      	bne.n	800cbd2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cb9a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	da03      	bge.n	800cbac <f_open+0x98>
				res = FR_INVALID_NAME;
 800cba4:	2306      	movs	r3, #6
 800cba6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800cbaa:	e012      	b.n	800cbd2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbac:	1dfb      	adds	r3, r7, #7
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	f023 0301 	bic.w	r3, r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bf14      	ite	ne
 800cbb8:	2301      	movne	r3, #1
 800cbba:	2300      	moveq	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fd ffe0 	bl	800ab8c <chk_lock>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbd2:	1dfb      	adds	r3, r7, #7
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	f003 031c 	and.w	r3, r3, #28
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 809b 	beq.w	800cd16 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800cbe0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d019      	beq.n	800cc1c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cbe8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cbec:	2b04      	cmp	r3, #4
 800cbee:	d10e      	bne.n	800cc0e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cbf0:	f7fe f828 	bl	800ac44 <enq_lock>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d006      	beq.n	800cc08 <f_open+0xf4>
 800cbfa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff f904 	bl	800be0c <dir_register>
 800cc04:	4603      	mov	r3, r0
 800cc06:	e000      	b.n	800cc0a <f_open+0xf6>
 800cc08:	2312      	movs	r3, #18
 800cc0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cc0e:	1dfb      	adds	r3, r7, #7
 800cc10:	1dfa      	adds	r2, r7, #7
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	f042 0208 	orr.w	r2, r2, #8
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	e012      	b.n	800cc42 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cc1c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800cc20:	f003 0311 	and.w	r3, r3, #17
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <f_open+0x11c>
					res = FR_DENIED;
 800cc28:	2307      	movs	r3, #7
 800cc2a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800cc2e:	e008      	b.n	800cc42 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc30:	1dfb      	adds	r3, r7, #7
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <f_open+0x12e>
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc42:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 8082 	bne.w	800cd50 <f_open+0x23c>
 800cc4c:	1dfb      	adds	r3, r7, #7
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d07b      	beq.n	800cd50 <f_open+0x23c>
				dw = GET_FATTIME();
 800cc58:	f7fd fbaa 	bl	800a3b0 <get_fattime>
 800cc5c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cc60:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cc64:	330e      	adds	r3, #14
 800cc66:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fd fee4 	bl	800aa38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cc70:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cc74:	3316      	adds	r3, #22
 800cc76:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fd fedc 	bl	800aa38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cc80:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cc84:	330b      	adds	r3, #11
 800cc86:	2220      	movs	r2, #32
 800cc88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cc8e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fe30 	bl	800b8fa <ld_clust>
 800cc9a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cca2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800cca6:	2200      	movs	r2, #0
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe fe45 	bl	800b938 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ccae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ccb2:	331c      	adds	r3, #28
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fd febe 	bl	800aa38 <st_dword>
					fs->wflag = 1;
 800ccbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ccc4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d041      	beq.n	800cd50 <f_open+0x23c>
						dw = fs->winsect;
 800cccc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800ccd6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fb52 	bl	800b38a <remove_chain>
 800cce6:	4603      	mov	r3, r0
 800cce8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800ccec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d12d      	bne.n	800cd50 <f_open+0x23c>
							res = move_window(fs, dw);
 800ccf4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ccf8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe f8f5 	bl	800aeec <move_window>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cd0c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800cd10:	3a01      	subs	r2, #1
 800cd12:	611a      	str	r2, [r3, #16]
 800cd14:	e01c      	b.n	800cd50 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cd16:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d118      	bne.n	800cd50 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cd1e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800cd22:	f003 0310 	and.w	r3, r3, #16
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <f_open+0x21e>
					res = FR_NO_FILE;
 800cd2a:	2304      	movs	r3, #4
 800cd2c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800cd30:	e00e      	b.n	800cd50 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cd32:	1dfb      	adds	r3, r7, #7
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <f_open+0x23c>
 800cd3e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d002      	beq.n	800cd50 <f_open+0x23c>
						res = FR_DENIED;
 800cd4a:	2307      	movs	r3, #7
 800cd4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800cd50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d136      	bne.n	800cdc6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cd58:	1dfb      	adds	r3, r7, #7
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	f003 0308 	and.w	r3, r3, #8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d005      	beq.n	800cd70 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800cd64:	1dfb      	adds	r3, r7, #7
 800cd66:	1dfa      	adds	r2, r7, #7
 800cd68:	7812      	ldrb	r2, [r2, #0]
 800cd6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd6e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cd70:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd76:	f107 030c 	add.w	r3, r7, #12
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cd7e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cd82:	f107 030c 	add.w	r3, r7, #12
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd8a:	1dfb      	adds	r3, r7, #7
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	f023 0301 	bic.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	bf14      	ite	ne
 800cd96:	2301      	movne	r3, #1
 800cd98:	2300      	moveq	r3, #0
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cda2:	4611      	mov	r1, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fd ff6f 	bl	800ac88 <inc_lock>
 800cdaa:	4602      	mov	r2, r0
 800cdac:	f107 030c 	add.w	r3, r7, #12
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cdb4:	f107 030c 	add.w	r3, r7, #12
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d102      	bne.n	800cdc6 <f_open+0x2b2>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cdc6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f040 80dc 	bne.w	800cf88 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cdd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cdd4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fd8d 	bl	800b8fa <ld_clust>
 800cde0:	4602      	mov	r2, r0
 800cde2:	f107 030c 	add.w	r3, r7, #12
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cdea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cdee:	331c      	adds	r3, #28
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd fde3 	bl	800a9bc <ld_dword>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	f107 030c 	add.w	r3, r7, #12
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ce00:	f107 030c 	add.w	r3, r7, #12
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2200      	movs	r2, #0
 800ce08:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ce0a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800ce0e:	f107 030c 	add.w	r3, r7, #12
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ce16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ce1a:	88da      	ldrh	r2, [r3, #6]
 800ce1c:	f107 030c 	add.w	r3, r7, #12
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ce24:	f107 030c 	add.w	r3, r7, #12
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	1dfa      	adds	r2, r7, #7
 800ce2c:	7812      	ldrb	r2, [r2, #0]
 800ce2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ce30:	f107 030c 	add.w	r3, r7, #12
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2200      	movs	r2, #0
 800ce38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2200      	movs	r2, #0
 800ce42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ce44:	f107 030c 	add.w	r3, r7, #12
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ce4e:	f107 030c 	add.w	r3, r7, #12
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3330      	adds	r3, #48	; 0x30
 800ce56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fd fe38 	bl	800aad2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ce62:	1dfb      	adds	r3, r7, #7
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	f003 0320 	and.w	r3, r3, #32
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 808c 	beq.w	800cf88 <f_open+0x474>
 800ce70:	f107 030c 	add.w	r3, r7, #12
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 8085 	beq.w	800cf88 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ce7e:	f107 030c 	add.w	r3, r7, #12
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68da      	ldr	r2, [r3, #12]
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ce8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ce92:	895b      	ldrh	r3, [r3, #10]
 800ce94:	025b      	lsls	r3, r3, #9
 800ce96:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ce9a:	f107 030c 	add.w	r3, r7, #12
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cea6:	f107 030c 	add.w	r3, r7, #12
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ceb2:	e01f      	b.n	800cef4 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800ceb4:	f107 030c 	add.w	r3, r7, #12
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe f8cf 	bl	800b062 <get_fat>
 800cec4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800cec8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d802      	bhi.n	800ced6 <f_open+0x3c2>
 800ced0:	2302      	movs	r3, #2
 800ced2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ced6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ceda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cede:	d102      	bne.n	800cee6 <f_open+0x3d2>
 800cee0:	2301      	movs	r3, #1
 800cee2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cee6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800ceea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800cef4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d105      	bne.n	800cf08 <f_open+0x3f4>
 800cefc:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800cf00:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d8d5      	bhi.n	800ceb4 <f_open+0x3a0>
				}
				fp->clust = clst;
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800cf12:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cf14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d135      	bne.n	800cf88 <f_open+0x474>
 800cf1c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800cf20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d02f      	beq.n	800cf88 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cf28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cf2c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe f877 	bl	800b024 <clust2sect>
 800cf36:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800cf3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d103      	bne.n	800cf4a <f_open+0x436>
						res = FR_INT_ERR;
 800cf42:	2302      	movs	r3, #2
 800cf44:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800cf48:	e01e      	b.n	800cf88 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cf4a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800cf4e:	0a5a      	lsrs	r2, r3, #9
 800cf50:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800cf54:	441a      	add	r2, r3
 800cf56:	f107 030c 	add.w	r3, r7, #12
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cf5e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cf62:	7858      	ldrb	r0, [r3, #1]
 800cf64:	f107 030c 	add.w	r3, r7, #12
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf6e:	f107 030c 	add.w	r3, r7, #12
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6a1a      	ldr	r2, [r3, #32]
 800cf76:	2301      	movs	r3, #1
 800cf78:	f7fd fcaa 	bl	800a8d0 <disk_read>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <f_open+0x474>
 800cf82:	2301      	movs	r3, #1
 800cf84:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cf88:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <f_open+0x486>
 800cf90:	f107 030c 	add.w	r3, r7, #12
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2200      	movs	r2, #0
 800cf98:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cf9a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08e      	sub	sp, #56	; 0x38
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f107 0214 	add.w	r2, r7, #20
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff fd27 	bl	800ca1c <validate>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d107      	bne.n	800cfec <f_read+0x44>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	7d5b      	ldrb	r3, [r3, #21]
 800cfe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cfe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <f_read+0x4a>
 800cfec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cff0:	e115      	b.n	800d21e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	7d1b      	ldrb	r3, [r3, #20]
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <f_read+0x5a>
 800cffe:	2307      	movs	r3, #7
 800d000:	e10d      	b.n	800d21e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	429a      	cmp	r2, r3
 800d014:	f240 80fe 	bls.w	800d214 <f_read+0x26c>
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d01c:	e0fa      	b.n	800d214 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	699b      	ldr	r3, [r3, #24]
 800d022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d026:	2b00      	cmp	r3, #0
 800d028:	f040 80c6 	bne.w	800d1b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	0a5b      	lsrs	r3, r3, #9
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	8952      	ldrh	r2, [r2, #10]
 800d036:	3a01      	subs	r2, #1
 800d038:	4013      	ands	r3, r2
 800d03a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d12f      	bne.n	800d0a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	633b      	str	r3, [r7, #48]	; 0x30
 800d050:	e013      	b.n	800d07a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	2b00      	cmp	r3, #0
 800d058:	d007      	beq.n	800d06a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	4619      	mov	r1, r3
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7fe fa8f 	bl	800b584 <clmt_clust>
 800d066:	6338      	str	r0, [r7, #48]	; 0x30
 800d068:	e007      	b.n	800d07a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	69db      	ldr	r3, [r3, #28]
 800d070:	4619      	mov	r1, r3
 800d072:	4610      	mov	r0, r2
 800d074:	f7fd fff5 	bl	800b062 <get_fat>
 800d078:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d804      	bhi.n	800d08a <f_read+0xe2>
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2202      	movs	r2, #2
 800d084:	755a      	strb	r2, [r3, #21]
 800d086:	2302      	movs	r3, #2
 800d088:	e0c9      	b.n	800d21e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d104      	bne.n	800d09c <f_read+0xf4>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	755a      	strb	r2, [r3, #21]
 800d098:	2301      	movs	r3, #1
 800d09a:	e0c0      	b.n	800d21e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7fd ffba 	bl	800b024 <clust2sect>
 800d0b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d104      	bne.n	800d0c2 <f_read+0x11a>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	755a      	strb	r2, [r3, #21]
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e0ad      	b.n	800d21e <f_read+0x276>
			sect += csect;
 800d0c2:	69ba      	ldr	r2, [r7, #24]
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	0a5b      	lsrs	r3, r3, #9
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d039      	beq.n	800d14a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d0d6:	69fa      	ldr	r2, [r7, #28]
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	4413      	add	r3, r2
 800d0dc:	697a      	ldr	r2, [r7, #20]
 800d0de:	8952      	ldrh	r2, [r2, #10]
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d905      	bls.n	800d0f0 <f_read+0x148>
					cc = fs->csize - csect;
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	895b      	ldrh	r3, [r3, #10]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	7858      	ldrb	r0, [r3, #1]
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	69ba      	ldr	r2, [r7, #24]
 800d0f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0fa:	f7fd fbe9 	bl	800a8d0 <disk_read>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <f_read+0x166>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	755a      	strb	r2, [r3, #21]
 800d10a:	2301      	movs	r3, #1
 800d10c:	e087      	b.n	800d21e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	7d1b      	ldrb	r3, [r3, #20]
 800d112:	b25b      	sxtb	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	da14      	bge.n	800d142 <f_read+0x19a>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6a1a      	ldr	r2, [r3, #32]
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d122:	429a      	cmp	r2, r3
 800d124:	d90d      	bls.n	800d142 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a1a      	ldr	r2, [r3, #32]
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	025b      	lsls	r3, r3, #9
 800d130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d132:	18d0      	adds	r0, r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	3330      	adds	r3, #48	; 0x30
 800d138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d13c:	4619      	mov	r1, r3
 800d13e:	f7fd fca7 	bl	800aa90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	025b      	lsls	r3, r3, #9
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d148:	e050      	b.n	800d1ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6a1b      	ldr	r3, [r3, #32]
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	429a      	cmp	r2, r3
 800d152:	d02e      	beq.n	800d1b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	7d1b      	ldrb	r3, [r3, #20]
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	da18      	bge.n	800d190 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	7858      	ldrb	r0, [r3, #1]
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6a1a      	ldr	r2, [r3, #32]
 800d16c:	2301      	movs	r3, #1
 800d16e:	f7fd fbcf 	bl	800a910 <disk_write>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <f_read+0x1da>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2201      	movs	r2, #1
 800d17c:	755a      	strb	r2, [r3, #21]
 800d17e:	2301      	movs	r3, #1
 800d180:	e04d      	b.n	800d21e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7d1b      	ldrb	r3, [r3, #20]
 800d186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	7858      	ldrb	r0, [r3, #1]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d19a:	2301      	movs	r3, #1
 800d19c:	69ba      	ldr	r2, [r7, #24]
 800d19e:	f7fd fb97 	bl	800a8d0 <disk_read>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d004      	beq.n	800d1b2 <f_read+0x20a>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	755a      	strb	r2, [r3, #21]
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e035      	b.n	800d21e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d901      	bls.n	800d1d2 <f_read+0x22a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e0:	4413      	add	r3, r2
 800d1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1e8:	f7fd fc52 	bl	800aa90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	4413      	add	r3, r2
 800d1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	699a      	ldr	r2, [r3, #24]
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	441a      	add	r2, r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	619a      	str	r2, [r3, #24]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d206:	441a      	add	r2, r3
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	601a      	str	r2, [r3, #0]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f47f af01 	bne.w	800d01e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3738      	adds	r7, #56	; 0x38
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b08c      	sub	sp, #48	; 0x30
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	60b9      	str	r1, [r7, #8]
 800d230:	607a      	str	r2, [r7, #4]
 800d232:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f107 0210 	add.w	r2, r7, #16
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff fbe8 	bl	800ca1c <validate>
 800d24c:	4603      	mov	r3, r0
 800d24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d256:	2b00      	cmp	r3, #0
 800d258:	d107      	bne.n	800d26a <f_write+0x44>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	7d5b      	ldrb	r3, [r3, #21]
 800d25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <f_write+0x4a>
 800d26a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d26e:	e14b      	b.n	800d508 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	7d1b      	ldrb	r3, [r3, #20]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <f_write+0x5a>
 800d27c:	2307      	movs	r3, #7
 800d27e:	e143      	b.n	800d508 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	441a      	add	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	f080 812d 	bcs.w	800d4ec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	43db      	mvns	r3, r3
 800d298:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d29a:	e127      	b.n	800d4ec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f040 80e3 	bne.w	800d470 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	0a5b      	lsrs	r3, r3, #9
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	8952      	ldrh	r2, [r2, #10]
 800d2b4:	3a01      	subs	r2, #1
 800d2b6:	4013      	ands	r3, r2
 800d2b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d143      	bne.n	800d348 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	699b      	ldr	r3, [r3, #24]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10c      	bne.n	800d2e2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d11a      	bne.n	800d30a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fe f8bb 	bl	800b454 <create_chain>
 800d2de:	62b8      	str	r0, [r7, #40]	; 0x28
 800d2e0:	e013      	b.n	800d30a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d007      	beq.n	800d2fa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	699b      	ldr	r3, [r3, #24]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7fe f947 	bl	800b584 <clmt_clust>
 800d2f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800d2f8:	e007      	b.n	800d30a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	4619      	mov	r1, r3
 800d302:	4610      	mov	r0, r2
 800d304:	f7fe f8a6 	bl	800b454 <create_chain>
 800d308:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 80f2 	beq.w	800d4f6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	2b01      	cmp	r3, #1
 800d316:	d104      	bne.n	800d322 <f_write+0xfc>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2202      	movs	r2, #2
 800d31c:	755a      	strb	r2, [r3, #21]
 800d31e:	2302      	movs	r3, #2
 800d320:	e0f2      	b.n	800d508 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d328:	d104      	bne.n	800d334 <f_write+0x10e>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2201      	movs	r2, #1
 800d32e:	755a      	strb	r2, [r3, #21]
 800d330:	2301      	movs	r3, #1
 800d332:	e0e9      	b.n	800d508 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d338:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d102      	bne.n	800d348 <f_write+0x122>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d346:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	7d1b      	ldrb	r3, [r3, #20]
 800d34c:	b25b      	sxtb	r3, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da18      	bge.n	800d384 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	7858      	ldrb	r0, [r3, #1]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6a1a      	ldr	r2, [r3, #32]
 800d360:	2301      	movs	r3, #1
 800d362:	f7fd fad5 	bl	800a910 <disk_write>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d004      	beq.n	800d376 <f_write+0x150>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	755a      	strb	r2, [r3, #21]
 800d372:	2301      	movs	r3, #1
 800d374:	e0c8      	b.n	800d508 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	7d1b      	ldrb	r3, [r3, #20]
 800d37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	4619      	mov	r1, r3
 800d38c:	4610      	mov	r0, r2
 800d38e:	f7fd fe49 	bl	800b024 <clust2sect>
 800d392:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d104      	bne.n	800d3a4 <f_write+0x17e>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2202      	movs	r2, #2
 800d39e:	755a      	strb	r2, [r3, #21]
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	e0b1      	b.n	800d508 <f_write+0x2e2>
			sect += csect;
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	0a5b      	lsrs	r3, r3, #9
 800d3b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d03c      	beq.n	800d432 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	4413      	add	r3, r2
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	8952      	ldrh	r2, [r2, #10]
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d905      	bls.n	800d3d2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	895b      	ldrh	r3, [r3, #10]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	7858      	ldrb	r0, [r3, #1]
 800d3d6:	6a3b      	ldr	r3, [r7, #32]
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	69f9      	ldr	r1, [r7, #28]
 800d3dc:	f7fd fa98 	bl	800a910 <disk_write>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <f_write+0x1ca>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	755a      	strb	r2, [r3, #21]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e08b      	b.n	800d508 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6a1a      	ldr	r2, [r3, #32]
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	6a3a      	ldr	r2, [r7, #32]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d915      	bls.n	800d42a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6a1a      	ldr	r2, [r3, #32]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	025b      	lsls	r3, r3, #9
 800d40e:	69fa      	ldr	r2, [r7, #28]
 800d410:	4413      	add	r3, r2
 800d412:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d416:	4619      	mov	r1, r3
 800d418:	f7fd fb3a 	bl	800aa90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	7d1b      	ldrb	r3, [r3, #20]
 800d420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d424:	b2da      	uxtb	r2, r3
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	025b      	lsls	r3, r3, #9
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d430:	e03f      	b.n	800d4b2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d016      	beq.n	800d46a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	699a      	ldr	r2, [r3, #24]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d444:	429a      	cmp	r2, r3
 800d446:	d210      	bcs.n	800d46a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	7858      	ldrb	r0, [r3, #1]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d452:	2301      	movs	r3, #1
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	f7fd fa3b 	bl	800a8d0 <disk_read>
 800d45a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	755a      	strb	r2, [r3, #21]
 800d466:	2301      	movs	r3, #1
 800d468:	e04e      	b.n	800d508 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	697a      	ldr	r2, [r7, #20]
 800d46e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	699b      	ldr	r3, [r3, #24]
 800d474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d478:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d47c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	429a      	cmp	r2, r3
 800d484:	d901      	bls.n	800d48a <f_write+0x264>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d498:	4413      	add	r3, r2
 800d49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d49c:	69f9      	ldr	r1, [r7, #28]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fd faf6 	bl	800aa90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d4b2:	69fa      	ldr	r2, [r7, #28]
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	4413      	add	r3, r2
 800d4b8:	61fb      	str	r3, [r7, #28]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	699a      	ldr	r2, [r3, #24]
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	441a      	add	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	619a      	str	r2, [r3, #24]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	bf38      	it	cc
 800d4d2:	461a      	movcc	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	60da      	str	r2, [r3, #12]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	441a      	add	r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f47f aed4 	bne.w	800d29c <f_write+0x76>
 800d4f4:	e000      	b.n	800d4f8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	7d1b      	ldrb	r3, [r3, #20]
 800d4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d500:	b2da      	uxtb	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3730      	adds	r7, #48	; 0x30
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f107 0208 	add.w	r2, r7, #8
 800d51e:	4611      	mov	r1, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff fa7b 	bl	800ca1c <validate>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d168      	bne.n	800d602 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	7d1b      	ldrb	r3, [r3, #20]
 800d534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d062      	beq.n	800d602 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7d1b      	ldrb	r3, [r3, #20]
 800d540:	b25b      	sxtb	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	da15      	bge.n	800d572 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	7858      	ldrb	r0, [r3, #1]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a1a      	ldr	r2, [r3, #32]
 800d554:	2301      	movs	r3, #1
 800d556:	f7fd f9db 	bl	800a910 <disk_write>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <f_sync+0x54>
 800d560:	2301      	movs	r3, #1
 800d562:	e04f      	b.n	800d604 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7d1b      	ldrb	r3, [r3, #20]
 800d568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d572:	f7fc ff1d 	bl	800a3b0 <get_fattime>
 800d576:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	4619      	mov	r1, r3
 800d580:	4610      	mov	r0, r2
 800d582:	f7fd fcb3 	bl	800aeec <move_window>
 800d586:	4603      	mov	r3, r0
 800d588:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d58a:	7dfb      	ldrb	r3, [r7, #23]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d138      	bne.n	800d602 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d594:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	330b      	adds	r3, #11
 800d59a:	781a      	ldrb	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	330b      	adds	r3, #11
 800d5a0:	f042 0220 	orr.w	r2, r2, #32
 800d5a4:	b2d2      	uxtb	r2, r2
 800d5a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	68f9      	ldr	r1, [r7, #12]
 800d5b4:	f7fe f9c0 	bl	800b938 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f103 021c 	add.w	r2, r3, #28
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7fd fa37 	bl	800aa38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3316      	adds	r3, #22
 800d5ce:	6939      	ldr	r1, [r7, #16]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fd fa31 	bl	800aa38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3312      	adds	r3, #18
 800d5da:	2100      	movs	r1, #0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fd fa10 	bl	800aa02 <st_word>
					fs->wflag = 1;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd fcac 	bl	800af48 <sync_fs>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d602:	7dfb      	ldrb	r3, [r7, #23]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff ff7b 	bl	800d510 <f_sync>
 800d61a:	4603      	mov	r3, r0
 800d61c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d118      	bne.n	800d656 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f107 0208 	add.w	r2, r7, #8
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff f9f5 	bl	800ca1c <validate>
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10c      	bne.n	800d656 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	4618      	mov	r0, r3
 800d642:	f7fd fbaf 	bl	800ada4 <dec_lock>
 800d646:	4603      	mov	r3, r0
 800d648:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800d666:	af00      	add	r7, sp, #0
 800d668:	1d3b      	adds	r3, r7, #4
 800d66a:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d66c:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800d670:	1d3b      	adds	r3, r7, #4
 800d672:	2202      	movs	r2, #2
 800d674:	4618      	mov	r0, r3
 800d676:	f7fe ff85 	bl	800c584 <find_volume>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 800d680:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d684:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 800d688:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f040 812b 	bne.w	800d8e8 <f_mkdir+0x288>
		INIT_NAMBUF(fs);
 800d692:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d696:	f107 020c 	add.w	r2, r7, #12
 800d69a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 800d69c:	1d3b      	adds	r3, r7, #4
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fe60 	bl	800c36c <follow_path>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d6b2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d102      	bne.n	800d6c0 <f_mkdir+0x60>
 800d6ba:	2308      	movs	r3, #8
 800d6bc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d6c0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	f040 810f 	bne.w	800d8e8 <f_mkdir+0x288>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d6ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fd febf 	bl	800b454 <create_chain>
 800d6d6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d6da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d6de:	895b      	ldrh	r3, [r3, #10]
 800d6e0:	025b      	lsls	r3, r3, #9
 800d6e2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d6ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d102      	bne.n	800d6fa <f_mkdir+0x9a>
 800d6f4:	2307      	movs	r3, #7
 800d6f6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 800d6fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d102      	bne.n	800d708 <f_mkdir+0xa8>
 800d702:	2302      	movs	r3, #2
 800d704:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d708:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800d70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d710:	d102      	bne.n	800d718 <f_mkdir+0xb8>
 800d712:	2301      	movs	r3, #1
 800d714:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d718:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d107      	bne.n	800d730 <f_mkdir+0xd0>
 800d720:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d724:	4618      	mov	r0, r3
 800d726:	f7fd fb9d 	bl	800ae64 <sync_window>
 800d72a:	4603      	mov	r3, r0
 800d72c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 800d730:	f7fc fe3e 	bl	800a3b0 <get_fattime>
 800d734:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d738:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8090 	bne.w	800d862 <f_mkdir+0x202>
				dsc = clust2sect(fs, dcl);
 800d742:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d746:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fd fc6a 	bl	800b024 <clust2sect>
 800d750:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 800d754:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d758:	3334      	adds	r3, #52	; 0x34
 800d75a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 800d75e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d762:	2100      	movs	r1, #0
 800d764:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800d768:	f7fd f9b3 	bl	800aad2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d76c:	220b      	movs	r2, #11
 800d76e:	2120      	movs	r1, #32
 800d770:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800d774:	f7fd f9ad 	bl	800aad2 <mem_set>
					dir[DIR_Name] = '.';
 800d778:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d77c:	222e      	movs	r2, #46	; 0x2e
 800d77e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d780:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d784:	330b      	adds	r3, #11
 800d786:	2210      	movs	r2, #16
 800d788:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d78a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d78e:	3316      	adds	r3, #22
 800d790:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800d794:	4618      	mov	r0, r3
 800d796:	f7fd f94f 	bl	800aa38 <st_dword>
					st_clust(fs, dir, dcl);
 800d79a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d79e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800d7a2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fe f8c6 	bl	800b938 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d7ac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d7b0:	3320      	adds	r3, #32
 800d7b2:	2220      	movs	r2, #32
 800d7b4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fd f969 	bl	800aa90 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d7be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d7c2:	3321      	adds	r3, #33	; 0x21
 800d7c4:	222e      	movs	r2, #46	; 0x2e
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800d7cc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d7d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d109      	bne.n	800d7ee <f_mkdir+0x18e>
 800d7da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d102      	bne.n	800d7ee <f_mkdir+0x18e>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 800d7ee:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800d7f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d7f6:	3320      	adds	r3, #32
 800d7f8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	f7fe f89b 	bl	800b938 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d802:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d806:	895b      	ldrh	r3, [r3, #10]
 800d808:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800d80c:	e023      	b.n	800d856 <f_mkdir+0x1f6>
					fs->winsect = dsc++;
 800d80e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 800d818:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d81c:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800d81e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d822:	2201      	movs	r2, #1
 800d824:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d826:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fd fb1a 	bl	800ae64 <sync_window>
 800d830:	4603      	mov	r3, r0
 800d832:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 800d836:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d110      	bne.n	800d860 <f_mkdir+0x200>
					mem_set(dir, 0, SS(fs));
 800d83e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d842:	2100      	movs	r1, #0
 800d844:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800d848:	f7fd f943 	bl	800aad2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d84c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800d850:	3b01      	subs	r3, #1
 800d852:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800d856:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1d7      	bne.n	800d80e <f_mkdir+0x1ae>
 800d85e:	e000      	b.n	800d862 <f_mkdir+0x202>
					if (res != FR_OK) break;
 800d860:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d862:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d866:	2b00      	cmp	r3, #0
 800d868:	d107      	bne.n	800d87a <f_mkdir+0x21a>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d86a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe facc 	bl	800be0c <dir_register>
 800d874:	4603      	mov	r3, r0
 800d876:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 800d87a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d12a      	bne.n	800d8d8 <f_mkdir+0x278>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d882:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800d886:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d88a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d88e:	3316      	adds	r3, #22
 800d890:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd f8cf 	bl	800aa38 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d89a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d89e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800d8a2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe f846 	bl	800b938 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d8ac:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800d8b0:	330b      	adds	r3, #11
 800d8b2:	2210      	movs	r2, #16
 800d8b4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d8b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d8be:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d110      	bne.n	800d8e8 <f_mkdir+0x288>
					res = sync_fs(fs);
 800d8c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fd fb3c 	bl	800af48 <sync_fs>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 800d8d6:	e007      	b.n	800d8e8 <f_mkdir+0x288>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d8d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fd fd51 	bl	800b38a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d8e8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f507 7718 	add.w	r7, r7, #608	; 0x260
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b087      	sub	sp, #28
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d906:	2301      	movs	r3, #1
 800d908:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d90e:	4b1f      	ldr	r3, [pc, #124]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d910:	7a5b      	ldrb	r3, [r3, #9]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d131      	bne.n	800d97c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d918:	4b1c      	ldr	r3, [pc, #112]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d91a:	7a5b      	ldrb	r3, [r3, #9]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	461a      	mov	r2, r3
 800d920:	4b1a      	ldr	r3, [pc, #104]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d922:	2100      	movs	r1, #0
 800d924:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d926:	4b19      	ldr	r3, [pc, #100]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d928:	7a5b      	ldrb	r3, [r3, #9]
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	4a17      	ldr	r2, [pc, #92]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	4413      	add	r3, r2
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d936:	4b15      	ldr	r3, [pc, #84]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	461a      	mov	r2, r3
 800d93e:	4b13      	ldr	r3, [pc, #76]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d940:	4413      	add	r3, r2
 800d942:	79fa      	ldrb	r2, [r7, #7]
 800d944:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d946:	4b11      	ldr	r3, [pc, #68]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d948:	7a5b      	ldrb	r3, [r3, #9]
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	1c5a      	adds	r2, r3, #1
 800d94e:	b2d1      	uxtb	r1, r2
 800d950:	4a0e      	ldr	r2, [pc, #56]	; (800d98c <FATFS_LinkDriverEx+0x94>)
 800d952:	7251      	strb	r1, [r2, #9]
 800d954:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d956:	7dbb      	ldrb	r3, [r7, #22]
 800d958:	3330      	adds	r3, #48	; 0x30
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	3301      	adds	r3, #1
 800d964:	223a      	movs	r2, #58	; 0x3a
 800d966:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	3302      	adds	r3, #2
 800d96c:	222f      	movs	r2, #47	; 0x2f
 800d96e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	3303      	adds	r3, #3
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	371c      	adds	r7, #28
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	200000b4 	.word	0x200000b4

0800d990 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d99a:	2200      	movs	r2, #0
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff ffaa 	bl	800d8f8 <FATFS_LinkDriverEx>
 800d9a4:	4603      	mov	r3, r0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6039      	str	r1, [r7, #0]
 800d9ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d9bc:	88fb      	ldrh	r3, [r7, #6]
 800d9be:	2b7f      	cmp	r3, #127	; 0x7f
 800d9c0:	d802      	bhi.n	800d9c8 <ff_convert+0x18>
		c = chr;
 800d9c2:	88fb      	ldrh	r3, [r7, #6]
 800d9c4:	81fb      	strh	r3, [r7, #14]
 800d9c6:	e025      	b.n	800da14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9ce:	88fb      	ldrh	r3, [r7, #6]
 800d9d0:	2bff      	cmp	r3, #255	; 0xff
 800d9d2:	d805      	bhi.n	800d9e0 <ff_convert+0x30>
 800d9d4:	88fb      	ldrh	r3, [r7, #6]
 800d9d6:	3b80      	subs	r3, #128	; 0x80
 800d9d8:	4a12      	ldr	r2, [pc, #72]	; (800da24 <ff_convert+0x74>)
 800d9da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9de:	e000      	b.n	800d9e2 <ff_convert+0x32>
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	81fb      	strh	r3, [r7, #14]
 800d9e4:	e016      	b.n	800da14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	81fb      	strh	r3, [r7, #14]
 800d9ea:	e009      	b.n	800da00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d9ec:	89fb      	ldrh	r3, [r7, #14]
 800d9ee:	4a0d      	ldr	r2, [pc, #52]	; (800da24 <ff_convert+0x74>)
 800d9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9f4:	88fa      	ldrh	r2, [r7, #6]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d006      	beq.n	800da08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d9fa:	89fb      	ldrh	r3, [r7, #14]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	81fb      	strh	r3, [r7, #14]
 800da00:	89fb      	ldrh	r3, [r7, #14]
 800da02:	2b7f      	cmp	r3, #127	; 0x7f
 800da04:	d9f2      	bls.n	800d9ec <ff_convert+0x3c>
 800da06:	e000      	b.n	800da0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800da08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800da0a:	89fb      	ldrh	r3, [r7, #14]
 800da0c:	3380      	adds	r3, #128	; 0x80
 800da0e:	b29b      	uxth	r3, r3
 800da10:	b2db      	uxtb	r3, r3
 800da12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800da14:	89fb      	ldrh	r3, [r7, #14]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	0800e2ac 	.word	0x0800e2ac

0800da28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	4603      	mov	r3, r0
 800da30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da32:	88fb      	ldrh	r3, [r7, #6]
 800da34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da38:	d201      	bcs.n	800da3e <ff_wtoupper+0x16>
 800da3a:	4b3e      	ldr	r3, [pc, #248]	; (800db34 <ff_wtoupper+0x10c>)
 800da3c:	e000      	b.n	800da40 <ff_wtoupper+0x18>
 800da3e:	4b3e      	ldr	r3, [pc, #248]	; (800db38 <ff_wtoupper+0x110>)
 800da40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	1c9a      	adds	r2, r3, #2
 800da46:	617a      	str	r2, [r7, #20]
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da4c:	8a7b      	ldrh	r3, [r7, #18]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d068      	beq.n	800db24 <ff_wtoupper+0xfc>
 800da52:	88fa      	ldrh	r2, [r7, #6]
 800da54:	8a7b      	ldrh	r3, [r7, #18]
 800da56:	429a      	cmp	r2, r3
 800da58:	d364      	bcc.n	800db24 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	1c9a      	adds	r2, r3, #2
 800da5e:	617a      	str	r2, [r7, #20]
 800da60:	881b      	ldrh	r3, [r3, #0]
 800da62:	823b      	strh	r3, [r7, #16]
 800da64:	8a3b      	ldrh	r3, [r7, #16]
 800da66:	0a1b      	lsrs	r3, r3, #8
 800da68:	81fb      	strh	r3, [r7, #14]
 800da6a:	8a3b      	ldrh	r3, [r7, #16]
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da70:	88fa      	ldrh	r2, [r7, #6]
 800da72:	8a79      	ldrh	r1, [r7, #18]
 800da74:	8a3b      	ldrh	r3, [r7, #16]
 800da76:	440b      	add	r3, r1
 800da78:	429a      	cmp	r2, r3
 800da7a:	da49      	bge.n	800db10 <ff_wtoupper+0xe8>
			switch (cmd) {
 800da7c:	89fb      	ldrh	r3, [r7, #14]
 800da7e:	2b08      	cmp	r3, #8
 800da80:	d84f      	bhi.n	800db22 <ff_wtoupper+0xfa>
 800da82:	a201      	add	r2, pc, #4	; (adr r2, 800da88 <ff_wtoupper+0x60>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800daad 	.word	0x0800daad
 800da8c:	0800dabf 	.word	0x0800dabf
 800da90:	0800dad5 	.word	0x0800dad5
 800da94:	0800dadd 	.word	0x0800dadd
 800da98:	0800dae5 	.word	0x0800dae5
 800da9c:	0800daed 	.word	0x0800daed
 800daa0:	0800daf5 	.word	0x0800daf5
 800daa4:	0800dafd 	.word	0x0800dafd
 800daa8:	0800db05 	.word	0x0800db05
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800daac:	88fa      	ldrh	r2, [r7, #6]
 800daae:	8a7b      	ldrh	r3, [r7, #18]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	4413      	add	r3, r2
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	80fb      	strh	r3, [r7, #6]
 800dabc:	e027      	b.n	800db0e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dabe:	88fa      	ldrh	r2, [r7, #6]
 800dac0:	8a7b      	ldrh	r3, [r7, #18]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	b29b      	uxth	r3, r3
 800dacc:	88fa      	ldrh	r2, [r7, #6]
 800dace:	1ad3      	subs	r3, r2, r3
 800dad0:	80fb      	strh	r3, [r7, #6]
 800dad2:	e01c      	b.n	800db0e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dad4:	88fb      	ldrh	r3, [r7, #6]
 800dad6:	3b10      	subs	r3, #16
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	e018      	b.n	800db0e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dadc:	88fb      	ldrh	r3, [r7, #6]
 800dade:	3b20      	subs	r3, #32
 800dae0:	80fb      	strh	r3, [r7, #6]
 800dae2:	e014      	b.n	800db0e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dae4:	88fb      	ldrh	r3, [r7, #6]
 800dae6:	3b30      	subs	r3, #48	; 0x30
 800dae8:	80fb      	strh	r3, [r7, #6]
 800daea:	e010      	b.n	800db0e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800daec:	88fb      	ldrh	r3, [r7, #6]
 800daee:	3b1a      	subs	r3, #26
 800daf0:	80fb      	strh	r3, [r7, #6]
 800daf2:	e00c      	b.n	800db0e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800daf4:	88fb      	ldrh	r3, [r7, #6]
 800daf6:	3308      	adds	r3, #8
 800daf8:	80fb      	strh	r3, [r7, #6]
 800dafa:	e008      	b.n	800db0e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dafc:	88fb      	ldrh	r3, [r7, #6]
 800dafe:	3b50      	subs	r3, #80	; 0x50
 800db00:	80fb      	strh	r3, [r7, #6]
 800db02:	e004      	b.n	800db0e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800db0a:	80fb      	strh	r3, [r7, #6]
 800db0c:	bf00      	nop
			}
			break;
 800db0e:	e008      	b.n	800db22 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800db10:	89fb      	ldrh	r3, [r7, #14]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d195      	bne.n	800da42 <ff_wtoupper+0x1a>
 800db16:	8a3b      	ldrh	r3, [r7, #16]
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	697a      	ldr	r2, [r7, #20]
 800db1c:	4413      	add	r3, r2
 800db1e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800db20:	e78f      	b.n	800da42 <ff_wtoupper+0x1a>
			break;
 800db22:	bf00      	nop
	}

	return chr;
 800db24:	88fb      	ldrh	r3, [r7, #6]
}
 800db26:	4618      	mov	r0, r3
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	0800e3ac 	.word	0x0800e3ac
 800db38:	0800e5a0 	.word	0x0800e5a0

0800db3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db3c:	b580      	push	{r7, lr}
 800db3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db40:	4b05      	ldr	r3, [pc, #20]	; (800db58 <SysTick_Handler+0x1c>)
 800db42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db44:	f000 f996 	bl	800de74 <xTaskGetSchedulerState>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d001      	beq.n	800db52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db4e:	f000 f9fb 	bl	800df48 <xPortSysTickHandler>
  }
}
 800db52:	bf00      	nop
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	e000e010 	.word	0xe000e010

0800db5c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	689a      	ldr	r2, [r3, #8]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
}
 800db98:	bf00      	nop
 800db9a:	3714      	adds	r7, #20
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6892      	ldr	r2, [r2, #8]
 800dbba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	6852      	ldr	r2, [r2, #4]
 800dbc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d103      	bne.n	800dbd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	689a      	ldr	r2, [r3, #8]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	1e5a      	subs	r2, r3, #1
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc02:	4b4f      	ldr	r3, [pc, #316]	; (800dd40 <xTaskIncrementTick+0x148>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f040 808f 	bne.w	800dd2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc0c:	4b4d      	ldr	r3, [pc, #308]	; (800dd44 <xTaskIncrementTick+0x14c>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3301      	adds	r3, #1
 800dc12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc14:	4a4b      	ldr	r2, [pc, #300]	; (800dd44 <xTaskIncrementTick+0x14c>)
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d120      	bne.n	800dc62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc20:	4b49      	ldr	r3, [pc, #292]	; (800dd48 <xTaskIncrementTick+0x150>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <xTaskIncrementTick+0x46>
 800dc40:	4b41      	ldr	r3, [pc, #260]	; (800dd48 <xTaskIncrementTick+0x150>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	60fb      	str	r3, [r7, #12]
 800dc46:	4b41      	ldr	r3, [pc, #260]	; (800dd4c <xTaskIncrementTick+0x154>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a3f      	ldr	r2, [pc, #252]	; (800dd48 <xTaskIncrementTick+0x150>)
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	4a3f      	ldr	r2, [pc, #252]	; (800dd4c <xTaskIncrementTick+0x154>)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	4b3e      	ldr	r3, [pc, #248]	; (800dd50 <xTaskIncrementTick+0x158>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	4a3d      	ldr	r2, [pc, #244]	; (800dd50 <xTaskIncrementTick+0x158>)
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	f000 f8e9 	bl	800de34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc62:	4b3c      	ldr	r3, [pc, #240]	; (800dd54 <xTaskIncrementTick+0x15c>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d349      	bcc.n	800dd00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc6c:	4b36      	ldr	r3, [pc, #216]	; (800dd48 <xTaskIncrementTick+0x150>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc76:	4b37      	ldr	r3, [pc, #220]	; (800dd54 <xTaskIncrementTick+0x15c>)
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7c:	601a      	str	r2, [r3, #0]
					break;
 800dc7e:	e03f      	b.n	800dd00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc80:	4b31      	ldr	r3, [pc, #196]	; (800dd48 <xTaskIncrementTick+0x150>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d203      	bcs.n	800dca0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc98:	4a2e      	ldr	r2, [pc, #184]	; (800dd54 <xTaskIncrementTick+0x15c>)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc9e:	e02f      	b.n	800dd00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	3304      	adds	r3, #4
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff ff7d 	bl	800dba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d004      	beq.n	800dcbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	3318      	adds	r3, #24
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff ff74 	bl	800dba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc0:	4b25      	ldr	r3, [pc, #148]	; (800dd58 <xTaskIncrementTick+0x160>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d903      	bls.n	800dcd0 <xTaskIncrementTick+0xd8>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dccc:	4a22      	ldr	r2, [pc, #136]	; (800dd58 <xTaskIncrementTick+0x160>)
 800dcce:	6013      	str	r3, [r2, #0]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4a1f      	ldr	r2, [pc, #124]	; (800dd5c <xTaskIncrementTick+0x164>)
 800dcde:	441a      	add	r2, r3
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f7ff ff38 	bl	800db5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	4b1b      	ldr	r3, [pc, #108]	; (800dd60 <xTaskIncrementTick+0x168>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d3b8      	bcc.n	800dc6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcfe:	e7b5      	b.n	800dc6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd00:	4b17      	ldr	r3, [pc, #92]	; (800dd60 <xTaskIncrementTick+0x168>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd06:	4915      	ldr	r1, [pc, #84]	; (800dd5c <xTaskIncrementTick+0x164>)
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	440b      	add	r3, r1
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d901      	bls.n	800dd1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd1c:	4b11      	ldr	r3, [pc, #68]	; (800dd64 <xTaskIncrementTick+0x16c>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d007      	beq.n	800dd34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dd24:	2301      	movs	r3, #1
 800dd26:	617b      	str	r3, [r7, #20]
 800dd28:	e004      	b.n	800dd34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd2a:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <xTaskIncrementTick+0x170>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	4a0d      	ldr	r2, [pc, #52]	; (800dd68 <xTaskIncrementTick+0x170>)
 800dd32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd34:	697b      	ldr	r3, [r7, #20]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20000548 	.word	0x20000548
 800dd44:	2000052c 	.word	0x2000052c
 800dd48:	20000524 	.word	0x20000524
 800dd4c:	20000528 	.word	0x20000528
 800dd50:	20000540 	.word	0x20000540
 800dd54:	20000544 	.word	0x20000544
 800dd58:	20000530 	.word	0x20000530
 800dd5c:	200000c4 	.word	0x200000c4
 800dd60:	200000c0 	.word	0x200000c0
 800dd64:	2000053c 	.word	0x2000053c
 800dd68:	20000538 	.word	0x20000538

0800dd6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd72:	4b2a      	ldr	r3, [pc, #168]	; (800de1c <vTaskSwitchContext+0xb0>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd7a:	4b29      	ldr	r3, [pc, #164]	; (800de20 <vTaskSwitchContext+0xb4>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd80:	e046      	b.n	800de10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dd82:	4b27      	ldr	r3, [pc, #156]	; (800de20 <vTaskSwitchContext+0xb4>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd88:	4b26      	ldr	r3, [pc, #152]	; (800de24 <vTaskSwitchContext+0xb8>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	e010      	b.n	800ddb2 <vTaskSwitchContext+0x46>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10a      	bne.n	800ddac <vTaskSwitchContext+0x40>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	607b      	str	r3, [r7, #4]
}
 800dda8:	bf00      	nop
 800ddaa:	e7fe      	b.n	800ddaa <vTaskSwitchContext+0x3e>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	491d      	ldr	r1, [pc, #116]	; (800de28 <vTaskSwitchContext+0xbc>)
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d0e4      	beq.n	800dd90 <vTaskSwitchContext+0x24>
 800ddc6:	68fa      	ldr	r2, [r7, #12]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4a15      	ldr	r2, [pc, #84]	; (800de28 <vTaskSwitchContext+0xbc>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	60bb      	str	r3, [r7, #8]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	605a      	str	r2, [r3, #4]
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	3308      	adds	r3, #8
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d104      	bne.n	800ddf6 <vTaskSwitchContext+0x8a>
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	605a      	str	r2, [r3, #4]
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	4a0b      	ldr	r2, [pc, #44]	; (800de2c <vTaskSwitchContext+0xc0>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	4a08      	ldr	r2, [pc, #32]	; (800de24 <vTaskSwitchContext+0xb8>)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de06:	4b09      	ldr	r3, [pc, #36]	; (800de2c <vTaskSwitchContext+0xc0>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3358      	adds	r3, #88	; 0x58
 800de0c:	4a08      	ldr	r2, [pc, #32]	; (800de30 <vTaskSwitchContext+0xc4>)
 800de0e:	6013      	str	r3, [r2, #0]
}
 800de10:	bf00      	nop
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	20000548 	.word	0x20000548
 800de20:	2000053c 	.word	0x2000053c
 800de24:	20000530 	.word	0x20000530
 800de28:	200000c4 	.word	0x200000c4
 800de2c:	200000c0 	.word	0x200000c0
 800de30:	2000000c 	.word	0x2000000c

0800de34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de3a:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <prvResetNextTaskUnblockTime+0x38>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d104      	bne.n	800de4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <prvResetNextTaskUnblockTime+0x3c>)
 800de46:	f04f 32ff 	mov.w	r2, #4294967295
 800de4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de4c:	e008      	b.n	800de60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <prvResetNextTaskUnblockTime+0x38>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	4a04      	ldr	r2, [pc, #16]	; (800de70 <prvResetNextTaskUnblockTime+0x3c>)
 800de5e:	6013      	str	r3, [r2, #0]
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	20000524 	.word	0x20000524
 800de70:	20000544 	.word	0x20000544

0800de74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <xTaskGetSchedulerState+0x34>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d102      	bne.n	800de88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de82:	2301      	movs	r3, #1
 800de84:	607b      	str	r3, [r7, #4]
 800de86:	e008      	b.n	800de9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de88:	4b08      	ldr	r3, [pc, #32]	; (800deac <xTaskGetSchedulerState+0x38>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d102      	bne.n	800de96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de90:	2302      	movs	r3, #2
 800de92:	607b      	str	r3, [r7, #4]
 800de94:	e001      	b.n	800de9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de96:	2300      	movs	r3, #0
 800de98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de9a:	687b      	ldr	r3, [r7, #4]
	}
 800de9c:	4618      	mov	r0, r3
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	20000534 	.word	0x20000534
 800deac:	20000548 	.word	0x20000548

0800deb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800deb0:	4b07      	ldr	r3, [pc, #28]	; (800ded0 <pxCurrentTCBConst2>)
 800deb2:	6819      	ldr	r1, [r3, #0]
 800deb4:	6808      	ldr	r0, [r1, #0]
 800deb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deba:	f380 8809 	msr	PSP, r0
 800debe:	f3bf 8f6f 	isb	sy
 800dec2:	f04f 0000 	mov.w	r0, #0
 800dec6:	f380 8811 	msr	BASEPRI, r0
 800deca:	4770      	bx	lr
 800decc:	f3af 8000 	nop.w

0800ded0 <pxCurrentTCBConst2>:
 800ded0:	200000c0 	.word	0x200000c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
	...

0800dee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dee0:	f3ef 8009 	mrs	r0, PSP
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	4b15      	ldr	r3, [pc, #84]	; (800df40 <pxCurrentTCBConst>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	f01e 0f10 	tst.w	lr, #16
 800def0:	bf08      	it	eq
 800def2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800def6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800df00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800df04:	f380 8811 	msr	BASEPRI, r0
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f7ff ff2c 	bl	800dd6c <vTaskSwitchContext>
 800df14:	f04f 0000 	mov.w	r0, #0
 800df18:	f380 8811 	msr	BASEPRI, r0
 800df1c:	bc09      	pop	{r0, r3}
 800df1e:	6819      	ldr	r1, [r3, #0]
 800df20:	6808      	ldr	r0, [r1, #0]
 800df22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df26:	f01e 0f10 	tst.w	lr, #16
 800df2a:	bf08      	it	eq
 800df2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df30:	f380 8809 	msr	PSP, r0
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	f3af 8000 	nop.w

0800df40 <pxCurrentTCBConst>:
 800df40:	200000c0 	.word	0x200000c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df44:	bf00      	nop
 800df46:	bf00      	nop

0800df48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
	__asm volatile
 800df4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df52:	f383 8811 	msr	BASEPRI, r3
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	f3bf 8f4f 	dsb	sy
 800df5e:	607b      	str	r3, [r7, #4]
}
 800df60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df62:	f7ff fe49 	bl	800dbf8 <xTaskIncrementTick>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df6c:	4b06      	ldr	r3, [pc, #24]	; (800df88 <xPortSysTickHandler+0x40>)
 800df6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	2300      	movs	r3, #0
 800df76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800df7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <__libc_init_array>:
 800df8c:	b570      	push	{r4, r5, r6, lr}
 800df8e:	4d0d      	ldr	r5, [pc, #52]	; (800dfc4 <__libc_init_array+0x38>)
 800df90:	4c0d      	ldr	r4, [pc, #52]	; (800dfc8 <__libc_init_array+0x3c>)
 800df92:	1b64      	subs	r4, r4, r5
 800df94:	10a4      	asrs	r4, r4, #2
 800df96:	2600      	movs	r6, #0
 800df98:	42a6      	cmp	r6, r4
 800df9a:	d109      	bne.n	800dfb0 <__libc_init_array+0x24>
 800df9c:	4d0b      	ldr	r5, [pc, #44]	; (800dfcc <__libc_init_array+0x40>)
 800df9e:	4c0c      	ldr	r4, [pc, #48]	; (800dfd0 <__libc_init_array+0x44>)
 800dfa0:	f000 f83e 	bl	800e020 <_init>
 800dfa4:	1b64      	subs	r4, r4, r5
 800dfa6:	10a4      	asrs	r4, r4, #2
 800dfa8:	2600      	movs	r6, #0
 800dfaa:	42a6      	cmp	r6, r4
 800dfac:	d105      	bne.n	800dfba <__libc_init_array+0x2e>
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb4:	4798      	blx	r3
 800dfb6:	3601      	adds	r6, #1
 800dfb8:	e7ee      	b.n	800df98 <__libc_init_array+0xc>
 800dfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfbe:	4798      	blx	r3
 800dfc0:	3601      	adds	r6, #1
 800dfc2:	e7f2      	b.n	800dfaa <__libc_init_array+0x1e>
 800dfc4:	0800e6c4 	.word	0x0800e6c4
 800dfc8:	0800e6c4 	.word	0x0800e6c4
 800dfcc:	0800e6c4 	.word	0x0800e6c4
 800dfd0:	0800e6c8 	.word	0x0800e6c8

0800dfd4 <memcpy>:
 800dfd4:	440a      	add	r2, r1
 800dfd6:	4291      	cmp	r1, r2
 800dfd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfdc:	d100      	bne.n	800dfe0 <memcpy+0xc>
 800dfde:	4770      	bx	lr
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfea:	4291      	cmp	r1, r2
 800dfec:	d1f9      	bne.n	800dfe2 <memcpy+0xe>
 800dfee:	bd10      	pop	{r4, pc}

0800dff0 <memset>:
 800dff0:	4402      	add	r2, r0
 800dff2:	4603      	mov	r3, r0
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d100      	bne.n	800dffa <memset+0xa>
 800dff8:	4770      	bx	lr
 800dffa:	f803 1b01 	strb.w	r1, [r3], #1
 800dffe:	e7f9      	b.n	800dff4 <memset+0x4>

0800e000 <strcat>:
 800e000:	b510      	push	{r4, lr}
 800e002:	4602      	mov	r2, r0
 800e004:	7814      	ldrb	r4, [r2, #0]
 800e006:	4613      	mov	r3, r2
 800e008:	3201      	adds	r2, #1
 800e00a:	2c00      	cmp	r4, #0
 800e00c:	d1fa      	bne.n	800e004 <strcat+0x4>
 800e00e:	3b01      	subs	r3, #1
 800e010:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e014:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e018:	2a00      	cmp	r2, #0
 800e01a:	d1f9      	bne.n	800e010 <strcat+0x10>
 800e01c:	bd10      	pop	{r4, pc}
	...

0800e020 <_init>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr

0800e02c <_fini>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	bf00      	nop
 800e030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e032:	bc08      	pop	{r3}
 800e034:	469e      	mov	lr, r3
 800e036:	4770      	bx	lr
